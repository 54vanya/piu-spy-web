{"version":3,"sources":["utils/polyfills.js","constants/translations/ru.js","constants/translations/en.js","utils/context/translation.js","constants/routes.js","constants/leaderboard.js","components/Shared/Loader/index.js","reducers/user/resetAction.js","utils/fetch.js","constants/backend.js","reducers/trackStats/mostPlayed.js","reducers/trackStats/mostPlayedMonth.js","reducers/trackStats/leastPlayed.js","utils/date.js","utils/score.js","utils/expRanks.js","utils/exp.js","utils/achievements.js","utils/leaderboards.js","components/SongsTop/SongsTop.js","components/Shared/ToggleButton/ToggleButton.js","components/Shared/Input/Input.js","components/Shared/Toggle/Toggle.js","components/Shared/CollapsibleBar/index.js","components/Shared/Overlay/Overlay.js","components/Shared/Range/index.js","components/Leaderboard/ChartFilter.js","utils/workers/profilesPostProcess.js","constants/env.js","reducers/results.js","reducers/presets.js","components/Leaderboard/PresetsControl.js","components/Shared/Flag/index.js","components/Shared/Grade/index.js","components/SocketTracker/helpers.js","utils/colors.js","components/Leaderboard/Result.js","components/Leaderboard/ChartLabel.js","components/Leaderboard/Chart.js","constants/storageKeys.js","reducers/charts.js","reducers/selectors.js","components/Leaderboard/Leaderboard.js","components/Ranking/RankingList.js","components/Ranking/RankingFaq.js","reducers/preferences.js","components/Ranking/Ranking.js","components/Profile/MostPlayed.js","components/Profile/ExpFaq.js","reducers/profiles.js","utils/profiles.js","components/Profile/Profile.js","components/Profile/ResultsByLevel.js","components/ProfileCompare/ProfileCompare.js","reducers/user/index.js","reducers/login.js","components/Shared/TopBar/TopBar.js","components/LoginScreen/LoginScreen.js","constants/popups.js","reducers/popups.js","components/Shared/Popups/index.js","components/Shared/Popups/AchievementPopup.js","components/Shared/Popups/RankUpPopup.js","reducers/topPerSong.js","components/SocketTracker/PlayerCard.js","components/SocketTracker/SocketTracker.js","reducers/tournament.js","components/Tournaments/Tournaments.js","reducers/tracklist.js","reducers/players.js","components/App.js","reducers/trackStats/index.js","reducers/index.js","index.js","webpack:///./src/utils/workers/profilesPostProcess.js?f05c"],"names":["Number","isNaN","value","Math","sign","x","Array","prototype","findIndex","Object","defineProperty","predicate","this","TypeError","o","len","length","thisArg","arguments","k","kValue","call","configurable","writable","LEADERBOARDS","RANKING","TOURNAMENTS","SONGS","LOGOUT","FILTERS","SORTING","PRESETS","PRESETS_PLACEHOLDER","RESET_FILTERS","REFRESH","FILTER_CHARTS","CHARTS","SONG_NAME_PLACEHOLDER","PLAYERS_PLACEHOLDER","OPEN","OVERWRITE","DELETE","ADD","SAVE","CANCEL","EMPTY","SHOW_PRESETS_TABS","PRESET_NAME_PLACEHOLDER","SHOW_CHARTS_PLAYED_BY","EACH_OF_THESE","AND_ANY_OF_THESE","AND_NONE_OF_THESE","SHOW_RANK","RANK_FILTER_SHOW_ALL","RANK_FILTER_SHOW_BEST","RANK_FILTER_SHOW_RANK","RANK_FILTER_SHOW_NORANK","SHOW_HIDDEN_PLAYERS","SORTING_LABEL","SORTING_PLACEHOLDER","PLAYER_LABEL","EXCLUDE_FROM_COMPARISON","NEW_TO_OLD_SCORES","NEW_TO_OLD_SCORES_OF_A_PLAYER","SCORE_DIFFERENCE","WORST_TO_BEST_BY_ELO","BEST_TO_WORST_BY_ELO","WORST_TO_BEST_BY_PP","BEST_TO_WORST_BY_PP","EASY_TO_HARD_CHARTS","HARD_TO_EASY_CHARTS","SHOW_ALL_SCORES","BEST_SCORE","RANK_ONLY","ONLY_NO_RANK","PLAYER","EXP","ELO","PP","MODS","CCAL","SCORE_INCREASE","ORIGINAL_MIX","ORIGINAL_CHART","ORIGINAL_SCORE","SIGHTREAD","MY_BEST_SCORE_WARNING","BACK_TO_ALL_CHARTS","NO_RESULTS","SHOW_MORE","HIDDEN","DOUBLES","SINGLES","UNPLAYED","BACK_BUTTON","LEVEL_PLACEHOLDER","ru","detectedLanguage","navigator","language","includes","en","Language","React","createContext","displayName","useLanguage","useContext","routes","path","sharedChart","getPath","params","sharedChartId","faq","id","resultsByLevel","level","compare","compareToId","SORT","DEFAULT","PROTAGONIST","RANK_ASC","RANK_DESC","PP_ASC","PP_DESC","NEW_SCORES_PLAYER","EASIEST_SONGS","HARDEST_SONGS","RANK_FILTER","CHART_MIN_MAX","DURATION","STD","SHORT","REMIX","FULL","DURATION_DEFAULT","_","values","Loader","className","width","height","viewBox","xmlns","fill","cx","cy","r","attributeName","from","to","begin","dur","calcMode","repeatCount","fillOpacity","fetchJson","url","request","method","postJson","body","JSON","stringify","headers","defaultHeaders","async","dispatch","getState","session","cookies","get","response","fetch","credentials","status","json","error","isObject","isString","Error","message","type","Promise","reject","HOST","ERROR","initialState","isLoading","data","parseDate","textDate","moment","toDate","Date","getScoreWithoutBonus","score","grade","ranks","threshold","iconName","color","gradeValue","F","D","C","B","A","S","SS","SSS","getExp","result","chart","isBestGradeOnChart","chartType","chartLevel","getRankImg","rank","src","process","alt","achievements","icon","GiRank1","description","resultFunction","state","progress","combo","GiRank2","GiRank3","GiSmokingFinger","playedSongs","songsToPlay","song","uniq","GiRetroController","GiLoveSong","Улитка","GiSnail","charts","some","songToPlay","chartLabel","GiPodiumSecond","miss","bad","GiLifeBar","GiWoodenPegleg","good","great","initialAchievementState","TimeAgo","addLocale","timeAgo","timeStyle","flavour","gradation","convenient","units","tooltipFormatter","isExactDate","dateObject","toLocaleDateString","resultType","undefined","isMyBest","isMachineBest","style","display","alignItems","flexDirection","getTimeAgo","date","dayDiff","startOf","diff","hour","format","labelToTypeLevel","label","match","gradeComparator","mapResult","res","players","chartId","misses","bads","goods","greats","recognition_notes","isUnknownPlayer","player","arcade_name","isIntermediateResult","shared_chart","playerId","nickname","nicknameArcade","gained","exact_gain_date","scoreRaw","isRank","rank_mode","_r","originalChartMix","original_mix","originalChartLabel","original_label","originalScore","original_score","scoreIncrease","score_increase","calories","perfect","perfects","max_combo","mods","mods_list","isHJ","split","maxTotalSteps","infos","fixableIndex","absentNumbersCount","localStepSum","i","isNumber","tryFixIncompleteResult","sqrt","acc","floor","accRaw","accuracy","toFixed","accuracyRaw","toNumber","initializeProfile","profiles","fromPairs","map","name","nameArcade","resultsByGrade","firstResultDate","lastResultDate","count","battleCount","countAcc","grades","sumAccuracy","rankingHistory","ratingHistory","lastPlace","lastBattleDate","region","flow","keys","achName","exp","getProfileInfoFromResult","profile","replace","mapValues","convert","cap","achState","getMaxRawScore","TopList","fetchList","title","renderRightSide","setData","useState","setLoading","getRightSide","item","countplay","useEffect","then","success","catch","index","key","classNames","best","full_name","leastPlayedRightSide","last_play","connect","fetchMostPlayed","fetchMostPlayedMonth","fetchLeastPlayed","ToggleButton","PureComponent","render","active","onToggle","text","props","onClick","Input","Component","constructor","super","isNil","defaultValue","bindAll","componentDidUpdate","prevProps","setState","handleChange","e","newValue","target","onChange","handleBlur","numericValue","min","max","onBlur","handleKeyPress","omit","onKeyPress","onInput","noop","defaultProps","Toggle","checked","uniqueId","htmlFor","children","CollapsibleBar","open","defaultOpen","POPPER_MODIFIERS","preventOverflow","enabled","padding","boundariesElement","PLACEMENT_ARROW_MAPPING","right","left","top","bottom","getArrowPlacement","placement","Overlay","isVisible","containerItemRef","createRef","renderPopper","bind","toggleOverlayVisibility","hideOverlay","handleClickOutside","event","closest","ref","arrowProps","scheduleUpdate","outOfBoundaries","hideWhenOutOfBounds","data-placement","overlayClassName","overlayItem","Fragment","ReactDOM","createPortal","container","document","modifiers","referenceElement","current","defaultTypes","listensToClickOutside","Range","range","step","renderTrack","onMouseDown","onTouchStart","position","borderRadius","background","getTrackBackground","colors","alignSelf","renderThumb","isDragged","backgroundColor","justifyContent","boxShadow","ChartFilter","filterValue","onChangeEx","getOr","duration","lang","buttonText","t","isEqual","isEmpty","newMin","newMax","without","postProcessProfiles","tracklist","neededGrades","expRank","findLast","expRanks","expRankNext","find","double","single","gradeIncrementMap","accuracyPointsRaw","forEach","push","thisGrade","thisPlayerId","otherResults","results","filter","sort","a","b","indexOf","gradeIncArray","gradeInc","l","g","prog","incrementLevel","number","minimumNumber","totalCharts","round","getMinimumNumber","bonusCoefficientNumber","bonus","getBonusForLevel","achievementBonus","getProcessedProfiles","sharedCharts","battles","debug","resultInfo","chartResults","maxPP","interpolatedDifficulty","maxScore","K","pp","ppPotential","ppRatio","ppFixed","scores","pp_","s","rating","orderBy","items","getTime","place","processPP","sums","size","accuracyPointsInterpolated","maxAccuracy","maxBy","y","maxLevelWithMaxAcc","points","regression","logarithmic","f","calculated","predict","yx","interpolatedPoint","pair","returnValue","weight","abs","interpolation","identity","reduce","diffSum","weightSum","averageDifficulty","interpolateDifficulties","logText","dictScoreInfo","dictChartElo","getDictChartEloId","enemyScore","dictRatingDiff","getDictRatingDiffId","p1","p2","scoreMultiplier","scoreInfo","enemyScoreInfo","startingRating","r1","r2","R1","R2","E1","E2","S1","S2","kRating1","kRating2","maxK1","maxK2","kLevel1","kLevel2","kLevel","kMinimizer","startsWith","K1","K2","dr1","dr2","baseEloId1","baseEloId2","baseEloP1","baseEloP2","ratingDiffId1","ratingDiffId2","ratingDiff","ratingDiffLast","playersSorted","battleDate","p1LastRating","last","p2LastRating","toInteger","ratingRaw","now","processBattles","DEBUG","localStorage","getItem","window","debugOn","setItem","debugOff","removeItem","highscoresUrl","REACT_APP_SOCKET","defaultFilter","isLoadingRanking","fetchResults","processResultsData","console","log","mappedResults","shared_charts","getTopResultId","getBestGradeResultId","topResults","bestGradeResults","resRaw","toUpper","chart_label","track_name","max_total_steps","allResultsIds","chartTop","topResultId","currentTopResult","oldScoreIndex","splice","newScoreIndex","sortedLastIndexBy","latestScoreDate","enemyResult","bestGradeResultId","currentBestGradeRes","maxScoreCandidate","processData","toPairs","originalData","input","output","Worker","worker","WorkerProfilesProcessing","terminate","profilesProcessing","q","calculateRankingChanges","setFilter","getListOfNames","getMapOfRatings","ranking","lastChangedRanking","lastChangedRankingPoints","lastFetchedRanking","all","localForage","listNow","listLastFetched","listLastChanged","mapPointsNow","mapPointsLastFetched","rankingsPointsMap","listPrev","warn","presets","currentPreset","itemToOption","reloadPresets","selectPreset","openPreset","mapDispatchToProps","loadPresets","savePreset","newPreset","confirm","newPresets","remove","deletePreset","withoutOldPreset","PresetsControl","onChangeSelection","selected","onRewritePreset","onSavePreset","isAddingNew","componentDidMount","context","classNamePrefix","placeholder","options","noOptionsMessage","disabled","contextType","Flag","backgroundImage","Grade","preprocessData","fullRes","every","stepSum","sum","n","track","mix","resultInfoOverrides","numb","latest","hasRankScore","useTracked","resetIndicatorData","isDebugOn","prevData","setPrevData","currData","setCurrData","resetIndicator","useRef","reset","useCallback","useMemo","useResetTrackedObject","object","tracking","colorsArray","forwardRef","placeDifference","showProtagonistEloChange","showProtagonistPpChange","protagonistName","uniqueSelectedNames","leftProfile","rightProfile","isSocketView","inf","ratingInfoBlock","flag","nameIndex","empty","outline","isSecondOccurenceInResults","topPlace","fontWeight","exact","mod","avMod","endsWith","xMod","numeral","vj","hj","getShortTimeAgo","content","tooltipClassName","singlep","doublep","coop","Chart","playersHiddenStatus","chartOriginal","showHiddenPlayers","overrides","setOverrides","isHidingPlayers","setHidingPlayers","first","occuredNicknames","hiddenPlayersCount","isPlayerHidden","onRedoLatestResult","throttle","ANIMATION_DURATION","newOverrides","drop","onUndoLatestResult","undoedResult","undoedPlayerId","previousResults","previousPlayerResult","newResults","compact","latestScore","overrideChart","isActive","totalResultsCount","countBy","eachResultPlayerIds","true","currentIndex","canUndo","interpDiff","ChartLabel","href","queryString","search_query","rel","enterAnimation","leaveAnimation","typeName","maintainContainerHeight","isProtagonist","newIndex","prevScore","findLastIndex","preferences","resultsUrl","lastUpdatedOn","setChartsData","fetchChartsData","performance","mark","cache","measure","cachedData","queryParams","since","fetchedData","lastUpdatedAt","newLastUpdated","newData","setAndCacheData","chartsData","allResults","chartEntry","chartInfo","forEachRight","_result","resultIndex","sortedIndexBy","processChartsData","getEntriesByType","join","clearMarks","clearMeasures","playersSelector","createSelector","user","isCurrentPlayer","sortBy","it","toLower","filteredDataSelector","start","showHidden","showHiddenFromPreferences","names","namesOr","playersOr","namesNot","playersNot","sortingType","rankFilter","protagonist","excludeAntagonists","defaultSorting","newScoresProtagonistSorting","protagonistSorting","row","protIndex","protScore","enemies","take","uniqBy","distance","dist","enemy","distanceFromProtagonist","getPpSorting","field","direction","info","Infinity","getEloSorting","getDiffSorting","sortingFunctions","occuredIds","isVisibleWithRankFilter","chartRange","rows","filterCharts","rowNames","matchSorter","trim","sharedChartDataSelector","getSortingOptions","memoize","getRankOptions","resetFilter","Leaderboard","showItemsCount","curry","onRefresh","onTypeSongName","debounce","renderSimpleSearch","Consumer","renderFilters","closeMenuOnSelect","isMulti","renderSortings","isClearable","isChartView","filteredData","history","canShowMore","visibleData","slice","highlightProtagonist","goBack","preset","chartIndex","RankingList","updatePreferences","playerIndex","isHidden","showHiddenPlayersInRanking","change","prevRating","down","up","set","RankingFaq","defaultPreferences","rankingSelector","Ranking","onChangeHidingPlayers","component","withRouter","limit","setLimit","latestDate","ExpFaq","setProfilesFilter","resetProfilesFilter","cutRange","array","startIndex","endIndex","firstElement","lastElement","defaultGradesDistribution","defaultGradesWithLevelsDistribution","flatMap","profileSelectorCreator","idParamName","idText","levelsDistribution","singlesLevels","doublesLevels","gradesData","update","gradesDistribution","groupBy","pick","gradesValues","gradesAndLevelsDistribution","groupedResults","counts","reduced","levelsData","lastTickRating","lastTickRanking","lastTick","firstTick","lastDay","endOf","minMaxRange","filterRange","dayRange","dayRangeMs","placesChanges","ratingChanges","profileSelector","otherPlayersSelector","ind","Profile","isLevelGraphCombined","showFaq","onChangeDayRange","onShowFaq","onHideFaq","circleShape","args","componentWillUnmount","renderRankingHistory","minHeight","aspect","margin","strokeDasharray","dataKey","domain","tickFormatter","allowDecimals","stroke","isAnimationActive","payload","strokeWidth","dot","renderAccuracyPoints","interpolated","pointsByType","ticks","shape","false","renderPlaceHistory","dataMax","interval","reversed","renderGrades","stackId","renderGradesWithLevels","stackOffset","doubleItems","singleItems","dataMin","offset","renderLevels","totalD","totalS","renderGradeBlock","obj","typeLetter","progr","minNumber","currentNumber","levelString","complete","zero","renderAchievement","achievement","Icon","renderResultsByLevelHeader","renderResultsByLevelFooter","renderProfile","otherPlayers","expProgress","ariaHideApp","isOpen","onRequestClose","ceil","currentRange","dateL","dateR","l1","l2","MostPlayed","selectOptionsSelector","resultsByLevelSelector","sortOrder","toString","unplayed","byType","group","ResultsByLevel","setSortOrder","selectOptions","useSelector","redirectToLevel","chartTypeText","order","option","byGrade","BARS_MODES","SINGLE_TWO","SINGLE_FIVE","DOUBLE_TWO","DOUBLE_FIVE","BOTH_TWO","BOTH_FIVE","profile1Selector","profile2Selector","getCombinedData","rc1","rc2","allRC","rating2","rating1","sortedUniqBy","allPC","place2","place1","perLevelComparison","p1win","p1notPlayed","p2win","p2notPlayed","notPlayed","twoBars","p1index","p2index","perType","normalizeTwo","dataObj","totalPlayed","normalizeFive","total","chartLevels","ProfileCompare","compareBarsMode","rhMargin","rhXDomain","rhYDomain","rhXTickFormatter","rhTooltip","profile2","p1Name","p2Name","plcMargin","plcTooltip","isTwo","renderLegendItem","plcXDomain","plcXTicks","plcXFormatter","combinedData","useProfile2","renderPerLevelComparison","layout","mode","getCompareBars","profile1","fetchUser","login","googleResponse","token","tokenId","expires","loginACs","logout","isLoadingLogin","isLoadingUser","isClown","setClown","onGoogleResponse","clientId","onSuccess","onFailure","cookiePolicy","TYPES","popups","popupByType","playerName","achievementName","progressNumber","setProgressNumber","prevPlace","currPlace","list","prevList","currList","setPlace","setList","listTop","delay","pl","renderPlayerLine","popupStyles","overlay","transition","opacity","removePopup","visiblePopup","setVisiblePopup","contentRef","popup","persistent","setTimeout","fadeOut","timeout","onAfterOpen","fadeIn","popupBody","PopupComponent","parameters","fetchingParams","PlayerCard","trackedData","isLeft","topPlayersList","addPopup","renderDeltaText","prevN","delta","rivals","closestPlayers","resetData","isDataValid","useTrackedEx","takenWidth","emptyWidth","diffWidth","renderExpLine","elo","topPlayersListSelector","fetchTopPerSong","songName","leftLabel","rightLabel","song_name","processedData","appendNewResults","lastDate","start_date","appendedResults","currentResults","oldResult","old","mergedData","popupType","fetchUserPreferences","topPerSong","songTopData","setMessage","socketErrorMessage","setSocketErrorMessage","isSocketReady","setSocketReady","isAlive","setAlive","setLeftLabel","setRightLabel","leftPlayer","setLeftPlayer","rightPlayer","setRightPlayer","recognizedSongName","setRecognizedSongName","leftPreferences","setLeftPreferences","rightPreferences","setRightPreferences","resultsContainerRef","leftResultRef","rightResultRef","socketRef","timeoutResetTokenRef","minBy","p","lev","onChangeAchievements","prevAchievement","currAchievement","leftTracked","resetLeftTracked","rightTracked","resetRightTracked","restartTimeout","clearTimeout","STATE_RESET_TIMEOUT_SEC","WebSocket","onerror","onopen","onmessage","parse","newSongName","totalSize","w","clientWidth","h","clientHeight","scaleHH","offsetWidth","scaleHW","offsetHeight","scaleWH","scaleWW","transform","scaleW","scaleH","leftChart","rightChart","chartsToShow","leftPlayersHiddenStatus","omitBy","v","rightPlayersHiddenStatus","isHiddenInBoth","Tournaments","useDispatch","selectedBracket","setSelectedBracket","tournData","tournament","currentPlayerId","bracket","br","playerIds","brackets","monthText","toLocaleString","month","tournamentTitle","getFullYear","end_date","trackName","colSpan","columnIndex","playerData","bestPlayerScore","percent","player_name","playcount","percentRaw","totalPercentRaw","sumBy","infoByIndex","totalPercent","sortedIds","noResultsIds","fetchTracklist","ReactModal","setAppElement","App","userData","SocketTracker","SongsTop","combineReducers","mostPlayed","action","mostPlayedMonth","leastPlayed","rootReducer","merge","hasPrevList","playerOriginal","trackStats","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","applyMiddleware","thunk","Provider","getElementById","addMethods","methods","module","exports"],"mappings":"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","file":"static/js/main.8695e7d6.chunk.js","sourcesContent":["/* eslint-disable */\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\r\nNumber.isNaN =\r\n  Number.isNaN ||\r\n  function(value) {\r\n    return value !== value;\r\n  };\r\n\r\nif (typeof Math.sign === 'undefined') {\r\n  Math.sign = function(x) {\r\n    return x > 0 ? 1 : x < 0 ? -1 : x;\r\n  };\r\n}\r\n\r\n// https://tc39.github.io/ecma262/#sec-array.prototype.findindex\r\nif (!Array.prototype.findIndex) {\r\n  Object.defineProperty(Array.prototype, 'findIndex', {\r\n    value: function(predicate) {\r\n      // 1. Let O be ? ToObject(this value).\r\n      if (this == null) {\r\n        throw new TypeError('\"this\" is null or not defined');\r\n      }\r\n\r\n      var o = Object(this);\r\n\r\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\r\n      var len = o.length >>> 0;\r\n\r\n      // 3. If IsCallable(predicate) is false, throw a TypeError exception.\r\n      if (typeof predicate !== 'function') {\r\n        throw new TypeError('predicate must be a function');\r\n      }\r\n\r\n      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\r\n      var thisArg = arguments[1];\r\n\r\n      // 5. Let k be 0.\r\n      var k = 0;\r\n\r\n      // 6. Repeat, while k < len\r\n      while (k < len) {\r\n        // a. Let Pk be ! ToString(k).\r\n        // b. Let kValue be ? Get(O, Pk).\r\n        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\r\n        // d. If testResult is true, return k.\r\n        var kValue = o[k];\r\n        if (predicate.call(thisArg, kValue, k, o)) {\r\n          return k;\r\n        }\r\n        // e. Increase k by 1.\r\n        k++;\r\n      }\r\n\r\n      // 7. Return -1.\r\n      return -1;\r\n    },\r\n    configurable: true,\r\n    writable: true,\r\n  });\r\n}\r\n","export default {\r\n  // Main top menu\r\n  LEADERBOARDS: 'лидерборды',\r\n  RANKING: 'ранкинг',\r\n  TOURNAMENTS: 'турниры',\r\n  SONGS: 'треки',\r\n  LOGOUT: 'выйти',\r\n  // Leaderboards buttons\r\n  FILTERS: 'фильтры',\r\n  SORTING: 'сортировка',\r\n  PRESETS: 'пресеты',\r\n  PRESETS_PLACEHOLDER: 'пресеты...',\r\n  RESET_FILTERS: 'сбросить фильтры',\r\n  REFRESH: 'обновить',\r\n  FILTER_CHARTS: 'фильтр чартов',\r\n  CHARTS: 'чарты',\r\n  SONG_NAME_PLACEHOLDER: 'название песни...',\r\n  PLAYERS_PLACEHOLDER: 'игроки...',\r\n  // Presets overlay\r\n  OPEN: 'открыть',\r\n  OVERWRITE: 'перезаписать',\r\n  DELETE: 'удалить',\r\n  ADD: 'добавить',\r\n  SAVE: 'сохранить',\r\n  CANCEL: 'отмена',\r\n  EMPTY: 'пусто',\r\n  SHOW_PRESETS_TABS: 'показывать табы с пресетами',\r\n  PRESET_NAME_PLACEHOLDER: 'имя пресета...',\r\n  // Leaderboards Filters\r\n  SHOW_CHARTS_PLAYED_BY: 'показывать чарты, которые сыграл:',\r\n  EACH_OF_THESE: 'каждый из этих',\r\n  AND_ANY_OF_THESE: 'и хоть один из этих',\r\n  AND_NONE_OF_THESE: 'и никто из этих',\r\n  SHOW_RANK: 'показывать ранк:',\r\n  RANK_FILTER_SHOW_ALL: 'показывать все скоры',\r\n  RANK_FILTER_SHOW_BEST: 'один лучший скор каждого игрока (ранк или нет)',\r\n  RANK_FILTER_SHOW_RANK: 'только на ранке',\r\n  RANK_FILTER_SHOW_NORANK: 'только без ранка',\r\n  SHOW_HIDDEN_PLAYERS: 'показывать скрытых игроков',\r\n  // Leaderboards Sorting\r\n  SORTING_LABEL: 'сортировка:',\r\n  SORTING_PLACEHOLDER: 'выберите сортировку',\r\n  PLAYER_LABEL: 'игрок:',\r\n  EXCLUDE_FROM_COMPARISON: 'не учитывать в сравнении:',\r\n  // Sorting options\r\n  NEW_TO_OLD_SCORES: 'от новых скоров',\r\n  NEW_TO_OLD_SCORES_OF_A_PLAYER: 'от новых скоров конкретного игрока',\r\n  SCORE_DIFFERENCE: 'отставанию от остальных',\r\n  WORST_TO_BEST_BY_ELO: 'от худших результатов (эло)',\r\n  BEST_TO_WORST_BY_ELO: 'от лучших результатов (эло)',\r\n  WORST_TO_BEST_BY_PP: 'от худших результатов (pp)',\r\n  BEST_TO_WORST_BY_PP: 'от лучших результатов (pp)',\r\n  EASY_TO_HARD_CHARTS: 'от лёгких чартов',\r\n  HARD_TO_EASY_CHARTS: 'от сложных чартов',\r\n  // Rank options\r\n  SHOW_ALL_SCORES: 'показывать все скоры',\r\n  BEST_SCORE: 'один лучший скор каждого игрока (ранк или нет)',\r\n  RANK_ONLY: 'только на ранке',\r\n  ONLY_NO_RANK: 'только без ранка',\r\n  // Score details overlay\r\n  PLAYER: 'игрок',\r\n  EXP: 'опыт',\r\n  ELO: 'эло',\r\n  PP: 'pp',\r\n  MODS: 'моды',\r\n  CCAL: 'ккал',\r\n  SCORE_INCREASE: 'прирост',\r\n  ORIGINAL_MIX: 'было сыграно на',\r\n  ORIGINAL_CHART: 'оригинальный чарт:',\r\n  ORIGINAL_SCORE: 'оригинальный скор:',\r\n  SIGHTREAD: '* сайтрид',\r\n  MY_BEST_SCORE_WARNING: 'рекорд взят с my best. часть данных недоступна',\r\n  // Other\r\n  BACK_TO_ALL_CHARTS: 'ко всем чартам',\r\n  NO_RESULTS: 'ничего не найдено',\r\n  SHOW_MORE: 'показать больше',\r\n  HIDDEN: 'скрыто',\r\n  // Profile Results by level\r\n  DOUBLES: 'даблы',\r\n  SINGLES: 'синглы',\r\n  UNPLAYED: 'не сыграно',\r\n  BACK_BUTTON: 'назад',\r\n  LEVEL_PLACEHOLDER: 'уровень...',\r\n  // TODO: WIP, not finished\r\n};\r\n","import ru from './ru';\r\n\r\nexport default {\r\n  ...ru,\r\n  DOUBLES: 'doubles',\r\n  SINGLES: 'singles',\r\n  UNPLAYED: 'unplayed',\r\n  BACK_BUTTON: 'back',\r\n  LEVEL_PLACEHOLDER: 'level...',\r\n};\r\n","import React, { useContext } from 'react';\r\n\r\nimport en from 'constants/translations/en';\r\nimport ru from 'constants/translations/ru';\r\n\r\nconst isRussian = navigator.language.includes('ru');\r\n\r\nexport const detectedLanguage = isRussian ? ru : en;\r\n\r\nconst Language = React.createContext(detectedLanguage);\r\nLanguage.displayName = 'Language';\r\n\r\nexport const useLanguage = () => {\r\n  return useContext(Language);\r\n};\r\n\r\nexport { Language };\r\n","export const routes = {\r\n  leaderboard: {\r\n    path: `/leaderboard`,\r\n    sharedChart: {\r\n      path: `/leaderboard/chart/:sharedChartId`,\r\n      getPath: (params) => `/leaderboard/chart/${params.sharedChartId}`,\r\n    },\r\n  },\r\n  songs: {\r\n    path: `/songs`,\r\n  },\r\n  ranking: {\r\n    path: `/ranking`,\r\n    faq: {\r\n      path: '/ranking/faq',\r\n    },\r\n  },\r\n  tournaments: {\r\n    path: `/tournaments`,\r\n  },\r\n  profile: {\r\n    path: `/profiles/:id`,\r\n    getPath: (params) => `/profiles/${params.id}`,\r\n    resultsByLevel: {\r\n      path: `/profiles/:id/levels`,\r\n      getPath: (params) => `/profiles/${params.id}/levels`,\r\n      level: {\r\n        path: `/profiles/:id/levels/:level`,\r\n        getPath: (params) => `/profiles/${params.id}/levels/${params.level}`,\r\n      },\r\n    },\r\n    compare: {\r\n      path: `/profiles/:id/vs/:compareToId`,\r\n      getPath: (params) => `/profiles/${params.id}/vs/${params.compareToId}`,\r\n    },\r\n  },\r\n};\r\n","import _ from 'lodash/fp';\r\n\r\nexport const SORT = {\r\n  DEFAULT: 'default',\r\n  PROTAGONIST: 'protagonist',\r\n  RANK_ASC: 'rankAsc',\r\n  RANK_DESC: 'rankDesc',\r\n  PP_ASC: 'ppAsc',\r\n  PP_DESC: 'ppDesc',\r\n  NEW_SCORES_PLAYER: 'newScoresPlayer',\r\n  EASIEST_SONGS: 'easiestSongs',\r\n  HARDEST_SONGS: 'hardestSongs',\r\n};\r\n\r\nexport const RANK_FILTER = {\r\n  SHOW_ALL: 'SHOW_ALL',\r\n  SHOW_BEST: 'SHOW_BEST',\r\n  SHOW_ONLY_RANK: 'SHOW_ONLY_RANK',\r\n  SHOW_ONLY_NORANK: 'SHOW_ONLY_NORANK',\r\n};\r\n\r\nexport const CHART_MIN_MAX = [1, 28];\r\nexport const DURATION = {\r\n  STD: 'Standard',\r\n  SHORT: 'Short',\r\n  REMIX: 'Remix',\r\n  FULL: 'Full',\r\n};\r\nexport const DURATION_DEFAULT = _.values(DURATION);\r\n","import React from 'react';\r\n\r\nimport './loader.scss';\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div className=\"loader\">\r\n      <svg\r\n        width=\"40\"\r\n        height=\"12\"\r\n        viewBox=\"0 0 120 30\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"#eee\"\r\n      >\r\n        <circle cx=\"15\" cy=\"15\" r=\"15\">\r\n          <animate\r\n            attributeName=\"r\"\r\n            from=\"15\"\r\n            to=\"15\"\r\n            begin=\"0s\"\r\n            dur=\"0.8s\"\r\n            values=\"15;9;15\"\r\n            calcMode=\"linear\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n          <animate\r\n            attributeName=\"fill-opacity\"\r\n            from=\"1\"\r\n            to=\"1\"\r\n            begin=\"0s\"\r\n            dur=\"0.8s\"\r\n            values=\"1;.5;1\"\r\n            calcMode=\"linear\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </circle>\r\n        <circle cx=\"60\" cy=\"15\" r=\"9\" fillOpacity=\"0.3\">\r\n          <animate\r\n            attributeName=\"r\"\r\n            from=\"9\"\r\n            to=\"9\"\r\n            begin=\"0s\"\r\n            dur=\"0.8s\"\r\n            values=\"9;15;9\"\r\n            calcMode=\"linear\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n          <animate\r\n            attributeName=\"fill-opacity\"\r\n            from=\"0.5\"\r\n            to=\"0.5\"\r\n            begin=\"0s\"\r\n            dur=\"0.8s\"\r\n            values=\".5;1;.5\"\r\n            calcMode=\"linear\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </circle>\r\n        <circle cx=\"105\" cy=\"15\" r=\"15\">\r\n          <animate\r\n            attributeName=\"r\"\r\n            from=\"15\"\r\n            to=\"15\"\r\n            begin=\"0s\"\r\n            dur=\"0.8s\"\r\n            values=\"15;9;15\"\r\n            calcMode=\"linear\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n          <animate\r\n            attributeName=\"fill-opacity\"\r\n            from=\"1\"\r\n            to=\"1\"\r\n            begin=\"0s\"\r\n            dur=\"0.8s\"\r\n            values=\"1;.5;1\"\r\n            calcMode=\"linear\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </circle>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n","export const RESET = `USER/RESET`;\r\nexport const resetUser = () => ({ type: RESET });\r\n","import _ from 'lodash/fp';\r\nimport cookies from 'browser-cookies';\r\n\r\nimport { resetUser } from 'reducers/user/resetAction';\r\n\r\nexport const fetchJson = ({ url }) => request({ url, method: 'get' });\r\nexport const postJson = ({ url, body }) =>\r\n  request({\r\n    url,\r\n    method: 'post',\r\n    body: JSON.stringify(body),\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n  });\r\n\r\nconst defaultHeaders = {};\r\n\r\nexport const request = ({ url, method, body, headers }) => async (dispatch, getState) => {\r\n  try {\r\n    const session = cookies.get('session');\r\n    if (session) {\r\n      defaultHeaders['Session'] = session;\r\n    }\r\n    const response = await fetch(url, {\r\n      method,\r\n      body,\r\n      headers: { ...defaultHeaders, ...headers },\r\n      credentials: 'include',\r\n    });\r\n    if (response.status >= 200 && response.status < 300) {\r\n      const data = await response.json();\r\n      return data;\r\n    } else {\r\n      const error = await response.json();\r\n      if (_.isObject(error) && _.isString(error.error)) {\r\n        throw new Error(error.error);\r\n      } else if (_.isString(error)) {\r\n        throw new Error(error);\r\n      } else {\r\n        throw new Error('HTTP Status ' + response.status);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    if (error.message === 'Invalid session') {\r\n      dispatch(resetUser());\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n};\r\n","// export const HOST = 'http://localhost:5000';\r\nexport const HOST = 'https://vps720616.ovh.net:5000';\r\nexport const SOCKET_SERVER_IP = 'ws://127.0.0.1:6789';\r\n","import { fetchJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nconst LOADING = `MOST_PLAYED/LOADING`;\r\nconst SUCCESS = `MOST_PLAYED/SUCCESS`;\r\nconst ERROR = `MOST_PLAYED/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: [],\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchMostPlayed = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/track-stats/most-played` }));\r\n      dispatch({ type: SUCCESS, data });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import { fetchJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nconst LOADING = `MOST_PLAYED_MONTH/LOADING`;\r\nconst SUCCESS = `MOST_PLAYED_MONTH/SUCCESS`;\r\nconst ERROR = `MOST_PLAYED_MONTH/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: [],\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchMostPlayedMonth = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/track-stats/most-played-month` }));\r\n      dispatch({ type: SUCCESS, data });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import { fetchJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nconst LOADING = `LEAST_PLAYED/LOADING`;\r\nconst SUCCESS = `LEAST_PLAYED/SUCCESS`;\r\nconst ERROR = `LEAST_PLAYED/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: [],\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchLeastPlayed = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/track-stats/most-time-not-played` }));\r\n      dispatch({ type: SUCCESS, data });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import moment from 'moment';\r\n\r\nexport const parseDate = (textDate) => {\r\n  if (typeof textDate === 'string') {\r\n    return moment(textDate).toDate();\r\n  } else {\r\n    return new Date(textDate);\r\n  }\r\n};\r\n","export const getScoreWithoutBonus = (score, grade) => {\r\n  if (grade === 'SSS') return score - 300000;\r\n  if (grade === 'SS') return score - 150000;\r\n  if (grade === 'S') return score - 100000;\r\n  return score;\r\n};\r\n","export const ranks = [\r\n  {\r\n    threshold: 0,\r\n    iconName: '0.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 1000,\r\n    iconName: '1.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 2000,\r\n    iconName: '2.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 3000,\r\n    iconName: '3.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 4000,\r\n    iconName: '4.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 5000,\r\n    iconName: '5.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 6250,\r\n    iconName: '6.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 7500,\r\n    iconName: '7.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 8750,\r\n    iconName: '8.png',\r\n    color: 'bronze',\r\n  },\r\n  {\r\n    threshold: 10000,\r\n    iconName: '9.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 12000,\r\n    iconName: '10.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 14000,\r\n    iconName: '11.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 16000,\r\n    iconName: '12.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 18000,\r\n    iconName: '13.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 22000,\r\n    iconName: '14.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 26000,\r\n    iconName: '15.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 30000,\r\n    iconName: '16.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 35000,\r\n    iconName: '17.png',\r\n    color: 'silver',\r\n  },\r\n  {\r\n    threshold: 40000,\r\n    iconName: '18.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 50000,\r\n    iconName: '19.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 60000,\r\n    iconName: '20.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 70000,\r\n    iconName: '21.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 80000,\r\n    iconName: '22.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 100000,\r\n    iconName: '23.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 120000,\r\n    iconName: '24.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 140000,\r\n    iconName: '25.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 160000,\r\n    iconName: '26.png',\r\n    color: 'gold',\r\n  },\r\n  {\r\n    threshold: 180000,\r\n    iconName: '27.png',\r\n    color: 'green',\r\n  },\r\n];\r\n","import React from 'react';\r\n\r\nexport const gradeValue = {\r\n  F: 0.1,\r\n  D: 0.2,\r\n  'D+': 0.3,\r\n  C: 0.3,\r\n  'C+': 0.5,\r\n  B: 0.5,\r\n  'B+': 0.8,\r\n  A: 0.8,\r\n  'A+': 1,\r\n  S: 1.1,\r\n  SS: 1.2,\r\n  SSS: 1.2,\r\n};\r\n\r\nexport const getExp = (result, chart) => {\r\n  if (!result.isBestGradeOnChart) {\r\n    return 0;\r\n  }\r\n  if (chart.chartType === 'COOP') {\r\n    return (chart.chartLevel * 1000 * (gradeValue[result.grade] || 0.8)) / 8;\r\n  }\r\n  const exp = (chart.chartLevel ** 2.31 * (gradeValue[result.grade] || 0.8)) / 9;\r\n  return exp;\r\n};\r\n\r\nexport const getRankImg = rank =>\r\n  rank && (\r\n    <img\r\n      className={rank.color}\r\n      src={`${process.env.PUBLIC_URL}/ranks/${rank.iconName}`}\r\n      alt={rank.threshold}\r\n    />\r\n  );\r\n\r\nexport { ranks } from './expRanks';\r\n","import _ from 'lodash/fp';\r\n\r\nimport {\r\n  GiLoveSong,\r\n  GiLifeBar,\r\n  GiSmokingFinger,\r\n  GiSnail,\r\n  GiRetroController,\r\n  GiRank1,\r\n  GiRank2,\r\n  GiRank3,\r\n  GiWoodenPegleg,\r\n  GiPodiumSecond,\r\n} from 'react-icons/gi';\r\n\r\nexport const achievements = {\r\n  '500 комбо': {\r\n    icon: GiRank1,\r\n    description: 'Заработать 500+ комбо на любом чарте',\r\n    resultFunction: (result, chart, state) => {\r\n      return {\r\n        progress: state.progress === 100 ? 100 : result.combo >= 500 ? 100 : 0,\r\n      };\r\n    },\r\n  },\r\n  '1000 комбо': {\r\n    icon: GiRank2,\r\n    description: 'Заработать 1000+ комбо на любом чарте',\r\n    resultFunction: (result, chart, state) => {\r\n      return {\r\n        progress: state.progress === 100 ? 100 : result.combo >= 1000 ? 100 : 0,\r\n      };\r\n    },\r\n  },\r\n  '2000 комбо': {\r\n    icon: GiRank3,\r\n    description: 'Заработать 2000+ комбо на любом чарте',\r\n    resultFunction: (result, chart, state) => {\r\n      return {\r\n        progress: state.progress === 100 ? 100 : result.combo >= 2000 ? 100 : 0,\r\n      };\r\n    },\r\n  },\r\n  'Мастер фингеринга': {\r\n    icon: GiSmokingFinger,\r\n    description: 'Сыграть все Fingers треки',\r\n    initialState: {\r\n      progress: 0,\r\n      playedSongs: [],\r\n      songsToPlay: ['Monkey Fingers', 'Kimchi Fingers', 'Monkey Fingers 2', 'Money Fingers'],\r\n    },\r\n    resultFunction: (result, chart, state) => {\r\n      const playedSongs = state.songsToPlay.includes(chart.song)\r\n        ? _.uniq([...state.playedSongs, chart.song])\r\n        : state.playedSongs;\r\n      return {\r\n        playedSongs,\r\n        songsToPlay: state.songsToPlay,\r\n        progress: (100 * playedSongs.length) / state.songsToPlay.length,\r\n      };\r\n    },\r\n  },\r\n  '8-bit': {\r\n    icon: GiRetroController,\r\n    description: 'Сыграть Seize My Day, Tales of Pumpnia и Pumptris (8bit ver.)',\r\n    initialState: {\r\n      progress: 0,\r\n      playedSongs: [],\r\n      songsToPlay: ['Seize My Day', 'Tales of Pumpnia', 'Pumptris (8bit ver.)'],\r\n    },\r\n    resultFunction: (result, chart, state) => {\r\n      const playedSongs = state.songsToPlay.includes(chart.song)\r\n        ? _.uniq([...state.playedSongs, chart.song])\r\n        : state.playedSongs;\r\n      return {\r\n        playedSongs,\r\n        songsToPlay: state.songsToPlay,\r\n        progress: (100 * playedSongs.length) / state.songsToPlay.length,\r\n      };\r\n    },\r\n  },\r\n  'Love is...': {\r\n    icon: GiLoveSong,\r\n    description: 'Сыграть все Love is a Danger Zone треки',\r\n    initialState: {\r\n      progress: 0,\r\n      playedSongs: [],\r\n      songsToPlay: [\r\n        'Love is a Danger Zone',\r\n        'Love is a Danger Zone [SHORT]',\r\n        'Love is a Danger Zone (Cranky Mix)',\r\n        'Love is a Danger Zone 2',\r\n        'Love is a Danger Zone 2 [SHORT]',\r\n        'Love is a Danger Zone 2 [FULL]',\r\n        'Love is a Danger Zone 2 (D&G Ver.)',\r\n        'Love is a Danger Zone (try to B.P.M.)',\r\n      ],\r\n    },\r\n    resultFunction: (result, chart, state) => {\r\n      const playedSongs = state.songsToPlay.includes(chart.song)\r\n        ? _.uniq([...state.playedSongs, chart.song])\r\n        : state.playedSongs;\r\n      return {\r\n        playedSongs,\r\n        songsToPlay: state.songsToPlay,\r\n        progress: (100 * playedSongs.length) / state.songsToPlay.length,\r\n      };\r\n    },\r\n  },\r\n  Улитка: {\r\n    icon: GiSnail,\r\n    description:\r\n      'Мастер замедлений: сыграть старшие чарты Twist of Fate, Karyawisata, Awakening и Moonlight',\r\n    initialState: {\r\n      progress: 0,\r\n      playedSongs: [],\r\n      songsToPlay: [\r\n        { song: 'Twist of Fate (feat. Ruriling)', charts: ['D20', 'S19'] },\r\n        { song: 'Karyawisata', charts: ['S20', 'D16'] },\r\n        { song: 'Awakening', charts: ['S19', 'D20'] },\r\n        { song: 'Moonlight', charts: ['S19', 'D21'] },\r\n      ],\r\n    },\r\n    resultFunction: (result, chart, state) => {\r\n      const playedSongs = state.songsToPlay.some(\r\n        songToPlay => chart.song === songToPlay.song && songToPlay.charts.includes(chart.chartLabel)\r\n      )\r\n        ? _.uniq([...state.playedSongs, chart.song])\r\n        : state.playedSongs;\r\n      return {\r\n        playedSongs,\r\n        songsToPlay: state.songsToPlay,\r\n        progress: (100 * playedSongs.length) / state.songsToPlay.length,\r\n      };\r\n    },\r\n  },\r\n  'Коричневая S': {\r\n    icon: GiPodiumSecond,\r\n    description: 'Получить S, но 5+ бэдов',\r\n    resultFunction: (result, chart, state) => {\r\n      return {\r\n        progress: state.progress === 100 ? 100 : result.miss === 0 && result.bad >= 5 ? 100 : 0,\r\n      };\r\n    },\r\n  },\r\n  'Мы выживали как могли': {\r\n    icon: GiLifeBar,\r\n    description: 'Получить B или ниже, но удержать лайфбар',\r\n    resultFunction: (result, chart, state) => {\r\n      return {\r\n        progress:\r\n          state.progress === 100 ? 100 : ['B+', 'C+', 'D+'].includes(result.grade) ? 100 : 0,\r\n      };\r\n    },\r\n  },\r\n  'Падовый мисс': {\r\n    icon: GiWoodenPegleg,\r\n    description: 'Когда от SSS тебя удерживают только миссы из-за плохого моддинга падов',\r\n    resultFunction: (result, chart, state) => {\r\n      return {\r\n        progress:\r\n          state.progress === 100\r\n            ? 100\r\n            : result.miss > 0 && result.bad === 0 && result.good === 0 && result.great === 0\r\n            ? 100\r\n            : 0,\r\n      };\r\n    },\r\n  },\r\n};\r\n\r\nexport const initialAchievementState = {\r\n  progress: 0,\r\n};\r\n","import React from 'react';\r\nimport _ from 'lodash/fp';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport ru from 'javascript-time-ago/locale/ru';\r\nimport { convenient } from 'javascript-time-ago/gradation';\r\nimport moment from 'moment';\r\n\r\nimport { parseDate } from 'utils/date';\r\nimport { getScoreWithoutBonus } from 'utils/score';\r\nimport { getExp } from 'utils/exp';\r\nimport { achievements, initialAchievementState } from 'utils/achievements';\r\n\r\nTimeAgo.addLocale(ru);\r\nconst timeAgo = new TimeAgo('ru-RU');\r\n\r\nconst timeStyle = {\r\n  flavour: 'long',\r\n  gradation: convenient,\r\n  units: ['day', 'week', 'month'],\r\n};\r\nexport const tooltipFormatter = (result) => {\r\n  if (!result.isExactDate) {\r\n    const resultType =\r\n      result.isMyBest === undefined && result.isMachineBest === undefined\r\n        ? 'с my best или machine best'\r\n        : result.isMyBest\r\n        ? 'с my best'\r\n        : result.isMachineBest\r\n        ? 'с machine best'\r\n        : 'хз откуда';\r\n    return (\r\n      <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\r\n        <div>точная дата взятия неизвестна</div>\r\n        <div>скор был записан {resultType}</div>\r\n        <div>дата записи: {result.dateObject.toLocaleDateString()}</div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return result.dateObject.toLocaleDateString();\r\n  }\r\n};\r\n\r\nexport const getTimeAgo = (date) => {\r\n  const dayDiff = moment().startOf('day').diff(moment(date).startOf('day'), 'days');\r\n  const hour = moment(date).hour();\r\n  if (moment().hour() < 5) {\r\n    return dayDiff <= 1 ? 'сегодня' : timeAgo.format(date, timeStyle);\r\n  }\r\n  return dayDiff === 0\r\n    ? hour < 5\r\n      ? 'вчера ночью'\r\n      : 'сегодня'\r\n    : dayDiff === 1\r\n    ? 'вчера'\r\n    : timeAgo.format(date, timeStyle);\r\n};\r\n\r\nexport const labelToTypeLevel = (label) => {\r\n  const [type, level] = label ? label.match(/(\\D+)|(\\d+)/g) : [];\r\n  return [type, level];\r\n};\r\n\r\nexport const gradeComparator = {\r\n  '?': 0,\r\n  F: 1,\r\n  D: 2,\r\n  'D+': 3,\r\n  C: 4,\r\n  'C+': 5,\r\n  B: 6,\r\n  'B+': 7,\r\n  A: 8,\r\n  'A+': 9,\r\n  S: 10,\r\n  SS: 11,\r\n  SSS: 12,\r\n};\r\n\r\nconst tryFixIncompleteResult = (result, maxTotalSteps) => {\r\n  if (!maxTotalSteps) {\r\n    return;\r\n  }\r\n  const infos = [result.perfect, result.great, result.good, result.bad, result.miss];\r\n  let fixableIndex = -1,\r\n    absentNumbersCount = 0,\r\n    localStepSum = 0;\r\n  for (let i = 0; i < 5; ++i) {\r\n    if (!_.isNumber(infos[i])) {\r\n      fixableIndex = i;\r\n      absentNumbersCount++;\r\n    } else {\r\n      localStepSum += infos[i];\r\n    }\r\n  }\r\n  if (absentNumbersCount === 1) {\r\n    result[['perfect', 'great', 'good', 'bad', 'miss'][fixableIndex]] =\r\n      maxTotalSteps - localStepSum;\r\n  }\r\n};\r\n\r\nconst guessGrade = (result) => {\r\n  if (result.misses === 0 && result.bads === 0 && result.goods === 0) {\r\n    if (result.greats === 0) {\r\n      return 'SSS';\r\n    } else {\r\n      return 'SS';\r\n    }\r\n  }\r\n  return result.grade;\r\n};\r\n\r\nexport const mapResult = (res, players, chart, chartId) => {\r\n  const grade = res.grade !== '?' ? res.grade : guessGrade(res);\r\n\r\n  if (typeof res.recognition_notes === 'undefined') {\r\n    // Short result, minimum info, only for ELO calculation\r\n    // Will be replaced with better result later\r\n    return {\r\n      id: res.id,\r\n      isUnknownPlayer: players[res.player].arcade_name === 'PUMPITUP',\r\n      isIntermediateResult: true,\r\n      sharedChartId: res.shared_chart || chartId,\r\n      playerId: res.player,\r\n      nickname: players[res.player].nickname,\r\n      nicknameArcade: players[res.player].arcade_name,\r\n      date: res.gained,\r\n      dateObject: parseDate(res.gained),\r\n      grade,\r\n      isExactDate: !!res.exact_gain_date,\r\n      score: res.score,\r\n      scoreRaw: getScoreWithoutBonus(res.score, grade),\r\n      isRank: !!res.rank_mode,\r\n    };\r\n  }\r\n  // Full best result\r\n  let _r = {\r\n    isUnknownPlayer: players[res.player].arcade_name === 'PUMPITUP',\r\n    isIntermediateResult: false,\r\n    sharedChartId: res.shared_chart || chartId,\r\n    id: res.id,\r\n    playerId: res.player,\r\n    nickname: players[res.player].nickname,\r\n    nicknameArcade: players[res.player].arcade_name,\r\n    originalChartMix: res.original_mix,\r\n    originalChartLabel: res.original_label,\r\n    originalScore: res.original_score,\r\n    date: res.gained,\r\n    dateObject: parseDate(res.gained),\r\n    grade,\r\n    isExactDate: !!res.exact_gain_date,\r\n    score: res.score,\r\n    scoreRaw: getScoreWithoutBonus(res.score, grade),\r\n    scoreIncrease: res.score_increase,\r\n    calories: res.calories && res.calories / 1000,\r\n    perfect: res.perfects,\r\n    great: res.greats,\r\n    good: res.goods,\r\n    bad: res.bads,\r\n    miss: res.misses,\r\n    combo: res.max_combo,\r\n    mods: res.mods_list,\r\n    isRank: !!res.rank_mode,\r\n    isHJ: (res.mods_list || '').split(' ').includes('HJ'),\r\n    isMachineBest: res.recognition_notes === 'machine_best',\r\n    isMyBest: res.recognition_notes === 'personal_best',\r\n  };\r\n\r\n  tryFixIncompleteResult(_r, chart.maxTotalSteps);\r\n\r\n  const perfects = Math.sqrt(_r.perfect) * 10;\r\n  const acc = perfects\r\n    ? Math.floor(\r\n        ((perfects * 100 + _r.great * 85 + _r.good * 60 + _r.bad * 20 + _r.miss * -25) /\r\n          (perfects + _r.great + _r.good + _r.bad + _r.miss)) *\r\n          100\r\n      ) / 100\r\n    : null;\r\n  const accRaw = _r.perfect\r\n    ? Math.floor(\r\n        ((_r.perfect * 100 + _r.great * 85 + _r.good * 60 + _r.bad * 20 + _r.miss * -25) /\r\n          (_r.perfect + _r.great + _r.good + _r.bad + _r.miss)) *\r\n          100\r\n      ) / 100\r\n    : null;\r\n\r\n  _r.accuracy = acc < 0 ? 0 : accRaw === 100 ? 100 : acc && +acc.toFixed(2);\r\n  _r.accuracyRaw = _.toNumber(_r.accuracy);\r\n  return _r;\r\n};\r\n\r\nexport const initializeProfile = (result, profiles, players) => {\r\n  const id = result.playerId;\r\n  const resultsByLevel = _.fromPairs(Array.from({ length: 28 }).map((x, i) => [i + 1, []]));\r\n\r\n  profiles[id] = {\r\n    name: players[id].nickname,\r\n    nameArcade: players[id].arcade_name,\r\n    resultsByGrade: {},\r\n    resultsByLevel,\r\n    firstResultDate: result.dateObject,\r\n    lastResultDate: result.dateObject,\r\n    count: 0,\r\n    battleCount: 0,\r\n    countAcc: 0,\r\n    grades: { F: 0, D: 0, C: 0, B: 0, A: 0, S: 0, SS: 0, SSS: 0 },\r\n    sumAccuracy: 0,\r\n    rankingHistory: [],\r\n    ratingHistory: [],\r\n    lastPlace: null,\r\n    lastBattleDate: 0,\r\n    region: players[id].region,\r\n  };\r\n  profiles[id].achievements = _.flow(\r\n    _.keys,\r\n    _.map((achName) => [\r\n      achName,\r\n      { ...(achievements[achName].initialState || initialAchievementState) },\r\n    ]),\r\n    _.fromPairs\r\n  )(achievements);\r\n  profiles[id].exp = 0;\r\n};\r\n\r\nexport const getProfileInfoFromResult = (result, chart, profiles) => {\r\n  const profile = profiles[result.playerId];\r\n\r\n  profile.count++;\r\n  if (result.accuracy) {\r\n    profile.countAcc++;\r\n    profile.sumAccuracy += result.accuracy;\r\n  }\r\n  profile.grades[result.grade.replace('+', '')]++;\r\n  if (chart.chartType !== 'COOP' && result.isBestGradeOnChart) {\r\n    profile.resultsByGrade[result.grade] = [\r\n      ...(profile.resultsByGrade[result.grade] || []),\r\n      { result, chart },\r\n    ];\r\n    profile.resultsByLevel[chart.chartLevel] = [\r\n      ...(profile.resultsByLevel[chart.chartLevel] || []),\r\n      { result, chart },\r\n    ];\r\n  }\r\n  if (result.isExactDate && profile.lastResultDate < result.dateObject) {\r\n    profile.lastResultDate = result.dateObject;\r\n  }\r\n  if (result.isExactDate && profile.firstResultDate > result.dateObject) {\r\n    profile.firstResultDate = result.dateObject;\r\n  }\r\n  profile.achievements = _.mapValues.convert({ cap: false })((achState, achName) => {\r\n    return achievements[achName].resultFunction(result, chart, achState, profile);\r\n  }, profile.achievements);\r\n  profile.exp += getExp(result, chart);\r\n};\r\n\r\nexport const getMaxRawScore = (score) => {\r\n  return ((score.scoreRaw / score.accuracy) * 100) / (score.isRank ? 1.2 : 1);\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FaPlay } from 'react-icons/fa';\r\nimport classNames from 'classnames';\r\n\r\n// styles\r\nimport './songs-top.scss';\r\n\r\n// components\r\nimport Loader from 'components/Shared/Loader';\r\n\r\n// constants\r\n\r\n// reducers\r\nimport { fetchMostPlayed } from 'reducers/trackStats/mostPlayed';\r\nimport { fetchMostPlayedMonth } from 'reducers/trackStats/mostPlayedMonth';\r\nimport { fetchLeastPlayed } from 'reducers/trackStats/leastPlayed';\r\n\r\n// utils\r\nimport { getTimeAgo } from 'utils/leaderboards';\r\nimport { parseDate } from 'utils/date';\r\n\r\n// code\r\nfunction TopList({ fetchList, title, renderRightSide }) {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setLoading] = useState(false);\r\n\r\n  const getRightSide =\r\n    renderRightSide ||\r\n    (item => (\r\n      <div className=\"playcount\">\r\n        <FaPlay />\r\n        <span>{item.countplay}</span>\r\n      </div>\r\n    ));\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchList()\r\n      .then(data => {\r\n        data.success && setData(data.data);\r\n        setLoading(false);\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [fetchList]);\r\n\r\n  return (\r\n    <div className=\"top-songs-list\">\r\n      <div className=\"top-songs-header\">\r\n        <span>{title}</span>\r\n      </div>\r\n      {isLoading && <Loader />}\r\n      {!isLoading &&\r\n        data.map((item, index) => {\r\n          return (\r\n            <div key={item.id} className=\"top-songs-item\">\r\n              <div className={classNames('place', `top-${index + 1}`, { best: index < 3 })}>\r\n                <span>{index + 1}.</span>\r\n              </div>\r\n              <div className=\"song-name\">{item.full_name}</div>\r\n              {getRightSide(item)}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst leastPlayedRightSide = item => (\r\n  <div className=\"date\">\r\n    <span>{item.last_play ? getTimeAgo(parseDate(item.last_play)) : 'никогда'}</span>\r\n  </div>\r\n);\r\n\r\nexport default connect(\r\n  null,\r\n  {\r\n    fetchMostPlayed,\r\n    fetchMostPlayedMonth,\r\n    fetchLeastPlayed,\r\n  }\r\n)(function SongsTop({ fetchMostPlayed, fetchMostPlayedMonth, fetchLeastPlayed }) {\r\n  return (\r\n    <div className=\"songs-top-page\">\r\n      <TopList fetchList={fetchMostPlayed} title=\"топ популярных треков\" />\r\n      <TopList fetchList={fetchMostPlayedMonth} title=\"топ популярных треков за месяц\" />\r\n      <TopList\r\n        fetchList={fetchLeastPlayed}\r\n        title=\"треки, которые долго не играли\"\r\n        renderRightSide={leastPlayedRightSide}\r\n      />\r\n      <div className=\"top-songs-list -placeholder\" />\r\n    </div>\r\n  );\r\n});\r\n","import React from 'react';\r\nimport toBe from 'prop-types';\r\nimport classNames from 'classnames';\r\n\r\nimport './toggle-button.scss';\r\n\r\nexport default class ToggleButton extends React.PureComponent {\r\n  static propTypes = {\r\n    text: toBe.string,\r\n    onToggle: toBe.func,\r\n    active: toBe.bool,\r\n  };\r\n\r\n  render() {\r\n    const { active, onToggle, text } = this.props;\r\n    return (\r\n      <div\r\n        className={classNames('toggle-button', { active: active })}\r\n        onClick={() => onToggle(!active)}\r\n      >\r\n        {text}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/* eslint-disable react/no-deprecated */\r\n// imports from vendor deps\r\nimport React from 'react';\r\nimport toBe from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport _ from 'lodash/fp';\r\n\r\n// imports from styles\r\nexport default class Input extends React.Component {\r\n  static propTypes = {\r\n    value: toBe.any,\r\n    defaultValue: toBe.any,\r\n    onChange: toBe.func,\r\n    onBlur: toBe.func,\r\n    type: toBe.string,\r\n    className: toBe.string,\r\n    trimOnBlur: toBe.bool,\r\n  };\r\n\r\n  static defaultProps = {\r\n    value: null,\r\n    type: 'text',\r\n    onChange: _.noop,\r\n    onBlur: _.noop,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: (!_.isNil(props.value) ? props.value : props.defaultValue) || '',\r\n    };\r\n    _.bindAll(['handleChange', 'handleBlur', 'handleKeyPress'], this);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.value !== this.props.value) {\r\n      this.setState({ value: this.props.value });\r\n    }\r\n  }\r\n\r\n  handleChange(e) {\r\n    const newValue = e.target.value;\r\n    this.setState({ value: newValue }, () => this.props.onChange(newValue));\r\n  }\r\n\r\n  handleBlur(e) {\r\n    const { type } = this.props;\r\n    const { value } = this.state;\r\n    if (type === 'number') {\r\n      const numericValue = Number(value);\r\n      if (numericValue >= Number(e.target.min) && numericValue <= Number(e.target.max)) {\r\n        this.props.onBlur(numericValue, e);\r\n      } else {\r\n        this.setState({ value: this.props.value });\r\n        this.props.onBlur(this.props.value, e);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleKeyPress(e) {\r\n    if (e.key === 'Enter') {\r\n      this.handleBlur(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { className } = this.props;\r\n\r\n    // HACK: This component uses onInput instead of onChange\r\n    // because IE11 fails to call onChange events when you paste/cut using context menu (RMB)\r\n    // We're using onInput because it works fine, and because for text input\r\n    // there's no difference between how onChange and onInput work\r\n    return (\r\n      <input\r\n        {..._.omit(['defaultValue', 'onChange'], this.props)}\r\n        className={classNames(className, 'text-input')}\r\n        value={this.state.value}\r\n        onBlur={this.handleBlur}\r\n        onKeyPress={this.handleKeyPress}\r\n        onInput={this.handleChange}\r\n        onChange={_.noop} // Handled by onInput\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport _ from 'lodash/fp';\r\n\r\nimport './toggle.scss';\r\n\r\n// imports from styles\r\nexport default class Toggle extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.id = _.uniqueId();\r\n  }\r\n\r\n  onChange = (e) => {\r\n    this.props.onChange(e.target.checked);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"toggle-checkbox\">\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"toggle-checkbox-cb\"\r\n          id={this.id}\r\n          onChange={this.onChange}\r\n          checked={this.props.checked}\r\n        />\r\n        <label htmlFor={this.id} className=\"toggle\">\r\n          <span></span>\r\n        </label>\r\n        {this.props.children && (\r\n          <label htmlFor={this.id} className=\"text-label\">\r\n            {this.props.children}\r\n          </label>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { PureComponent } from 'react';\r\nimport toBe from 'prop-types';\r\nimport { FaChevronRight } from 'react-icons/fa';\r\nimport classNames from 'classnames';\r\n\r\nimport './styles.scss';\r\n\r\nexport default class CollapsibleBar extends PureComponent {\r\n  static propTypes = {\r\n    className: toBe.string,\r\n    children: toBe.any,\r\n    title: toBe.any,\r\n    defaultOpen: toBe.bool,\r\n  };\r\n\r\n  constructor(props) {\r\n    super();\r\n    this.state = { open: props.defaultOpen || false };\r\n  }\r\n\r\n  render() {\r\n    const { children, title, className } = this.props;\r\n    const { open } = this.state;\r\n\r\n    return (\r\n      <div className={classNames('collapsible-bar', className, { open })}>\r\n        <div className=\"header\" onClick={() => this.setState(state => ({ open: !state.open }))}>\r\n          <div className=\"collapse-button\">\r\n            <FaChevronRight />\r\n          </div>\r\n          <div className=\"title\">{title}</div>\r\n        </div>\r\n        {children && <div className=\"collapsible-children\">{children}</div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport toBe from 'prop-types';\r\nimport { Popper } from 'react-popper';\r\nimport classNames from 'classnames';\r\nimport listensToClickOutside from 'react-onclickoutside';\r\n\r\nimport './overlay.scss';\r\n\r\nconst POPPER_MODIFIERS = {\r\n  preventOverflow: {\r\n    enabled: true,\r\n    padding: 10,\r\n    boundariesElement: 'viewport',\r\n  },\r\n};\r\n\r\nconst PLACEMENT_ARROW_MAPPING = {\r\n  right: 'left',\r\n  left: 'right',\r\n  top: 'bottom',\r\n  bottom: 'top',\r\n};\r\n\r\nconst getArrowPlacement = placement => {\r\n  return placement && PLACEMENT_ARROW_MAPPING[placement.split('-')[0]];\r\n};\r\n\r\nclass Overlay extends React.PureComponent {\r\n  static propTypes = {\r\n    placement: toBe.string,\r\n    overlayItem: toBe.any,\r\n    hideWhenOutOfBounds: toBe.bool,\r\n  };\r\n\r\n  static defaultTypes = {\r\n    placement: 'bottom',\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isVisible: false,\r\n    };\r\n    this.containerItemRef = React.createRef();\r\n    this.renderPopper = this.renderPopper.bind(this);\r\n    this.toggleOverlayVisibility = this.toggleOverlayVisibility.bind(this);\r\n  }\r\n\r\n  hideOverlay() {\r\n    this.setState({\r\n      isVisible: false,\r\n    });\r\n  }\r\n\r\n  toggleOverlayVisibility() {\r\n    this.setState({\r\n      isVisible: !this.state.isVisible,\r\n    });\r\n  }\r\n\r\n  handleClickOutside(event) {\r\n    const preventHiding = event && event.target.closest('.inner-popper-overlay'); // prevent overlays from hiding when a modal is opened within overlay\r\n\r\n    if (!preventHiding) {\r\n      this.hideOverlay();\r\n    }\r\n  }\r\n\r\n  renderPopper({ ref, style, placement, arrowProps, scheduleUpdate, outOfBoundaries }) {\r\n    const { children, hideWhenOutOfBounds } = this.props;\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={style}\r\n        data-placement={placement}\r\n        className={classNames(\r\n          'inner-popper-overlay',\r\n          `arrow-${getArrowPlacement(placement)}`,\r\n          this.props.overlayClassName,\r\n          { 'out-of-bounds': outOfBoundaries && hideWhenOutOfBounds }\r\n        )}\r\n      >\r\n        <div className=\"arrow-hider\">\r\n          <div className=\"arrow\" ref={arrowProps.ref} style={arrowProps.style} />\r\n        </div>\r\n        <div\r\n          className=\"inner-popper-content\"\r\n          // ref={ref => this.setupPopperContentRef(scheduleUpdate, ref)}\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { placement, overlayItem } = this.props;\r\n    const { isVisible } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className=\"overlay-item\"\r\n          ref={this.containerItemRef}\r\n          onClick={this.toggleOverlayVisibility}\r\n        >\r\n          {overlayItem}\r\n        </div>\r\n        {isVisible &&\r\n          ReactDOM.createPortal(\r\n            <Popper\r\n              container={document.body}\r\n              modifiers={POPPER_MODIFIERS}\r\n              placement={placement}\r\n              referenceElement={this.containerItemRef.current}\r\n            >\r\n              {this.renderPopper}\r\n            </Popper>,\r\n            document.body\r\n          )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default listensToClickOutside(Overlay);\r\n","import React from 'react';\r\nimport { Range as ReactRange, getTrackBackground } from 'react-range';\r\n\r\nexport default function Range({ range, min, max, onChange }) {\r\n  return (\r\n    <ReactRange\r\n      values={range}\r\n      step={1}\r\n      min={min}\r\n      max={max}\r\n      onChange={onChange}\r\n      renderTrack={({ props, children }) => (\r\n        <div\r\n          onMouseDown={props.onMouseDown}\r\n          onTouchStart={props.onTouchStart}\r\n          style={{\r\n            ...props.style,\r\n            position: 'relative',\r\n            height: '10px',\r\n            display: 'flex',\r\n            width: '100%',\r\n          }}\r\n        >\r\n          <div\r\n            ref={props.ref}\r\n            style={{\r\n              height: '6px',\r\n              width: '100%',\r\n              borderRadius: '3px',\r\n              background: getTrackBackground({\r\n                values: range,\r\n                colors: ['#ccc', '#88d3ff', '#ccc'],\r\n                min,\r\n                max,\r\n              }),\r\n              alignSelf: 'center',\r\n            }}\r\n          >\r\n            {children}\r\n          </div>\r\n        </div>\r\n      )}\r\n      renderThumb={({ props, isDragged }) => (\r\n        <div\r\n          {...props}\r\n          style={{\r\n            ...props.style,\r\n            height: '12px',\r\n            width: '12px',\r\n            borderRadius: '6px',\r\n            backgroundColor: '#FFF',\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            boxShadow: '0px 2px 3px #AAA',\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              height: '6px',\r\n              width: '6px',\r\n              borderRadius: '3px',\r\n              backgroundColor: isDragged ? '#88d3ff' : '#CCC',\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport _ from 'lodash/fp';\r\nimport { FaCaretLeft, FaCaretRight } from 'react-icons/fa';\r\n\r\nimport Overlay from 'components/Shared/Overlay/Overlay';\r\nimport ToggleButton from 'components/Shared/ToggleButton/ToggleButton';\r\nimport Input from 'components/Shared/Input/Input';\r\nimport Range from 'components/Shared/Range';\r\n\r\nimport { CHART_MIN_MAX, DURATION_DEFAULT, DURATION } from 'constants/leaderboard';\r\nimport { useLanguage } from 'utils/context/translation';\r\n\r\nexport default function ChartFilter({ filterValue, onChange: onChangeEx }) {\r\n  const range = _.getOr(CHART_MIN_MAX, 'range', filterValue);\r\n  const type = _.getOr(null, 'type', filterValue);\r\n  const duration = _.getOr(DURATION_DEFAULT, 'duration', filterValue);\r\n\r\n  const lang = useLanguage();\r\n\r\n  let buttonText = lang.FILTER_CHARTS;\r\n  if (filterValue) {\r\n    const t = type || '';\r\n    buttonText = range[0] === range[1] ? `${t}${range[0]}` : `${t}${range[0]} - ${t}${range[1]}`;\r\n    buttonText = lang.CHARTS + ': ' + buttonText;\r\n    if (!_.isEqual(duration, DURATION_DEFAULT)) {\r\n      buttonText += ' ***';\r\n      // buttonText += ` (${_.values(DURATION)\r\n      //   .filter(dur => duration.includes(dur))\r\n      //   .map(s => s.slice(0, 2))\r\n      //   .join('-')})`;\r\n    }\r\n  }\r\n\r\n  const onChange = (value) => {\r\n    onChangeEx({\r\n      range,\r\n      type,\r\n      ...value,\r\n      duration: _.isEmpty(value.duration) ? duration : value.duration,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Overlay\r\n        overlayClassName=\"chart-range-overlay-outer\"\r\n        overlayItem={\r\n          <button className=\"filter-charts-button btn btn-sm btn-dark\">{buttonText}</button>\r\n        }\r\n      >\r\n        <div className=\"chart-range-overlay\">\r\n          <div className=\"buttons\">\r\n            <ToggleButton\r\n              text=\"Single\"\r\n              active={type === 'S'}\r\n              onToggle={(active) => {\r\n                onChange({\r\n                  type: active ? 'S' : null,\r\n                });\r\n              }}\r\n            />\r\n            <ToggleButton\r\n              text=\"Double\"\r\n              active={type === 'D'}\r\n              onToggle={(active) => {\r\n                onChange({\r\n                  type: active ? 'D' : null,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n          <Range\r\n            range={range}\r\n            min={CHART_MIN_MAX[0]}\r\n            max={CHART_MIN_MAX[1]}\r\n            onChange={(r) => onChange({ range: r })}\r\n          />\r\n          <div className=\"inputs\">\r\n            <button\r\n              className=\"btn btn-sm btn-dark\"\r\n              onClick={() =>\r\n                onChange({\r\n                  range: [Math.max(range[0] - 1, CHART_MIN_MAX[0]), range[1]],\r\n                })\r\n              }\r\n            >\r\n              <FaCaretLeft />\r\n            </button>\r\n            <Input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              min={CHART_MIN_MAX[0]}\r\n              max={Math.min(CHART_MIN_MAX[1], range[1])}\r\n              value={range[0]}\r\n              onBlur={(value) => {\r\n                onChange({ range: [value, range[1]] });\r\n              }}\r\n            />\r\n            <button\r\n              className=\"btn btn-sm btn-dark\"\r\n              onClick={() => {\r\n                const newMin = Math.min(range[0] + 1, CHART_MIN_MAX[1]);\r\n                onChange({\r\n                  range: [newMin, range[1] < newMin ? newMin : range[1]],\r\n                });\r\n              }}\r\n            >\r\n              <FaCaretRight />\r\n            </button>\r\n            <div className=\"_flex-fill\" />\r\n            <button\r\n              className=\"btn btn-sm btn-dark\"\r\n              onClick={() => {\r\n                const newMax = Math.max(range[1] - 1, CHART_MIN_MAX[0]);\r\n                onChange({\r\n                  range: [range[0] > newMax ? newMax : range[0], newMax],\r\n                });\r\n              }}\r\n            >\r\n              <FaCaretLeft />\r\n            </button>\r\n            <Input\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              min={Math.max(CHART_MIN_MAX[0], range[0])}\r\n              max={CHART_MIN_MAX[1]}\r\n              value={range[1]}\r\n              onBlur={(value) => onChange({ range: [range[0], value] })}\r\n            />\r\n            <button\r\n              className=\"btn btn-sm btn-dark\"\r\n              onClick={() =>\r\n                onChange({\r\n                  range: [range[0], Math.min(range[1] + 1, CHART_MIN_MAX[1])],\r\n                })\r\n              }\r\n            >\r\n              <FaCaretRight />\r\n            </button>\r\n          </div>\r\n          <div className=\"buttons-duration\">\r\n            <ToggleButton\r\n              text=\"Standard\"\r\n              active={duration.includes(DURATION.STD)}\r\n              onToggle={(active) => {\r\n                onChange({\r\n                  duration: active\r\n                    ? [...duration, DURATION.STD]\r\n                    : _.without([DURATION.STD], duration),\r\n                });\r\n              }}\r\n            />\r\n            <ToggleButton\r\n              text=\"Short\"\r\n              active={duration.includes(DURATION.SHORT)}\r\n              onToggle={(active) => {\r\n                onChange({\r\n                  duration: active\r\n                    ? [...duration, DURATION.SHORT]\r\n                    : _.without([DURATION.SHORT], duration),\r\n                });\r\n              }}\r\n            />\r\n            <ToggleButton\r\n              text=\"Remix\"\r\n              active={duration.includes(DURATION.REMIX)}\r\n              onToggle={(active) => {\r\n                onChange({\r\n                  duration: active\r\n                    ? [...duration, DURATION.REMIX]\r\n                    : _.without([DURATION.REMIX], duration),\r\n                });\r\n              }}\r\n            />\r\n            <ToggleButton\r\n              text=\"Full\"\r\n              active={duration.includes(DURATION.FULL)}\r\n              onToggle={(active) => {\r\n                onChange({\r\n                  duration: active\r\n                    ? [...duration, DURATION.FULL]\r\n                    : _.without([DURATION.FULL], duration),\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Overlay>\r\n    </div>\r\n  );\r\n}\r\n","import _ from 'lodash/fp';\r\nimport regression from 'regression';\r\n\r\nimport { ranks as expRanks } from 'utils/expRanks';\r\n\r\nconst processBattles = ({ battles, profiles, debug, resultInfo: dictScoreInfo }) => {\r\n  let logText = '';\r\n  const dictChartElo = {};\r\n  const getDictChartEloId = (score, enemyScore) =>\r\n    `${score.playerId}vs${enemyScore.playerId}-${score.sharedChartId}-${score.isRank}`;\r\n  const dictRatingDiff = {};\r\n  const getDictRatingDiffId = (score) => `${score.playerId}-${score.sharedChartId}-${score.isRank}`;\r\n  // const dictScoreInfo = {};\r\n  battles.forEach(([score, enemyScore, song]) => {\r\n    // For each battle\r\n    const p1 = profiles[score.playerId];\r\n    const p2 = profiles[enemyScore.playerId];\r\n\r\n    const scoreMultiplier = score.isRank ? 1.2 : 1;\r\n    let maxScore = null;\r\n    if (song.maxScore) {\r\n      maxScore = song.maxScore * scoreMultiplier;\r\n      if (\r\n        Math.max(maxScore, score.score, enemyScore.score) !== maxScore &&\r\n        !score.isRank &&\r\n        (!score.isExactDate || !enemyScore.isExactDate)\r\n      ) {\r\n        maxScore *= 1.2;\r\n        // Rank from machine best wasn't recognized most likely.\r\n        // Increasing max score by 20% is fine\r\n      }\r\n      if (Math.max(maxScore, score.score, enemyScore.score) !== maxScore) {\r\n        // If calculated max score isn't max score anyway, use current scores as max + cherry on top\r\n        maxScore = Math.max(maxScore, score.score, enemyScore.score) + 10000;\r\n      }\r\n    }\r\n\r\n    // Data to be appended to every score outside of this thread\r\n    if (!dictScoreInfo[score.id]) dictScoreInfo[score.id] = {};\r\n    if (!dictScoreInfo[enemyScore.id]) dictScoreInfo[enemyScore.id] = {};\r\n    const scoreInfo = dictScoreInfo[score.id];\r\n    const enemyScoreInfo = dictScoreInfo[enemyScore.id];\r\n\r\n    // Rating at the start of battle for this score\r\n    if (!scoreInfo.startingRating) scoreInfo.startingRating = p1.rating;\r\n    if (!enemyScoreInfo.startingRating) enemyScoreInfo.startingRating = p2.rating;\r\n\r\n    // Counting the number of battles\r\n    p1.battleCount++;\r\n    p2.battleCount++;\r\n\r\n    // This is one match between two players\r\n    //// Elo formula\r\n    // const r1 = score.startingRating;\r\n    // const r2 = enemyScore.startingRating;\r\n    const r1 = p1.rating;\r\n    const r2 = p2.rating;\r\n    const R1 = 10 ** (r1 / 400);\r\n    const R2 = 10 ** (r2 / 400);\r\n    const E1 = R1 / (R1 + R2);\r\n    const E2 = R2 / (R1 + R2);\r\n    let A = score.score;\r\n    let B = enemyScore.score;\r\n    let S1, S2;\r\n    if (A === B) {\r\n      S1 = S2 = 0.5;\r\n    } else if (maxScore && A !== 0 && B !== 0) {\r\n      A = maxScore / A - 1;\r\n      B = maxScore / B - 1;\r\n      S1 = (B / (A + B) - 0.5) * 5 + 0.5;\r\n      S2 = (A / (A + B) - 0.5) * 5 + 0.5;\r\n    } else {\r\n      S1 = A > B ? 1 : B < A ? 0 : 0.5;\r\n      S2 = 1 - S1;\r\n    }\r\n    S1 = Math.max(0, Math.min(1, S1)); // Set strict boundaries to [0, 1]\r\n    S2 = Math.max(0, Math.min(1, S2));\r\n\r\n    const kRating1 = Math.max(0, Math.min(1, (r1 - 700) / 800));\r\n    const kRating2 = Math.max(0, Math.min(1, (r2 - 700) / 800));\r\n    const maxK1 = 20 + 20 * kRating1;\r\n    const maxK2 = 20 + 20 * kRating2;\r\n    const chartLevel = Number(song.interpolatedDifficulty || song.chartLevel);\r\n    const kLevel1 = Math.max(\r\n      1,\r\n      Math.min(maxK1, (chartLevel / 25) ** ((kRating1 - 0.5) * 5 + 2.5) * maxK1)\r\n    );\r\n    const kLevel2 = Math.max(\r\n      1,\r\n      Math.min(maxK2, (chartLevel / 25) ** ((kRating2 - 0.5) * 5 + 2.5) * maxK2)\r\n    );\r\n    const kLevel = Math.min(kLevel1, kLevel2);\r\n\r\n    // When YOU vs ENEMY both have SS/SSS, and both scores are very close to SSS, this battle will NOT affect ELO too much\r\n    let kMinimizer = 1;\r\n    const kDropCutoff = 0.98; // Score is 98% of max score or higher -- K will be lower\r\n    if (\r\n      song.maxScore &&\r\n      (score.grade.startsWith('SS') || (score.miss === 0 && score.bad === 0)) &&\r\n      (enemyScore.grade.startsWith('SS') || (enemyScore.miss === 0 && enemyScore.bad === 0)) &&\r\n      score.score / maxScore > kDropCutoff &&\r\n      enemyScore.score / maxScore > kDropCutoff\r\n    ) {\r\n      kMinimizer =\r\n        Math.max(\r\n          Math.min(\r\n            1,\r\n            Math.max(\r\n              100 - (100 * score.score) / maxScore,\r\n              100 - (100 * enemyScore.score) / maxScore\r\n            ) /\r\n              (100 - kDropCutoff * 100)\r\n          ),\r\n          0\r\n        ) ** 2;\r\n    }\r\n\r\n    const K1 = kLevel * kMinimizer;\r\n    const K2 = kLevel * kMinimizer;\r\n    let dr1 = K1 * (S1 - E1);\r\n    let dr2 = K2 * (S2 - E2);\r\n    // Do not decrease rating if you have SSS - RIP zero-sum algorithm\r\n    dr1 = dr1 < 0 && score.grade === 'SSS' ? 0 : dr1;\r\n    dr2 = dr2 < 0 && enemyScore.grade === 'SSS' ? 0 : dr2;\r\n    // Recording this value for display\r\n    const baseEloId1 = getDictChartEloId(score, enemyScore);\r\n    const baseEloId2 = getDictChartEloId(enemyScore, score);\r\n    const baseEloP1 = dictChartElo[baseEloId1] || 0;\r\n    const baseEloP2 = dictChartElo[baseEloId2] || 0;\r\n    dictChartElo[baseEloId1] = dr1;\r\n    dictChartElo[baseEloId2] = dr2;\r\n\r\n    // Change rating as a result of this battle\r\n    p1.rating = p1.rating + dr1 - baseEloP1;\r\n    p2.rating = p2.rating + dr2 - baseEloP2;\r\n\r\n    const ratingDiffId1 = getDictRatingDiffId(score);\r\n    const ratingDiffId2 = getDictRatingDiffId(enemyScore);\r\n    dictRatingDiff[ratingDiffId1] = (dictRatingDiff[ratingDiffId1] || 0) + dr1 - baseEloP1;\r\n    dictRatingDiff[ratingDiffId2] = (dictRatingDiff[ratingDiffId2] || 0) + dr2 - baseEloP2;\r\n\r\n    // Q\r\n    scoreInfo.ratingDiff = dictRatingDiff[ratingDiffId1];\r\n    scoreInfo.ratingDiffLast = dr1 - baseEloP1;\r\n\r\n    enemyScoreInfo.ratingDiff = dictRatingDiff[ratingDiffId2];\r\n    enemyScoreInfo.ratingDiffLast = dr2 - baseEloP2;\r\n\r\n    if (debug) {\r\n      // if (score.sharedChartId === 5292) {\r\n      // if (song.song === 'Club Night') {\r\n      // if (score.nickname === 'Liza' || enemyScore.nickname === 'Liza') {\r\n      // if (!song.maxScore) {\r\n      logText += `${song.chartLabel} - ${song.song} (${song.sharedChartId}) - ${\r\n        profiles[score.playerId].name\r\n      } / ${profiles[enemyScore.playerId].name}\r\n- ${score.score} / ${enemyScore.score} (${Math.floor(maxScore)} (${Math.floor(\r\n        song.maxScore * scoreMultiplier\r\n      )})) - R ${S1.toFixed(2)}/${S2.toFixed(2)} E ${E1.toFixed(2)} / ${E2.toFixed(2)}\r\n- Rating ${r1.toFixed(2)} / ${r2.toFixed(2)} - ${dr1.toFixed(2)} / ${dr2.toFixed(\r\n        2\r\n      )} - K ${K1.toFixed(2)} ${K2.toFixed(2)}${\r\n        kMinimizer === 1 ? '' : ` (coef ${kMinimizer.toFixed(2)})`\r\n      }\r\n- Base elo: ${baseEloP1.toFixed(2)} / ${baseEloP2.toFixed(2)}\r\n- Elo change: ${(dr1 - baseEloP1).toFixed(2)} / ${(dr2 - baseEloP2).toFixed(2)}\r\n- New base elo: ${dictChartElo[baseEloId1].toFixed(2)} / ${dictChartElo[baseEloId2].toFixed(2)}\r\n- RD: ${dictRatingDiff[ratingDiffId1].toFixed(2)} / ${dictRatingDiff[ratingDiffId2].toFixed(2)}\\n`;\r\n    }\r\n    // Rating floor\r\n    p1.rating = Math.max(100, p1.rating);\r\n    p2.rating = Math.max(100, p2.rating);\r\n\r\n    const playersSorted = _.flow(\r\n      _.keys,\r\n      _.map((id) => ({ id, rating: profiles[id].rating })),\r\n      _.orderBy(['rating'], ['desc'])\r\n    )(profiles);\r\n    const battleDate =\r\n      score.dateObject > enemyScore.dateObject ? score.dateObject : enemyScore.dateObject;\r\n    playersSorted.forEach((player, index) => {\r\n      const lastPlace = profiles[player.id].lastPlace;\r\n      if (lastPlace !== index + 1) {\r\n        profiles[player.id].rankingHistory.push({\r\n          place: index + 1,\r\n          date: battleDate.getTime(),\r\n        });\r\n        profiles[player.id].lastPlace = index + 1;\r\n      }\r\n    });\r\n\r\n    const p1LastRating = _.last(p1.ratingHistory);\r\n    const p2LastRating = _.last(p2.ratingHistory);\r\n    if (p1LastRating !== p1.rating) {\r\n      p1.ratingHistory.push({\r\n        rating: p1.rating,\r\n        date: battleDate.getTime(),\r\n      });\r\n    }\r\n    if (p2LastRating !== p2.rating) {\r\n      p2.ratingHistory.push({\r\n        rating: p2.rating,\r\n        date: battleDate.getTime(),\r\n      });\r\n    }\r\n  });\r\n\r\n  _.flow(\r\n    _.keys,\r\n    _.forEach((key) => {\r\n      profiles[key].id = _.toInteger(key);\r\n      profiles[key].accuracy =\r\n        profiles[key].countAcc > 0\r\n          ? Math.round((profiles[key].sumAccuracy / profiles[key].countAcc) * 100) / 100\r\n          : null;\r\n      profiles[key].ratingRaw = profiles[key].rating;\r\n      profiles[key].rating = Math.round(profiles[key].rating);\r\n      profiles[key].rankingHistory = [\r\n        ...profiles[key].rankingHistory,\r\n        { place: _.get('place', _.last(profiles[key].rankingHistory)), date: Date.now() },\r\n      ];\r\n    })\r\n  )(profiles);\r\n  return { logText };\r\n};\r\n\r\nconst postProcessProfiles = (profiles, tracklist) => {\r\n  const getBonusForLevel = (level) => (30 * (1 + 2 ** (level / 4))) / 11;\r\n  const getMinimumNumber = (totalCharts) =>\r\n    Math.round(\r\n      Math.min(totalCharts, 1 + totalCharts / 20 + Math.sqrt(Math.max(totalCharts - 1, 0)) * 0.7)\r\n    );\r\n\r\n  const newProfiles = _.mapValues((profile) => {\r\n    const neededGrades = ['A', 'A+', 'S', 'SS', 'SSS'];\r\n    profile.expRank = _.findLast((rank) => rank.threshold <= profile.exp, expRanks);\r\n    profile.expRankNext = _.find((rank) => rank.threshold > profile.exp, expRanks);\r\n    profile.progress = {\r\n      double: {\r\n        SS: {},\r\n        S: {},\r\n        'A+': {},\r\n        A: {},\r\n      },\r\n      single: {\r\n        SS: {},\r\n        S: {},\r\n        'A+': {},\r\n        A: {},\r\n      },\r\n    };\r\n    const gradeIncrementMap = {\r\n      SSS: ['SS', 'S', 'A+', 'A'],\r\n      SS: ['SS', 'S', 'A+', 'A'],\r\n      S: ['S', 'A+', 'A'],\r\n      'A+': ['A+', 'A'],\r\n      A: ['A'],\r\n    };\r\n    const incrementLevel = (l, g, chartType) => {\r\n      const prog =\r\n        chartType === 'S' || chartType === 'SP'\r\n          ? profile.progress.single\r\n          : chartType === 'D' || chartType === 'DP'\r\n          ? profile.progress.double\r\n          : null;\r\n      if (prog) {\r\n        prog[g][l] = prog[g][l] ? prog[g][l] + 1 : 1;\r\n      }\r\n    };\r\n\r\n    profile.accuracyPointsRaw = [];\r\n    _.keys(profile.resultsByLevel).forEach((level) => {\r\n      profile.resultsByLevel[level].forEach((res) => {\r\n        if (!res.result.isRank && res.result.accuracyRaw) {\r\n          profile.accuracyPointsRaw.push([\r\n            _.toNumber(level),\r\n            res.result.accuracyRaw,\r\n            res.result.sharedChartId,\r\n          ]);\r\n        }\r\n\r\n        const thisGrade = res.result.grade;\r\n        const thisPlayerId = res.result.playerId;\r\n        const otherResults = res.chart.results.filter((r) => r.playerId === thisPlayerId);\r\n        if (otherResults.length > 1) {\r\n          const sortedResults = otherResults.sort(\r\n            (a, b) => neededGrades.indexOf(b.grade) - neededGrades.indexOf(a.grade)\r\n          );\r\n          if (sortedResults[0].grade !== thisGrade) {\r\n            return; // Don't do anything when we have a different result with better grade\r\n          }\r\n        }\r\n        const gradeIncArray = gradeIncrementMap[thisGrade];\r\n        if (gradeIncArray) {\r\n          gradeIncArray.forEach((gradeInc) => {\r\n            incrementLevel(level, gradeInc, res.chart.chartType);\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    ['single', 'double'].forEach((chartType) => {\r\n      profile.progress[`${chartType}-bonus`] = 0;\r\n      _.keys(profile.progress[chartType]).forEach((grade) => {\r\n        profile.progress[chartType][`${grade}-bonus`] = 0;\r\n        _.keys(profile.progress[chartType][grade]).forEach((level) => {\r\n          const number = profile.progress[chartType][grade][level];\r\n          const totalCharts = tracklist.data[`${chartType}sLevels`][level];\r\n          const minimumNumber = getMinimumNumber(totalCharts);\r\n          const bonusCoefficientNumber = Math.min(1, number / minimumNumber);\r\n          const rawBonus = getBonusForLevel(level);\r\n          const bonus = rawBonus * bonusCoefficientNumber;\r\n          profile.progress[chartType][grade][`${level}-bonus`] = bonus;\r\n          profile.progress[chartType][grade][`${level}-bonus-coef`] = bonusCoefficientNumber;\r\n          profile.progress[chartType][grade][`${level}-min-number`] = minimumNumber;\r\n          profile.progress[chartType][grade][`${level}-achieved-number`] = number;\r\n          if (bonus >= profile.progress[chartType][`${grade}-bonus`]) {\r\n            profile.progress[chartType][`${grade}-bonus`] = bonus;\r\n            profile.progress[chartType][`${grade}-bonus-level`] = level;\r\n            profile.progress[chartType][`${grade}-bonus-level-coef`] = bonusCoefficientNumber;\r\n            profile.progress[chartType][`${grade}-bonus-level-min-number`] = minimumNumber;\r\n            profile.progress[chartType][`${grade}-bonus-level-achieved-number`] = number;\r\n          }\r\n        });\r\n        profile.progress[`${chartType}-bonus`] += profile.progress[chartType][`${grade}-bonus`];\r\n      });\r\n    });\r\n    profile.progress.bonus = profile.progress['double-bonus'] + profile.progress['single-bonus'];\r\n    profile.achievementBonus = profile.progress.bonus;\r\n    profile.accuracy =\r\n      profile.countAcc > 0\r\n        ? Math.round((profile.sumAccuracy / profile.countAcc) * 100) / 100\r\n        : null;\r\n    return profile;\r\n  }, profiles);\r\n  return newProfiles;\r\n};\r\n\r\nconst processPP = ({ profiles, sharedCharts }) => {\r\n  const resultInfo = {};\r\n  // const now = new Date();\r\n  for (const chartId in sharedCharts) {\r\n    const chart = sharedCharts[chartId];\r\n    const chartResults = chart.results;\r\n    const chartLevel = Number(chart.interpolatedDifficulty || chart.chartLevel);\r\n    const maxPP = chartLevel ** 2.2 / 7.6; // 7;\r\n    if (chart.maxScore) {\r\n      const maxScore = chart.maxScore;\r\n      for (const result of chartResults) {\r\n        if (!result.isRank && maxScore) {\r\n          const K1 = Math.max(0, Math.min(1, result.scoreRaw / maxScore - 0.3) / 0.7);\r\n          // Optional: decrease PP values for older scores. Testing showing this doesn't change anything really\r\n          // const millisecOld = now - result.dateObject;\r\n          // const maxDays = 365;\r\n          // const maxTimeDecrease = 0;\r\n          // const K2 =\r\n          //   1 -\r\n          //   maxTimeDecrease * Math.min(1, Math.max(0, millisecOld / 1000 / 60 / 60 / 24 / maxDays));\r\n          // const K = K1 * K2;\r\n\r\n          const K = K1;\r\n\r\n          // Final PP value\r\n          const pp = K * maxPP;\r\n          // Record result data\r\n          resultInfo[result.id] = {\r\n            pp: {\r\n              pp,\r\n              k: K,\r\n              maxScore,\r\n              maxPP,\r\n              ppPotential: maxPP - pp,\r\n              ppRatio: pp / maxPP,\r\n              ppFixed: Number(pp.toFixed(1)),\r\n            },\r\n          };\r\n          const profile = profiles[result.playerId];\r\n          if (profile) {\r\n            if (!profile.pp) {\r\n              profile.pp = { scores: [], pp: 0 };\r\n            }\r\n            profile.pp.scores.push({\r\n              pp_: Number(pp.toFixed(1)),\r\n              s: chart.song,\r\n              l: chart.chartLabel,\r\n              pp,\r\n              result,\r\n              chart,\r\n              K,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Calculate total pp\r\n  for (const playerId in profiles) {\r\n    const profile = profiles[playerId];\r\n    if (profile.pp) {\r\n      profile.pp.scores.sort((a, b) => b.pp - a.pp);\r\n      profile.pp.pp = 0;\r\n      profile.pp.scores.forEach((score, index) => {\r\n        profile.pp.pp += 0.95 ** index * score.pp;\r\n      });\r\n      profile.rating = profile.pp.pp;\r\n    } else {\r\n      profile.pp = {};\r\n      profile.rating = 0;\r\n    }\r\n  }\r\n\r\n  // Add first values for rankingHistory and ratingHistory\r\n  _.flow(\r\n    _.values,\r\n    _.orderBy((profile) => profile.rating, 'desc'),\r\n    (items) =>\r\n      items.forEach((profile, index) => {\r\n        profile.ratingHistory.push({\r\n          rating: profile.rating,\r\n          date: profile.firstResultDate.getTime(),\r\n        });\r\n        profile.rankingHistory.push({\r\n          place: index + 1,\r\n          date: profile.firstResultDate.getTime(),\r\n        });\r\n      })\r\n  )(profiles);\r\n\r\n  return resultInfo;\r\n};\r\n\r\nconst interpolateDifficulties = ({ sharedCharts, profiles, debug }) => {\r\n  let newSharedCharts = _.mapValues((chart) => {\r\n    const datas = chart.results\r\n      .map((r) => {\r\n        const profile = profiles[r.playerId];\r\n        if (!profile || !r.accuracy || r.isRank || _.size(profile.accuracyPointsRaw) < 50) {\r\n          return null;\r\n        }\r\n\r\n        if (!profile.accuracyPointsInterpolated) {\r\n          const maxAccuracy = _.maxBy(([x, y]) => y, profile.accuracyPointsRaw)[1];\r\n          const maxLevelWithMaxAcc = _.maxBy(\r\n            ([x, y]) => x,\r\n            _.filter(([x, y]) => y === maxAccuracy, profile.accuracyPointsRaw)\r\n          )[0];\r\n          const points = profile.accuracyPointsRaw\r\n            .filter(([x, y]) => x >= maxLevelWithMaxAcc - 1)\r\n            .map(([x, y]) => [30 - x, 101 - y]);\r\n          const result = regression.logarithmic(points);\r\n\r\n          const f = (x) => {\r\n            const calculated = 101 - result.predict(30 - x)[1];\r\n            return Math.max(0, Math.min(calculated, 100));\r\n          };\r\n          const yx = [];\r\n          for (let i = 1; i <= 28; i += 0.05) {\r\n            yx.push([i, f(i)]);\r\n          }\r\n\r\n          profile.accuracyPointsInterpolated = yx;\r\n        }\r\n\r\n        const interpolatedPoint = _.find(\r\n          (pair) => pair[1] < r.accuracyRaw,\r\n          profile.accuracyPointsInterpolated\r\n        );\r\n        const returnValue = {\r\n          interpolatedDifficulty: interpolatedPoint && interpolatedPoint[0],\r\n          weight:\r\n            r.accuracyRaw > 98\r\n              ? 1 - (r.accuracyRaw - 98) / (100 - 98)\r\n              : r.accuracyRaw < 80\r\n              ? Math.max(0, (r.accuracyRaw - 50) / (80 - 50))\r\n              : 1,\r\n        };\r\n        returnValue.weight *= Math.min(\r\n          1,\r\n          Math.max(0.1, (8 - Math.abs(returnValue.interpolatedDifficulty - chart.chartLevel)) / 8)\r\n        );\r\n        if (debug) {\r\n          r.interpolation = returnValue;\r\n        }\r\n        return returnValue;\r\n      })\r\n      .filter(_.identity);\r\n    const sums = datas.reduce(\r\n      (acc, item) => {\r\n        if (!item.interpolatedDifficulty) {\r\n          return acc;\r\n        }\r\n        return {\r\n          diffSum: acc.diffSum + item.interpolatedDifficulty * item.weight,\r\n          weightSum: acc.weightSum + item.weight,\r\n        };\r\n      },\r\n      { diffSum: 0, weightSum: 0 }\r\n    );\r\n    sums.diffSum += _.toNumber(chart.chartLevel) * 2;\r\n    sums.weightSum += 2;\r\n    const averageDifficulty = sums.diffSum / sums.weightSum;\r\n    // console.log(chart.song, chart.chartLabel, JSON.stringify(datas), averageDifficulty);\r\n\r\n    return {\r\n      ...chart,\r\n      interpolatedDifficulty: averageDifficulty,\r\n    };\r\n  }, sharedCharts);\r\n  return newSharedCharts;\r\n};\r\n\r\nexport const getProcessedProfiles = ({ profiles, sharedCharts, tracklist, battles, debug }) => {\r\n  // Calculate Progress achievements and bonus for starting Elo\r\n  profiles = postProcessProfiles(profiles, tracklist);\r\n\r\n  // Recalculate chart difficulty\r\n  sharedCharts = interpolateDifficulties({ debug, sharedCharts, profiles });\r\n\r\n  // Calculate PP\r\n  const resultInfo = processPP({\r\n    profiles,\r\n    sharedCharts,\r\n  });\r\n\r\n  // Calculate ELO\r\n  const { logText } = processBattles({\r\n    battles,\r\n    profiles,\r\n    resultInfo,\r\n    debug,\r\n  });\r\n\r\n  return { profiles, resultInfo, sharedCharts, logText };\r\n};\r\n","\r\nexport let DEBUG = localStorage && localStorage.getItem('debug');\r\n\r\nif (localStorage) {\r\n  window.debugOn = () => {\r\n    localStorage.setItem('debug', 1);\r\n    DEBUG = 1;\r\n  };\r\n  window.debugOff = () => {\r\n    localStorage.removeItem('debug');\r\n    DEBUG = 0;\r\n  };\r\n}\r\n\r\n","import _ from 'lodash/fp';\r\nimport localForage from 'localforage';\r\nimport queryString from 'query-string';\r\n\r\nimport { fetchJson } from 'utils/fetch';\r\nimport {\r\n  labelToTypeLevel,\r\n  gradeComparator,\r\n  mapResult,\r\n  initializeProfile,\r\n  getProfileInfoFromResult,\r\n  getMaxRawScore,\r\n} from 'utils/leaderboards';\r\n\r\nimport WorkerProfilesProcessing from 'workerize-loader!utils/workers/profilesPostProcess'; // eslint-disable-line import/no-webpack-loader-syntax\r\nimport * as profilesProcessing from 'utils/workers/profilesPostProcess';\r\n\r\nimport { HOST } from 'constants/backend';\r\nimport { DEBUG } from 'constants/env';\r\nimport { RANK_FILTER } from 'constants/leaderboard';\r\n\r\nconst LOADING = `TOP/LOADING`;\r\nconst STOP_LOADING = `TOP/STOP_LOADING`;\r\nexport const SUCCESS = `TOP/SUCCESS`;\r\nconst ERROR = `TOP/ERROR`;\r\nconst SET_FILTER = `TOP/SET_FILTER`;\r\nconst RESET_FILTER = `TOP/RESET_FILTER`;\r\nconst RANKING_CHANGE_SET = `TOP/RANKING_CHANGE_SET`;\r\nexport const PROFILES_UPDATE = `TOP/PROFILES_UPDATE`;\r\n\r\nconst highscoresUrl = process.env.REACT_APP_SOCKET\r\n  ? 'results/highscores/trusted'\r\n  : 'results/highscores';\r\n\r\nexport const defaultFilter = {\r\n  rank: RANK_FILTER.SHOW_ALL,\r\n};\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isLoadingRanking: false,\r\n  data: [],\r\n  filter: defaultFilter,\r\n  players: {},\r\n  profiles: {},\r\n  results: [],\r\n  resultInfo: {},\r\n  sharedCharts: {},\r\n};\r\n\r\nconst processData = (data, tracklist) => {\r\n  const { players, results, shared_charts } = data;\r\n\r\n  //// Initialization\r\n  // Init for TOP\r\n  const mappedResults = [];\r\n  const getTopResultId = (result) => `${result.sharedChartId}-${result.playerId}-${result.isRank}`;\r\n  const getBestGradeResultId = (result) => `${result.sharedChartId}-${result.playerId}`;\r\n  const topResults = {}; // Temp object\r\n  const bestGradeResults = {}; // Temp object\r\n  const top = {}; // Main top scores pbject\r\n\r\n  // Battles for ELO calculation\r\n  const battles = [];\r\n\r\n  // Profiles for every player\r\n  let profiles = {};\r\n\r\n  // Loop 1\r\n  for (let resRaw of results) {\r\n    if (!players[resRaw.player]) {\r\n      // Player of this result was not found in list of players. Ignoring this result like it doesn't exist\r\n      continue;\r\n    }\r\n\r\n    const sharedChartId = resRaw.shared_chart;\r\n    // Initialize Song\r\n    if (!top[sharedChartId]) {\r\n      const sharedChart = shared_charts[sharedChartId];\r\n      const label = _.toUpper(sharedChart.chart_label);\r\n      const [chartType, chartLevel] = labelToTypeLevel(label);\r\n      top[sharedChartId] = {\r\n        song: sharedChart.track_name,\r\n        chartLabel: label,\r\n        chartLevel,\r\n        chartType,\r\n        duration: sharedChart.duration,\r\n        sharedChartId: sharedChartId,\r\n        maxTotalSteps: sharedChart.max_total_steps,\r\n        results: [],\r\n        allResultsIds: [],\r\n      };\r\n    }\r\n\r\n    // Getting current chart and result (mapped)\r\n    const chartTop = top[sharedChartId];\r\n    const result = mapResult(resRaw, players, chartTop);\r\n    mappedResults.push(result);\r\n\r\n    // Inserting result into TOP\r\n    const topResultId = getTopResultId(result);\r\n    const currentTopResult = topResults[topResultId];\r\n    if (!currentTopResult || currentTopResult.score < result.score) {\r\n      if (currentTopResult) {\r\n        const oldScoreIndex = chartTop.results.indexOf(currentTopResult);\r\n        if (oldScoreIndex !== -1) {\r\n          chartTop.results.splice(oldScoreIndex, 1);\r\n        }\r\n      }\r\n      const newScoreIndex = _.sortedLastIndexBy((r) => -r.score, result, chartTop.results);\r\n      if (!result.isUnknownPlayer || newScoreIndex === 0) {\r\n        chartTop.results.splice(newScoreIndex, 0, result);\r\n        chartTop.latestScoreDate = result.date;\r\n        chartTop.allResultsIds.push(result.playerId);\r\n        topResults[topResultId] = result;\r\n      }\r\n      if (!result.isUnknownPlayer) {\r\n        chartTop.results.forEach((enemyResult) => {\r\n          if (\r\n            !enemyResult.isUnknownPlayer &&\r\n            enemyResult.isRank === result.isRank &&\r\n            enemyResult.playerId !== result.playerId &&\r\n            result.score &&\r\n            enemyResult.score\r\n          ) {\r\n            battles.push([result, enemyResult, chartTop]);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // Getting best grade of player on this chart\r\n    if (!result.isIntermediateResult) {\r\n      const bestGradeResultId = getBestGradeResultId(result);\r\n      const currentBestGradeRes = bestGradeResults[bestGradeResultId];\r\n      if (\r\n        !currentBestGradeRes ||\r\n        gradeComparator[currentBestGradeRes.grade] <= gradeComparator[result.grade]\r\n      ) {\r\n        // Using <= here, so newer scores always win and rewrite old scores\r\n        currentBestGradeRes && (currentBestGradeRes.isBestGradeOnChart = false);\r\n        result.isBestGradeOnChart = true;\r\n        bestGradeResults[bestGradeResultId] = result;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Loop 2, when the TOP is already set up\r\n  for (let chartId in top) {\r\n    const chart = top[chartId];\r\n    chart.maxScore = null;\r\n    for (let result of chart.results) {\r\n      if (!result.isRank) {\r\n        if (result.accuracy) {\r\n          const maxScoreCandidate = getMaxRawScore(result, chart);\r\n          if (chart.maxScore < maxScoreCandidate) {\r\n            chart.maxScore = maxScoreCandidate;\r\n          }\r\n        } else if (chart.maxScore && chart.maxScore < result.score) {\r\n          chart.maxScore = result.score;\r\n        }\r\n      }\r\n      // Getting some info about players\r\n      if (!result.isUnknownPlayer && !result.isIntermediateResult) {\r\n        if (!profiles[result.playerId]) {\r\n          initializeProfile(result, profiles, players);\r\n        }\r\n        getProfileInfoFromResult(result, chart, profiles);\r\n      }\r\n    }\r\n  }\r\n\r\n  return { mappedResults, profiles, sharedCharts: top, battles };\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case STOP_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n        data: initialState.data,\r\n        players: initialState.players,\r\n        profiles: initialState.profiles,\r\n        results: initialState.results,\r\n        sharedCharts: initialState.sharedCharts,\r\n        scoreInfo: {},\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isLoadingRanking: true,\r\n        data: action.data,\r\n        players: action.players,\r\n        profiles: action.profiles,\r\n        results: action.results,\r\n        sharedCharts: action.sharedCharts,\r\n        originalData: action.originalData,\r\n        scoreInfo: {},\r\n      };\r\n    case PROFILES_UPDATE:\r\n      return {\r\n        ...state,\r\n        isLoadingRanking: false,\r\n        profiles: action.profiles,\r\n        resultInfo: action.resultInfo,\r\n        sharedCharts: action.sharedCharts,\r\n        data: _.values(action.sharedCharts),\r\n      };\r\n    case SET_FILTER:\r\n      return {\r\n        ...state,\r\n        filter: action.filter,\r\n      };\r\n    case RESET_FILTER:\r\n      return {\r\n        ...state,\r\n        filter: defaultFilter,\r\n      };\r\n    case RANKING_CHANGE_SET:\r\n      const hasPrevList = !_.isEmpty(action.listPrev);\r\n      return {\r\n        ...state,\r\n        profiles: _.mapValues((playerOriginal) => {\r\n          const player = {\r\n            ...playerOriginal,\r\n            prevRating: _.get(playerOriginal.id, action.rankingsPointsMap),\r\n          };\r\n          if (!hasPrevList) {\r\n            return player; // First time opening this thing and we didn't have any previous data\r\n          }\r\n          if (!_.includes(player.id, action.listPrev)) {\r\n            return { ...player, change: 'NEW' };\r\n          } else if (!_.includes(player.id, action.listNow)) {\r\n            // Should NEVER happen, idk if this is possible\r\n            return { ...player, change: '?' };\r\n          } else {\r\n            return {\r\n              ...player,\r\n              change: _.indexOf(player.id, action.listPrev) - _.indexOf(player.id, action.listNow),\r\n            };\r\n          }\r\n        }, state.profiles),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchResults = () => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(\r\n        fetchJson({\r\n          url: `${HOST}/${highscoresUrl}`,\r\n        })\r\n      );\r\n\r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n      // HACKS for test\r\n      // data.results = _.dropRight(500, data.results);\r\n      // data.results = _.dropRight(9500, data.results);\r\n      // console.log(1, data.results);\r\n      // data.results = _.filter((res) => res.gained < '2020-07-05 00:00:00', data.results);\r\n      // data.results = _.filter(res => res.gained < '2020-03-12 16:55:00', data.results);\r\n      // data.results = _.filter(res => res.gained < '2020-03-12 16:34:51', data.results);\r\n      // console.log(2, data.results);\r\n\r\n      dispatch(processResultsData(data));\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({ type: ERROR, error });\r\n    }\r\n  };\r\n};\r\n\r\nexport const appendNewResults = (lastDate) => {\r\n  return async (dispatch, getState) => {\r\n    const { originalData, sharedCharts } = getState().results;\r\n    if (!lastDate) {\r\n      return dispatch(fetchResults());\r\n    }\r\n\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(\r\n        fetchJson({\r\n          url: `${HOST}/${highscoresUrl}?${queryString.stringify({ start_date: lastDate })}`,\r\n        })\r\n      );\r\n      if (data.error) {\r\n        throw new Error(data.error);\r\n      }\r\n\r\n      const appendedResults = _.filter((result) => {\r\n        const currentResults = sharedCharts[result.shared_chart];\r\n        if (!currentResults) {\r\n          return true;\r\n        }\r\n        const oldResult = _.find(\r\n          (old) =>\r\n            old.id === result.id ||\r\n            (old.playerId === result.player && old.isRank === !!result.rank_mode),\r\n          currentResults.results\r\n        );\r\n        if (!oldResult) {\r\n          if (result.player === 1 && currentResults.results[0].score > result.score) {\r\n            return false;\r\n          }\r\n          return true;\r\n        }\r\n        if (oldResult.id === result.id || oldResult.score >= result.score) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }, data.results);\r\n\r\n      console.log('Received results:', data, '; Will append:', appendedResults);\r\n\r\n      if (!_.isEmpty(appendedResults)) {\r\n        const mergedData = {\r\n          players: data.players,\r\n          results: [...originalData.results, ...appendedResults],\r\n          shared_charts: { ...originalData.shared_charts, ...data.shared_charts },\r\n        };\r\n        dispatch(processResultsData(mergedData));\r\n      } else {\r\n        dispatch({ type: STOP_LOADING });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({ type: ERROR, error });\r\n    }\r\n  };\r\n};\r\n\r\nconst processResultsData = (data) => {\r\n  return async (dispatch, getState) => {\r\n    const { tracklist } = getState();\r\n    const { sharedCharts, mappedResults, profiles, battles } = processData(data, tracklist);\r\n\r\n    dispatch({\r\n      type: SUCCESS,\r\n      data: _.values(sharedCharts),\r\n      players: _.flow(\r\n        _.toPairs,\r\n        _.map(([id, player]) => ({ ...player, id: _.toInteger(id) }))\r\n      )(data.players),\r\n      results: mappedResults,\r\n      profiles,\r\n      sharedCharts,\r\n      originalData: data,\r\n    });\r\n\r\n    // Parallelized calculation of ELO and profile data\r\n    const input = { sharedCharts, profiles, tracklist, battles, debug: DEBUG };\r\n    let output;\r\n    if (window.Worker) {\r\n      const worker = new WorkerProfilesProcessing();\r\n      output = await worker.getProcessedProfiles(input);\r\n      worker.terminate();\r\n    } else {\r\n      output = profilesProcessing.getProcessedProfiles(input);\r\n    }\r\n\r\n    DEBUG && console.log(output.logText);\r\n    DEBUG &&\r\n      console.log(\r\n        'Processed profiles:',\r\n        Object.values(output.profiles)\r\n          .filter((q) => q.pp)\r\n          .sort((a, b) => b.pp.pp - a.pp.pp)\r\n      );\r\n    // console.log(output.sharedCharts);\r\n    // let byLevel = _.groupBy((ch) => ch.chartLevel, _.values(output.sharedCharts));\r\n    // function getSD(array) {\r\n    //   const n = array.length;\r\n    //   const mean = array.reduce((a, b) => a + b) / n;\r\n    //   return Math.sqrt(array.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n);\r\n    // }\r\n    // byLevel = _.mapValues((charts) => {\r\n    //   return {\r\n    //     avgLevel: _.meanBy((ch) => ch.interpolatedDifficulty || Number(ch.chartLevel), charts),\r\n    //     deviation: getSD(charts.map((ch) => ch.interpolatedDifficulty || Number(ch.chartLevel))),\r\n    //     charts,\r\n    //   };\r\n    // }, byLevel);\r\n    // console.log(byLevel);\r\n    // console.log(\r\n    //   _.values(byLevel)\r\n    //     .map((q) => `${q.avgLevel}\\t${q.deviation}`)\r\n    //     .join('\\n')\r\n    // );\r\n    dispatch({\r\n      type: PROFILES_UPDATE,\r\n      ...output,\r\n    });\r\n    dispatch(calculateRankingChanges(output.profiles));\r\n  };\r\n};\r\n\r\nexport const setFilter = (filter) => ({\r\n  type: SET_FILTER,\r\n  filter,\r\n});\r\n\r\nexport const resetFilter = () => ({\r\n  type: RESET_FILTER,\r\n});\r\n\r\nconst getListOfNames = _.map('id');\r\nconst getMapOfRatings = _.flow(\r\n  _.map((q) => [q.id, q.rating]),\r\n  _.fromPairs\r\n);\r\n\r\nexport const calculateRankingChanges = (profiles) => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      const ranking = _.orderBy('ratingRaw', 'desc', _.values(profiles));\r\n      const [lastChangedRanking, lastChangedRankingPoints, lastFetchedRanking] = await Promise.all([\r\n        localForage.getItem('lastChangedRanking_v3'),\r\n        localForage.getItem('lastChangedRankingPoints_v3'),\r\n        localForage.getItem('lastFetchedRanking_v3'),\r\n      ]);\r\n      const listNow = getListOfNames(ranking);\r\n      const listLastFetched = getListOfNames(lastFetchedRanking);\r\n      const listLastChanged = getListOfNames(lastChangedRanking);\r\n      const mapPointsNow = getMapOfRatings(ranking);\r\n      const mapPointsLastFetched = getMapOfRatings(lastFetchedRanking);\r\n      const mapPointsLastChanged = getMapOfRatings(lastChangedRankingPoints);\r\n\r\n      let rankingsPointsMap = mapPointsLastChanged;\r\n      // console.log(listNow, listLastFetched, listLastChanged);\r\n      // console.log(mapPointsNow, mapPointsLastFetched, mapPointsLastChanged);\r\n      if (!_.isEqual(mapPointsNow, mapPointsLastFetched)) {\r\n        // Between this fetch and last fetch there was a CHANGE in ranking\r\n        localForage.setItem('lastChangedRankingPoints_v3', lastFetchedRanking);\r\n        rankingsPointsMap = mapPointsLastFetched;\r\n      }\r\n      let listPrev = listLastChanged;\r\n      if (!_.isEqual(listNow, listLastFetched)) {\r\n        // Between this fetch and last fetch there was a CHANGE in ranking\r\n        localForage.setItem('lastChangedRanking_v3', lastFetchedRanking);\r\n        listPrev = listLastFetched;\r\n      }\r\n      dispatch({\r\n        type: RANKING_CHANGE_SET,\r\n        listNow,\r\n        listPrev,\r\n        rankingsPointsMap,\r\n      });\r\n      localForage.setItem('lastFetchedRanking_v3', ranking);\r\n    } catch (error) {\r\n      console.warn('Cannot get ranking from local storage', error);\r\n    }\r\n  };\r\n};\r\n","import _ from 'lodash/fp';\r\nimport localForage from 'localforage';\r\n\r\nimport { setFilter } from 'reducers/results';\r\n\r\nconst SELECT_PRESET = `PRESETS/SELECT_PRESET`;\r\nconst LOAD_PRESETS = `PRESETS/LOAD_PRESETS`;\r\nconst LOADING_START = `PRESETS/LOADING_START`;\r\nconst LOADING_END = `PRESETS/LOADING_END`;\r\n\r\nconst initialState = {\r\n  presets: [],\r\n  currentPreset: null,\r\n  isLoading: false,\r\n};\r\n\r\nconst itemToOption = item =>\r\n  item && {\r\n    ...item,\r\n    label: item.name,\r\n    value: item.name,\r\n  };\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD_PRESETS:\r\n      const currentPreset = _.find({ name: _.get('name', state.currentPreset) }, action.presets);\r\n      return {\r\n        ...state,\r\n        currentPreset: itemToOption(currentPreset) || null,\r\n        presets: _.map(itemToOption, action.presets),\r\n      };\r\n    case SELECT_PRESET:\r\n      return {\r\n        ...state,\r\n        currentPreset: itemToOption(action.currentPreset),\r\n      };\r\n    case LOADING_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case LOADING_END:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst reloadPresets = presets => ({ type: LOAD_PRESETS, presets: presets || [] });\r\n\r\nconst startLoading = () => ({\r\n  type: LOADING_START,\r\n});\r\n\r\nconst endLoading = () => ({\r\n  type: LOADING_END,\r\n});\r\n\r\nexport const selectPreset = currentPreset => ({\r\n  type: SELECT_PRESET,\r\n  currentPreset,\r\n});\r\n\r\nexport const loadPresets = () => (dispatch, getState) => {\r\n  dispatch(startLoading());\r\n  return localForage.getItem('filterPresets').then(presets => {\r\n    dispatch(reloadPresets(presets));\r\n    dispatch(endLoading());\r\n  });\r\n};\r\n\r\nexport const savePreset = name => (dispatch, getState) => {\r\n  dispatch(startLoading());\r\n  return localForage.getItem('filterPresets').then(presets => {\r\n    const { filter } = getState().top;\r\n    const newPreset = { name, filter };\r\n    if (!_.some({ name }, presets)) {\r\n      const newPresets = [...(presets || []), newPreset];\r\n      dispatch(reloadPresets(newPresets));\r\n      dispatch(selectPreset(newPreset));\r\n      localForage.setItem('filterPresets', newPresets);\r\n    } else if (window.confirm('Preset with this name already exists, replace it?')) {\r\n      const withoutOldPreset = _.remove({ name }, presets);\r\n      const newPresets = [...withoutOldPreset, newPreset];\r\n      dispatch(reloadPresets(newPresets));\r\n      localForage.setItem('filterPresets', newPresets);\r\n    }\r\n    dispatch(endLoading());\r\n  });\r\n};\r\n\r\nexport const openPreset = () => (dispatch, getState) => {\r\n  dispatch(startLoading());\r\n  const currentPreset = getState().presets.currentPreset;\r\n  const name = _.get('name', currentPreset);\r\n  return localForage.getItem('filterPresets').then(presets => {\r\n    const preset = name && _.find({ name }, presets);\r\n    if (preset) {\r\n      dispatch(selectPreset(currentPreset));\r\n      dispatch(setFilter(currentPreset.filter));\r\n    } else {\r\n      // Preset not found for some reason, update list\r\n      dispatch(reloadPresets(presets));\r\n    }\r\n    dispatch(endLoading());\r\n  });\r\n};\r\n\r\nexport const deletePreset = () => (dispatch, getState) => {\r\n  dispatch(startLoading());\r\n  const name = _.get('name', getState().presets.currentPreset);\r\n  return localForage.getItem('filterPresets').then(presets => {\r\n    const preset = _.find({ name }, presets);\r\n    if (preset && window.confirm('Are you sure you want to delete selected preset?')) {\r\n      const withoutOldPreset = _.remove({ name }, presets);\r\n      dispatch(reloadPresets(withoutOldPreset));\r\n      localForage.setItem('filterPresets', withoutOldPreset);\r\n    } else {\r\n      // Preset not found for some reason, update list\r\n      dispatch(reloadPresets(presets));\r\n    }\r\n    dispatch(endLoading());\r\n  });\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FaLayerGroup, FaFolderOpen, FaSave, FaPlus, FaTrashAlt } from 'react-icons/fa';\r\nimport Select from 'react-select';\r\n\r\nimport Overlay from 'components/Shared/Overlay/Overlay';\r\nimport Input from 'components/Shared/Input/Input';\r\n\r\nimport { loadPresets, savePreset, selectPreset, openPreset, deletePreset } from 'reducers/presets';\r\nimport { Language } from 'utils/context/translation';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ...state.presets,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  loadPresets,\r\n  savePreset,\r\n  openPreset,\r\n  deletePreset,\r\n  selectPreset,\r\n};\r\n\r\nclass PresetsControl extends React.Component {\r\n  state = {};\r\n\r\n  static contextType = Language;\r\n\r\n  componentDidMount() {\r\n    this.props.loadPresets();\r\n  }\r\n\r\n  onChangeSelection = (selected) => {\r\n    this.props.selectPreset(selected.name);\r\n  };\r\n\r\n  onRewritePreset = () => {\r\n    const { currentPreset } = this.props;\r\n    this.props.savePreset(currentPreset.name);\r\n  };\r\n\r\n  onSavePreset = () => {\r\n    const { name } = this.state;\r\n    this.props.savePreset(name);\r\n    this.setState({ isAddingNew: false });\r\n  };\r\n\r\n  render() {\r\n    const { presets, currentPreset, isLoading } = this.props;\r\n    const { name, isAddingNew } = this.state;\r\n    const lang = this.context;\r\n    return (\r\n      <div>\r\n        <Overlay\r\n          overlayItem={\r\n            <button className=\"btn btn-sm btn-dark btn-icon _margin-right\">\r\n              <FaLayerGroup />\r\n              {lang.PRESETS}\r\n            </button>\r\n          }\r\n        >\r\n          <div className=\"presets-control-overlay\">\r\n            <Select\r\n              className=\"select _margin-bottom\"\r\n              classNamePrefix=\"select\"\r\n              placeholder={lang.PRESETS_PLACEHOLDER}\r\n              options={presets}\r\n              value={currentPreset}\r\n              onChange={this.props.selectPreset}\r\n              noOptionsMessage={() => lang.EMPTY}\r\n            />\r\n            {currentPreset && (\r\n              <div className=\"buttons-presets _margin-bottom\">\r\n                <div className=\"_flex-fill\" />\r\n                <button\r\n                  className=\"btn btn-sm btn-dark btn-icon _margin-right\"\r\n                  onClick={this.props.openPreset}\r\n                  disabled={isLoading}\r\n                >\r\n                  <FaFolderOpen /> {lang.OPEN}\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-sm btn-dark btn-icon _margin-right\"\r\n                  onClick={this.onRewritePreset}\r\n                  disabled={isLoading}\r\n                >\r\n                  <FaSave /> {lang.OVERWRITE}\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-sm btn-dark btn-icon\"\r\n                  onClick={this.props.deletePreset}\r\n                  disabled={isLoading}\r\n                >\r\n                  <FaTrashAlt /> {lang.DELETE}\r\n                </button>\r\n              </div>\r\n            )}\r\n            {!isAddingNew && (\r\n              <div className=\"buttons-presets _margin-bottom\">\r\n                <div className=\"_flex-fill\" />\r\n\r\n                <button\r\n                  className=\"btn btn-sm btn-dark btn-icon _margin-left _self-align-end\"\r\n                  onClick={() => this.setState({ isAddingNew: true })}\r\n                  disabled={isLoading}\r\n                >\r\n                  <FaPlus /> {lang.ADD}\r\n                </button>\r\n              </div>\r\n            )}\r\n            {isAddingNew && (\r\n              <div className=\"adding-new _margin-bottom\">\r\n                <Input\r\n                  value={name}\r\n                  placeholder={lang.PRESET_NAME_PLACEHOLDER}\r\n                  className=\"form-control\"\r\n                  onChange={(name) => this.setState({ name })}\r\n                />\r\n                <button\r\n                  className=\"btn btn-sm btn-dark btn-icon _margin-left\"\r\n                  onClick={this.onSavePreset}\r\n                  disabled={!name || isLoading}\r\n                >\r\n                  <FaSave /> {lang.SAVE}\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-sm btn-dark btn-icon _margin-left\"\r\n                  onClick={() => this.setState({ isAddingNew: false })}\r\n                  disabled={isLoading}\r\n                >\r\n                  {lang.CANCEL}\r\n                </button>\r\n              </div>\r\n            )}\r\n            {/* <div>\r\n              <Toggle\r\n                checked={false}\r\n                onToggle={active => {\r\n                  localForage.setItem('showTabs', active);\r\n                }}\r\n              >\r\n                {lang.SHOW_PRESETS_TABS}\r\n              </Toggle>\r\n            </div> */}\r\n          </div>\r\n        </Overlay>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PresetsControl);\r\n","import React from 'react';\r\n\r\nconst Flag = ({ region }) => {\r\n  return (\r\n    <div\r\n      className=\"flag-img\"\r\n      style={{\r\n        backgroundImage: `url(https://osu.ppy.sh/images/flags/${region}.png)`,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Flag;\r\n","import React from 'react';\r\n\r\nconst Grade = ({ grade }) => {\r\n  if (!grade || grade === '?') {\r\n    return null;\r\n  }\r\n  return <img src={`${process.env.PUBLIC_URL}/grades/${grade}.png`} alt={grade} />;\r\n};\r\n\r\nexport default Grade;\r\n","import { useState, useEffect, useMemo, useCallback, useRef } from 'react';\r\nimport _ from 'lodash/fp';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport ru from 'javascript-time-ago/locale/ru';\r\nimport { convenient } from 'javascript-time-ago/gradation';\r\nimport moment from 'moment';\r\n\r\nimport { labelToTypeLevel } from 'utils/leaderboards';\r\n\r\nTimeAgo.addLocale(ru);\r\nconst timeAgo = new TimeAgo('ru-RU');\r\nconst timeStyle = {\r\n  flavour: 'short',\r\n  gradation: convenient,\r\n  units: ['day', 'week', 'month'],\r\n};\r\nexport const getTimeAgo = (date) => {\r\n  const dayDiff = moment().startOf('day').diff(moment(date).startOf('day'), 'days');\r\n  return dayDiff === 0\r\n    ? 'сегодня'\r\n    : dayDiff === 1\r\n    ? 'вчера'\r\n    : timeAgo.format(date, timeStyle).replace('назад', '');\r\n};\r\n\r\nexport const preprocessData = (data) => ({\r\n  ...data,\r\n  results: _.flow(\r\n    _.get('results'),\r\n    _.toPairs,\r\n    _.map(([chartId, item]) => {\r\n      const fullRes = _.find(\r\n        (r) => _.every(_.isNumber, [r.perfects, r.greats, r.goods, r.bads, r.misses]),\r\n        item.results\r\n      );\r\n      const stepSum =\r\n        fullRes &&\r\n        [fullRes.perfects, fullRes.greats, fullRes.goods, fullRes.bads, fullRes.misses].reduce(\r\n          (sum, n) => sum + n,\r\n          0\r\n        );\r\n\r\n      const [chartType, chartLevel] = labelToTypeLevel(item.chart_label);\r\n\r\n      return {\r\n        song: item.track,\r\n        sharedChartId: _.toNumber(chartId),\r\n        chartLabel: item.chart_label,\r\n        chartLevel,\r\n        chartType,\r\n        mix: item.mix,\r\n        duration: item.duration,\r\n        results: item.results.map((res, index) => {\r\n          let resultInfoOverrides = {};\r\n          if (stepSum) {\r\n            const infos = [res.perfects, res.greats, res.goods, res.bads, res.misses];\r\n            let fixableIndex = -1;\r\n            let localStepSum = 0;\r\n            const canFix =\r\n              infos.filter((numb, index) => {\r\n                if (!_.isNumber(numb)) {\r\n                  fixableIndex = index;\r\n                  return true;\r\n                }\r\n                localStepSum += numb;\r\n                return false;\r\n              }).length === 1;\r\n            if (canFix) {\r\n              resultInfoOverrides[['perfect', 'great', 'good', 'bad', 'miss'][fixableIndex]] =\r\n                stepSum - localStepSum;\r\n            }\r\n          }\r\n          return {\r\n            id: res.id,\r\n            playerId: res.player,\r\n            nickname: data.players[res.player].nickname,\r\n            nicknameArcade: data.players[res.player].arcade_name,\r\n            originalChartMix: res.originalChartMix,\r\n            originalChartLabel: res.originalChartLabel,\r\n            originalScore: res.originalScore,\r\n            date: res.gained,\r\n            dateObject: new Date(res.gained),\r\n            grade: res.grade,\r\n            isExactDate: !!res.exact_gain_date,\r\n            score: res.score,\r\n            scoreIncrease: res.score_increase,\r\n            calories: res.calories && res.calories / 1000,\r\n            perfect: res.perfects,\r\n            great: res.greats,\r\n            good: res.goods,\r\n            bad: res.bads,\r\n            miss: res.misses,\r\n            combo: res.max_combo,\r\n            mods: res.mods_list,\r\n            isRank: !!res.rank_mode,\r\n            isHJ: (res.mods_list || '').split(' ').includes('HJ'),\r\n            ...resultInfoOverrides,\r\n          };\r\n        }),\r\n      };\r\n    }),\r\n    _.map((song) => {\r\n      return {\r\n        ...song,\r\n        latestScoreDate: song.results.reduce(\r\n          (latest, current) => (current.date > latest ? current.date : latest),\r\n          song.results[0].date\r\n        ),\r\n        results: song.results.map((res) => {\r\n          const perfects = (Math.sqrt(res.perfect) * _.toInteger(song.chartLevel)) / 2;\r\n          const acc = perfects\r\n            ? Math.floor(\r\n                ((perfects * 100 + res.great * 60 + res.good * 30 + res.miss * -20) /\r\n                  (perfects + res.great + res.good + res.bad + res.miss)) *\r\n                  100\r\n              ) / 100\r\n            : null;\r\n          const accRaw = res.perfect\r\n            ? Math.floor(\r\n                ((res.perfect * 100 + res.great * 60 + res.good * 30 + res.miss * -20) /\r\n                  (res.perfect + res.great + res.good + res.bad + res.miss)) *\r\n                  100\r\n              ) / 100\r\n            : null;\r\n          return {\r\n            ...res,\r\n            accuracy: acc < 0 ? 0 : accRaw === 100 ? 100 : acc && +acc.toFixed(2),\r\n            accuracyRaw: accRaw,\r\n            hasRankScore: _.some({ playerId: res.playerId, isRank: true }, song.results),\r\n          };\r\n        }),\r\n      };\r\n    }),\r\n    _.orderBy(['latestScoreDate', 'song', 'chartLevel'], ['desc', 'asc', 'desc'])\r\n  )(data),\r\n});\r\n\r\nexport const useTrackedEx = ({\r\n  data,\r\n  resetData,\r\n  onChange = _.noop,\r\n  isDataValid = _.identity,\r\n  isDebugOn = false,\r\n}) => {\r\n  const [prevData, setPrevData] = useState(data);\r\n  const [currData, setCurrData] = useState(data);\r\n  const resetIndicator = useRef(resetData);\r\n\r\n  useEffect(() => {\r\n    // isDebugOn && console.log('tracking effect', resetIndicatorData, data, currData, prevData);\r\n    if (resetIndicator.current !== resetData) {\r\n      // isDebugOn && console.log('resetting due to indicator chage', data);\r\n      resetIndicator.current = resetData;\r\n      setPrevData(data);\r\n      setCurrData(data);\r\n    } else if (isDataValid(data) && !_.isEqual(data, currData)) {\r\n      // isDebugOn && console.log('data has updated', data, currData);\r\n      setPrevData(currData);\r\n      setCurrData(data);\r\n      onChange(currData, data);\r\n    }\r\n  }, [data, onChange, currData, prevData, resetData, isDataValid]);\r\n\r\n  const reset = useCallback(() => {\r\n    // isDebugOn && console.log('reset called from function');\r\n    setPrevData(data);\r\n    setCurrData(data);\r\n  }, [data]);\r\n\r\n  return useMemo(() => [currData, prevData, reset], [currData, prevData, reset]);\r\n};\r\n\r\nexport const useTracked = (data, resetIndicatorData, onChange = _.noop, isDebugOn) => {\r\n  const [prevData, setPrevData] = useState(data);\r\n  const [currData, setCurrData] = useState(data);\r\n  const resetIndicator = useRef(resetIndicatorData);\r\n\r\n  useEffect(() => {\r\n    // isDebugOn && console.log('tracking effect', resetIndicatorData, data, currData, prevData);\r\n    if (resetIndicator.current !== resetIndicatorData) {\r\n      // isDebugOn && console.log('resetting due to indicator chage', data);\r\n      resetIndicator.current = resetIndicatorData;\r\n      setPrevData(data);\r\n      setCurrData(data);\r\n    } else if (data && !_.isEqual(data, currData)) {\r\n      // isDebugOn && console.log('data has updated', data, currData);\r\n      setPrevData(currData);\r\n      setCurrData(data);\r\n      onChange(currData, data);\r\n    }\r\n  }, [data, onChange, currData, prevData, resetIndicatorData]);\r\n\r\n  const reset = useCallback(() => {\r\n    // isDebugOn && console.log('reset called from function');\r\n    setPrevData(data);\r\n    setCurrData(data);\r\n  }, [data]);\r\n\r\n  return useMemo(() => [currData, prevData, reset], [currData, prevData, reset]);\r\n};\r\n\r\nexport const useResetTrackedObject = (object) => {\r\n  return useCallback(() => {\r\n    const trackings = _.values(object);\r\n    trackings.forEach((tracking) => tracking[2]());\r\n  }, [object]);\r\n};\r\n","export const colorsArray = [\r\n  '#4DB3FF',\r\n  '#80B300',\r\n  '#FF6655',\r\n  '#FF99E6',\r\n  '#33FFCC',\r\n  '#e633c8',\r\n  '#dbe812',\r\n  '#FF1A66',\r\n  '#991AFF',\r\n  '#E6B333',\r\n  '#1AB399',\r\n  '#4D8066',\r\n  '#CC9999',\r\n  '#00E680',\r\n  '#809980',\r\n  '#E6FF80',\r\n  '#1AFF33',\r\n  '#999933',\r\n  '#E6331A',\r\n  '#CCCC00',\r\n  '#66E64D',\r\n  '#4D80CC',\r\n  '#9900B3',\r\n  '#4DB380',\r\n  '#FF4D4D',\r\n];\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport _ from 'lodash/fp';\r\nimport classNames from 'classnames';\r\nimport numeral from 'numeral';\r\nimport { FaExclamationTriangle, FaAngleDoubleUp } from 'react-icons/fa';\r\nimport Tooltip from 'react-responsive-ui/modules/Tooltip';\r\n\r\nimport { routes } from 'constants/routes';\r\nimport { DEBUG } from 'constants/env';\r\n\r\nimport Flag from 'components/Shared/Flag';\r\nimport Grade from 'components/Shared/Grade';\r\nimport Overlay from 'components/Shared/Overlay/Overlay';\r\n\r\nimport { getTimeAgo as getShortTimeAgo } from 'components/SocketTracker/helpers';\r\n\r\nimport { tooltipFormatter } from 'utils/leaderboards';\r\nimport { getExp } from 'utils/exp';\r\nimport { colorsArray } from 'utils/colors';\r\nimport { useLanguage } from 'utils/context/translation';\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    resultInfo: state.results.resultInfo,\r\n    profiles: state.results.profiles,\r\n  };\r\n};\r\n\r\nconst Result = (\r\n  {\r\n    // shared\r\n    res,\r\n    chart,\r\n    resultInfo,\r\n    profiles,\r\n    placeDifference,\r\n    // leaderboard\r\n    showProtagonistEloChange = false,\r\n    showProtagonistPpChange = false,\r\n    protagonistName = null,\r\n    uniqueSelectedNames = [],\r\n    // socket\r\n    leftProfile = {},\r\n    rightProfile = {},\r\n    isSocketView = false,\r\n  },\r\n  ref\r\n) => {\r\n  const inf = resultInfo[res.id] || {};\r\n\r\n  const lang = useLanguage();\r\n\r\n  // Rating info for nickname column:\r\n  let ratingInfoBlock = null;\r\n  if (DEBUG) {\r\n    // In debug mode we show all info\r\n    ratingInfoBlock = (\r\n      <>\r\n        <span className=\"debug-elo-info\">\r\n          {' '}\r\n          {inf.startingRating && Math.round(inf.startingRating)}\r\n          {' / '}\r\n          {inf.ratingDiff > 0 ? '+' : ''}\r\n          {inf.ratingDiff && Math.round(inf.ratingDiff)}\r\n          {' / '}\r\n          {inf.pp && inf.pp.ppFixed}pp\r\n        </span>\r\n      </>\r\n    );\r\n  } else if (\r\n    res.nickname === protagonistName &&\r\n    (showProtagonistEloChange || showProtagonistPpChange)\r\n  ) {\r\n    // In non-debug mode we show relevant info for selected protagonist\r\n    ratingInfoBlock = (\r\n      <>\r\n        {' / '}\r\n        {showProtagonistEloChange && inf.ratingDiff && (\r\n          <span>{`${inf.ratingDiff > 0 ? '+' : ''}${Math.round(inf.ratingDiff)}`}</span>\r\n        )}\r\n        {showProtagonistPpChange && inf.pp && <span>{inf.pp.ppFixed}pp</span>}\r\n      </>\r\n    );\r\n  }\r\n\r\n  const flag = profiles[res.playerId] ? <Flag region={profiles[res.playerId].region} /> : null;\r\n\r\n  const nameIndex = uniqueSelectedNames.indexOf(res.nickname);\r\n\r\n  return (\r\n    <tr\r\n      key={res.id}\r\n      ref={ref}\r\n      className={classNames({\r\n        empty: !res.accuracy,\r\n        latest: new Date(chart.latestScoreDate) - new Date(res.date) < 12 * 60 * 60 * 1000,\r\n        left: res.nickname === leftProfile.name,\r\n        right: res.nickname === rightProfile.name,\r\n      })}\r\n      style={\r\n        nameIndex > -1\r\n          ? {\r\n              background: colorsArray[nameIndex] + '3A',\r\n              outline: `1px solid ${colorsArray[nameIndex]}A0`,\r\n            }\r\n          : {}\r\n      }\r\n    >\r\n      {!isSocketView && (\r\n        <td className=\"place\">{res.isSecondOccurenceInResults ? '' : `#${res.topPlace}`}</td>\r\n      )}\r\n      <td className=\"nickname\" style={nameIndex > -1 ? { fontWeight: 'bold' } : {}}>\r\n        <div className=\"nickname-container\">\r\n          {flag}\r\n          <span className=\"nickname-text\">\r\n            <NavLink exact to={routes.profile.getPath({ id: res.playerId })}>\r\n              {res.nickname}\r\n            </NavLink>\r\n            {!!placeDifference && (\r\n              <span className=\"change-holder up\">\r\n                <span>{placeDifference}</span>\r\n                <FaAngleDoubleUp />\r\n              </span>\r\n            )}\r\n            {ratingInfoBlock}\r\n          </span>\r\n          {!isSocketView && (\r\n            <div className=\"mods-container\">\r\n              {isSocketView &&\r\n                res.mods &&\r\n                res.mods\r\n                  .split(' ')\r\n                  .filter((mod) => mod.includes('AV'))\r\n                  .map((avMod) => (\r\n                    <div className=\"mod av-mod\">\r\n                      <div className=\"av-text\">AV</div>\r\n                      <div className=\"av-number\">{avMod.replace('AV', '')}</div>\r\n                    </div>\r\n                  ))}\r\n              {isSocketView &&\r\n                res.mods &&\r\n                res.mods\r\n                  .split(' ')\r\n                  .filter((mod) => mod.endsWith('X'))\r\n                  .map((xMod) => (\r\n                    <div className=\"mod x-mod\">\r\n                      <div className=\"x-number\">{xMod}</div>\r\n                    </div>\r\n                  ))}\r\n              {res.isRank && <div className=\"mod vj\">{res.mods ? 'R' : 'R?'}</div>}\r\n              {res.isHJ && <div className=\"mod hj\">HJ</div>}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </td>\r\n      <td className=\"score\">\r\n        <Overlay\r\n          overlayClassName=\"score-overlay-outer\"\r\n          overlayItem={\r\n            <span className=\"score-span\">\r\n              {res.scoreIncrease > res.score * 0.8 && '*'}\r\n              {numeral(res.score).format('0,0')}\r\n            </span>\r\n          }\r\n          placement=\"top\"\r\n        >\r\n          <div className=\"score-overlay\">\r\n            {DEBUG && (\r\n              <>\r\n                <div>\r\n                  <span className=\"_grey\">result id: </span>\r\n                  {res.id}\r\n                </div>\r\n                <div>\r\n                  <span className=\"_grey\">player id: </span>\r\n                  {res.playerId}\r\n                </div>\r\n              </>\r\n            )}\r\n            <div>\r\n              <span className=\"_grey\">{lang.PLAYER}: </span>\r\n              <NavLink exact to={routes.profile.getPath({ id: res.playerId })}>\r\n                {res.nickname} ({res.nicknameArcade})\r\n              </NavLink>\r\n            </div>\r\n            {!!getExp(res, chart) && (\r\n              <div className=\"important\">\r\n                <span className=\"_grey\">{lang.EXP}: </span>+\r\n                {numeral(getExp(res, chart)).format('0,0')}\r\n              </div>\r\n            )}\r\n            {_.isNumber(inf.startingRating) && _.isNumber(inf.ratingDiff) && (\r\n              <div className=\"important\">\r\n                <span className=\"_grey\">\r\n                  {lang.ELO}: {inf.startingRating.toFixed(0)}{' '}\r\n                </span>\r\n                {inf.ratingDiff >= 0 ? `+${inf.ratingDiff.toFixed(0)}` : inf.ratingDiff.toFixed(0)}\r\n              </div>\r\n            )}\r\n            {inf.pp && (\r\n              <div className=\"important\">\r\n                <span className=\"_grey\">{lang.PP}: </span>\r\n                <span>{inf.pp.ppFixed}pp</span>\r\n              </div>\r\n            )}\r\n            {!res.isExactDate && (\r\n              <div className=\"warning\">\r\n                <FaExclamationTriangle />\r\n                {lang.MY_BEST_SCORE_WARNING}\r\n              </div>\r\n            )}\r\n            {!!res.isExactDate && (\r\n              <>\r\n                {!!res.mods && (\r\n                  <div>\r\n                    <span className=\"_grey\">{lang.MODS}: </span>\r\n                    {res.mods}\r\n                  </div>\r\n                )}\r\n                {!!res.calories && (\r\n                  <div>\r\n                    <span className=\"_grey\">{lang.CCAL}: </span>\r\n                    {res.calories}\r\n                  </div>\r\n                )}\r\n                {!!res.scoreIncrease && (\r\n                  <div>\r\n                    <span className=\"_grey\">{lang.SCORE_INCREASE}: </span>+\r\n                    {numeral(res.scoreIncrease).format('0,0')}\r\n                  </div>\r\n                )}\r\n                {res.originalChartMix && (\r\n                  <div>\r\n                    <div className=\"warning\">\r\n                      <FaExclamationTriangle />\r\n                      {lang.ORIGINAL_MIX} {res.originalChartMix}\r\n                    </div>\r\n                    {res.originalChartLabel && (\r\n                      <div>\r\n                        <span className=\"_grey\">{lang.ORIGINAL_CHART} </span>\r\n                        {res.originalChartLabel}\r\n                      </div>\r\n                    )}\r\n                    {res.originalScore && (\r\n                      <div>\r\n                        <span className=\"_grey\">{lang.ORIGINAL_SCORE} </span>\r\n                        {res.originalScore}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {res.scoreIncrease > res.score * 0.8 && lang.SIGHTREAD}\r\n              </>\r\n            )}\r\n          </div>\r\n        </Overlay>\r\n      </td>\r\n      <td className=\"grade\">\r\n        <div className=\"img-holder\">\r\n          <Grade grade={res.grade} />\r\n        </div>\r\n      </td>\r\n      {isSocketView && (\r\n        <td\r\n          className={classNames('mods', {\r\n            vj: res.isRank,\r\n            hj: res.isHJ,\r\n          })}\r\n        >\r\n          <div className=\"mods-container\">\r\n            {isSocketView &&\r\n              res.mods &&\r\n              res.mods\r\n                .split(' ')\r\n                .filter((mod) => mod.includes('AV'))\r\n                .map((avMod) => (\r\n                  <div className=\"av-mod\">\r\n                    <div className=\"av-text\">AV</div>\r\n                    <div className=\"av-number\">{avMod.replace('AV', '')}</div>\r\n                  </div>\r\n                ))}\r\n            {isSocketView &&\r\n              res.mods &&\r\n              res.mods\r\n                .split(' ')\r\n                .filter((mod) => mod.endsWith('X'))\r\n                .map((xMod) => (\r\n                  <div className=\"x-mod\">\r\n                    <div className=\"x-number\">{xMod}</div>\r\n                  </div>\r\n                ))}\r\n            {res.isRank && <div className=\"inner\">{res.isExactDate ? 'R' : 'R?'}</div>}\r\n            {res.isHJ && <div className=\"inner\">HJ</div>}\r\n          </div>\r\n        </td>\r\n      )}\r\n      <td className=\"number miss\">{res.miss}</td>\r\n      <td className=\"number bad\">{res.bad}</td>\r\n      <td className=\"number good\">{res.good}</td>\r\n      <td className=\"number great\">{res.great}</td>\r\n      <td className=\"number perfect\">{res.perfect}</td>\r\n      <td className=\"combo\">\r\n        {res.combo}\r\n        {res.combo ? 'x' : ''}\r\n      </td>\r\n      <td className=\"accuracy\">\r\n        {res.accuracy === 100 ? 100 : res.accuracy ? res.accuracy.toFixed(2) : ''}\r\n        {res.accuracy ? '%' : ''}\r\n      </td>\r\n      <td\r\n        className={classNames('date', {\r\n          latest: res.date === chart.latestScoreDate,\r\n        })}\r\n      >\r\n        {isSocketView ? (\r\n          getShortTimeAgo(res.dateObject)\r\n        ) : (\r\n          <Tooltip content={tooltipFormatter(res)} tooltipClassName=\"pumpking-tooltip\">\r\n            {getShortTimeAgo(res.dateObject)}\r\n            {res.isExactDate ? '' : '?'}\r\n          </Tooltip>\r\n        )}\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, null, null, { forwardRef: true })(React.forwardRef(Result));\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nexport default ({ type, level }) => {\r\n  return (\r\n    <div\r\n      className={classNames('chart-name', {\r\n        single: type === 'S',\r\n        singlep: type === 'SP',\r\n        doublep: type === 'DP',\r\n        double: type === 'D',\r\n        coop: type === 'COOP',\r\n      })}\r\n    >\r\n      <span className=\"chart-letter\">{type}</span>\r\n      <span className=\"chart-number\">{level}</span>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash/fp';\r\nimport { FaYoutube, FaBackward, FaForward, FaGlobeAmericas } from 'react-icons/fa';\r\nimport classNames from 'classnames';\r\nimport FlipMove from 'react-flip-move';\r\nimport queryString from 'query-string';\r\n\r\nimport { routes } from 'constants/routes';\r\nimport { DEBUG } from 'constants/env';\r\n\r\nimport Result from './Result';\r\nimport ChartLabel from './ChartLabel';\r\n\r\nimport { useLanguage } from 'utils/context/translation';\r\n\r\nconst ANIMATION_DURATION = 250;\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {\r\n    sharedCharts: state.results.sharedCharts,\r\n    playersHiddenStatus: props.playersHiddenStatus || state.preferences.data.playersHiddenStatus,\r\n  };\r\n};\r\n\r\nconst Chart = React.forwardRef(\r\n  (\r\n    {\r\n      playersHiddenStatus = {},\r\n      sharedCharts = {},\r\n      // shared\r\n      chart: chartOriginal,\r\n      // leaderboards\r\n      showHiddenPlayers = false,\r\n      showProtagonistEloChange = false,\r\n      showProtagonistPpChange = false,\r\n      uniqueSelectedNames = [],\r\n      protagonistName = null,\r\n      // socket stuff\r\n      leftProfile = {},\r\n      rightProfile = {},\r\n      isSocketView = false,\r\n    },\r\n    ref\r\n  ) => {\r\n    const [overrides, setOverrides] = useState(null);\r\n    const [isHidingPlayers, setHidingPlayers] = useState(!showHiddenPlayers);\r\n\r\n    const lang = useLanguage();\r\n\r\n    useEffect(() => {\r\n      setHidingPlayers(!showHiddenPlayers);\r\n    }, [showHiddenPlayers]);\r\n\r\n    const chart = _.first(overrides) || chartOriginal;\r\n    if (DEBUG) {\r\n      console.log(chart, overrides);\r\n    }\r\n\r\n    let topPlace = 1;\r\n    const occuredNicknames = [];\r\n    let hiddenPlayersCount = 0;\r\n    const results = chart.results.map((res, index) => {\r\n      const isPlayerHidden = isHidingPlayers && (playersHiddenStatus[res.playerId] || false);\r\n      const isSecondOccurenceInResults = occuredNicknames.includes(res.nickname);\r\n      occuredNicknames.push(res.nickname);\r\n      if (index === 0) {\r\n        topPlace = 1;\r\n      } else if (\r\n        !isSecondOccurenceInResults &&\r\n        res.score !== _.get([index - 1, 'score'], chart.results)\r\n      ) {\r\n        topPlace += 1;\r\n      }\r\n      if (isPlayerHidden) {\r\n        hiddenPlayersCount++;\r\n      }\r\n      return {\r\n        ...res,\r\n        topPlace,\r\n        isSecondOccurenceInResults,\r\n        isPlayerHidden,\r\n      };\r\n    });\r\n\r\n    const onRedoLatestResult = _.throttle(ANIMATION_DURATION + 10, (chart) => {\r\n      const newOverrides = _.drop(1, overrides);\r\n      setOverrides(_.size(newOverrides) === 1 ? null : newOverrides);\r\n    });\r\n\r\n    const onUndoLatestResult = _.throttle(ANIMATION_DURATION + 10, (chart) => {\r\n      if (_.isEmpty(results)) {\r\n        setOverrides(null);\r\n      }\r\n      const undoedResult = _.maxBy('date', results);\r\n      if (!undoedResult) return;\r\n\r\n      const undoedPlayerId = undoedResult.playerId;\r\n      const previousResults = sharedCharts[chart.sharedChartId].previousResults;\r\n      const previousPlayerResult = _.findLast(\r\n        (res) =>\r\n          res.playerId === undoedPlayerId &&\r\n          res.isRank === undoedResult.isRank &&\r\n          res.date < undoedResult.date,\r\n        previousResults\r\n      );\r\n\r\n      const newResults = _.orderBy(\r\n        'score',\r\n        'desc',\r\n        _.compact(\r\n          _.map((res) => (res.id === undoedResult.id ? previousPlayerResult : res), results)\r\n        )\r\n      );\r\n      const latestScore = _.maxBy('date', newResults);\r\n      const overrideChart = {\r\n        ...chart,\r\n        latestScoreDate: latestScore && latestScore.date,\r\n        results: newResults,\r\n      };\r\n      if (_.isEmpty(newResults)) {\r\n        setOverrides(null);\r\n      } else {\r\n        setOverrides([overrideChart, ...(overrides || [chart])]);\r\n      }\r\n    });\r\n\r\n    const isActive = !_.isEmpty(overrides);\r\n    const totalResultsCount = _.countBy((id) => !playersHiddenStatus[id], chart.eachResultPlayerIds)\r\n      .true;\r\n    const currentIndex = isActive ? 1 + totalResultsCount - _.size(overrides) : totalResultsCount;\r\n    const canUndo = !(currentIndex === 1 && totalResultsCount === 1);\r\n\r\n    // TODO: remove check from sharedCharts when SocketTracker works off results data instead of topPerSong\r\n    const interpDiff =\r\n      chart.interpolatedDifficulty ||\r\n      _.get('interpolatedDifficulty', sharedCharts[chart.sharedChartId]);\r\n\r\n    return (\r\n      <div className=\"song-block\" ref={ref}>\r\n        <div className=\"song-name\">\r\n          <ChartLabel type={chart.chartType} level={chart.chartLevel} />\r\n          {isSocketView ? (\r\n            <div className=\"song-name-text\">\r\n              {interpDiff ? `(${interpDiff.toFixed(1)}) ` : ''}\r\n              {chart.song}\r\n            </div>\r\n          ) : (\r\n            <div className=\"song-name-text\">\r\n              <NavLink\r\n                exact\r\n                to={routes.leaderboard.sharedChart.getPath({ sharedChartId: chart.sharedChartId })}\r\n              >\r\n                {chart.song}\r\n              </NavLink>{' '}\r\n              <span className=\"_grey-text\">({interpDiff && interpDiff.toFixed(1)})</span>\r\n            </div>\r\n          )}\r\n          {!isSocketView && (\r\n            <div className=\"youtube-link\">\r\n              <a\r\n                href={`https://youtube.com/results?${queryString.stringify({\r\n                  search_query: `${chart.song} ${chart.chartLabel}`.replace(/( -)|(- )/g, ' '),\r\n                })}`}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                <FaYoutube />\r\n              </a>\r\n            </div>\r\n          )}\r\n          <div className=\"_flex-fill\" />\r\n          <div className=\"right-side-block\">\r\n            {hiddenPlayersCount > 0 && (\r\n              <div\r\n                className={classNames('players-hidden-count _grey-text', {\r\n                  '_on-hover': !isSocketView,\r\n                })}\r\n              >\r\n                {lang.HIDDEN}: {hiddenPlayersCount}\r\n              </div>\r\n            )}\r\n            {(hiddenPlayersCount > 0 || !isHidingPlayers) && !isSocketView && (\r\n              <div\r\n                className=\"globe-icon _on-hover\"\r\n                onClick={() => setHidingPlayers(!isHidingPlayers)}\r\n              >\r\n                <FaGlobeAmericas />\r\n              </div>\r\n            )}\r\n            {!isSocketView && (\r\n              <div\r\n                className={classNames('undo-result-button _on-hover', {\r\n                  active: isActive,\r\n                })}\r\n              >\r\n                <FaBackward\r\n                  className={classNames('backward-btn', { disabled: !canUndo })}\r\n                  onClick={() => canUndo && onUndoLatestResult(chart)}\r\n                />\r\n                <span className=\"number\">\r\n                  {currentIndex}/{totalResultsCount}\r\n                </span>\r\n                <FaForward\r\n                  className={classNames('forward-btn', { disabled: !isActive })}\r\n                  onClick={() => isActive && onRedoLatestResult(chart)}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"charts\">\r\n          {!_.isEmpty(results) && (\r\n            <div className=\"chart\">\r\n              <div className=\"results\">\r\n                <table>\r\n                  {/* {chartIndex === 0 && (\r\n                    <thead>\r\n                      <tr>\r\n                        <th className=\"place\"></th>\r\n                        <th className=\"nickname\"></th>\r\n                        <th className=\"judge\"></th>\r\n                        <th className=\"score\">score</th>\r\n                        <th className=\"grade\"></th>\r\n                        <th className=\"number\">miss</th>\r\n                        <th className=\"number\">bad</th>\r\n                        <th className=\"number\">good</th>\r\n                        <th className=\"number\">great</th>\r\n                        <th className=\"number\">perfect</th>\r\n                        <th className=\"combo\">combo</th>\r\n                        <th className=\"accuracy\">accuracy</th>\r\n                        <th className=\"date\"></th>\r\n                      </tr>\r\n                    </thead>\r\n                  )} */}\r\n                  <FlipMove\r\n                    enterAnimation=\"fade\"\r\n                    leaveAnimation=\"fade\"\r\n                    typeName=\"tbody\"\r\n                    maintainContainerHeight\r\n                    duration={ANIMATION_DURATION}\r\n                  >\r\n                    {results.map((res, index) => {\r\n                      const isProtagonist = res.nickname === protagonistName;\r\n                      if (\r\n                        (res.isPlayerHidden && !isProtagonist) ||\r\n                        (res.isUnknownPlayer && index !== 0)\r\n                      ) {\r\n                        return null;\r\n                      }\r\n\r\n                      let placeDifference, newIndex;\r\n                      if (res.scoreIncrease && res.date === chart.latestScoreDate) {\r\n                        const prevScore = res.score - res.scoreIncrease;\r\n                        newIndex = _.findLastIndex((res) => res.score > prevScore, results);\r\n                        placeDifference = newIndex - index;\r\n                      }\r\n\r\n                      return (\r\n                        <Result\r\n                          key={res.isRank + '_' + res.nickname}\r\n                          chart={chart}\r\n                          results={results}\r\n                          res={res}\r\n                          placeDifference={placeDifference}\r\n                          showProtagonistEloChange={showProtagonistEloChange}\r\n                          showProtagonistPpChange={showProtagonistPpChange}\r\n                          uniqueSelectedNames={uniqueSelectedNames}\r\n                          protagonistName={protagonistName}\r\n                          leftProfile={leftProfile}\r\n                          rightProfile={rightProfile}\r\n                          isSocketView={isSocketView}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </FlipMove>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, null, null, { forwardRef: true })(Chart);\r\n","export const RESULTS_CACHE = 'resultsCache';","import _ from 'lodash/fp';\r\nimport localForage from 'localforage';\r\nimport queryString from 'query-string';\r\n\r\nimport { RESULTS_CACHE } from 'constants/storageKeys';\r\nimport { HOST } from 'constants/backend';\r\nimport { DEBUG } from 'constants/env';\r\n\r\nimport {\r\n  SUCCESS as RESULTS_SUCCESS,\r\n  PROFILES_UPDATE as RESULTS_PROFILES_UPDATE,\r\n  calculateRankingChanges,\r\n} from 'reducers/results';\r\n\r\nimport WorkerProfilesProcessing from 'workerize-loader!utils/workers/profilesPostProcess'; // eslint-disable-line import/no-webpack-loader-syntax\r\nimport * as profilesProcessing from 'utils/workers/profilesPostProcess';\r\n\r\nimport { fetchJson } from 'utils/fetch';\r\nimport {\r\n  labelToTypeLevel,\r\n  gradeComparator,\r\n  mapResult,\r\n  initializeProfile,\r\n  getProfileInfoFromResult,\r\n  getMaxRawScore,\r\n} from 'utils/leaderboards';\r\n\r\nconst processChartsData = (chartsData, players) => {\r\n  // let a0, a1, b0, b1, bSum, c0, c1;\r\n  // a0 = performance.now();\r\n  // bSum = 0;\r\n\r\n  //// Initialization\r\n  // Init for TOP\r\n  const getTopResultId = (result) => `${result.sharedChartId}-${result.playerId}-${result.isRank}`;\r\n  const getBestGradeResultId = (result) => `${result.sharedChartId}-${result.playerId}`;\r\n  const top = {}; // Main top scores pbject\r\n\r\n  // Battles for ELO calculation\r\n  const battles = [];\r\n  const allResults = [];\r\n\r\n  // Profiles for every player\r\n  let profiles = {};\r\n\r\n  // Loop 1\r\n  for (let sharedChartId in chartsData) {\r\n    const chartEntry = chartsData[sharedChartId];\r\n    // console.log(chartEntry);\r\n    // Initialize chart info\r\n    const chartInfo = chartEntry.chart;\r\n    const label = _.toUpper(chartInfo.chart_label);\r\n    const [chartType, chartLevel] = labelToTypeLevel(label);\r\n    top[sharedChartId] = {\r\n      song: chartInfo.track_name,\r\n      chartLabel: label,\r\n      chartLevel,\r\n      chartType,\r\n      duration: chartInfo.duration,\r\n      sharedChartId: sharedChartId,\r\n      maxTotalSteps: chartInfo.max_total_steps,\r\n      results: [],\r\n      previousResults: [],\r\n      eachResultPlayerIds: [],\r\n      latestScoreDate: _.last(chartEntry.results).gained,\r\n      maxScore: null,\r\n    };\r\n\r\n    // Parsing results\r\n    const topResults = {};\r\n    const bestGradeResults = {};\r\n    _.forEachRight((_result) => {\r\n      if (!players[_result.player]) {\r\n        // Player of this result was not found in list of players. Ignoring this result like it doesn't exist\r\n        return;\r\n      }\r\n\r\n      const chartTop = top[sharedChartId];\r\n      const result = mapResult(_result, players, chartTop, sharedChartId);\r\n      const topResultId = getTopResultId(result);\r\n      const bestGradeResultId = getBestGradeResultId(result);\r\n\r\n      // b0 = performance.now();\r\n      // Chronological results array to calculate battles order\r\n      const resultIndex = _.sortedLastIndexBy((r) => r.dateObject, result, allResults);\r\n      allResults.splice(resultIndex, 0, result);\r\n      // b1 = performance.now();\r\n      // bSum += b1 - b0;\r\n\r\n      // Recording player ids just to calculate total number of results made on this chart (and be able to filter out hidden players)\r\n      chartTop.eachResultPlayerIds.push(result.id);\r\n\r\n      // Recording best grade for every player on every chart\r\n      if (\r\n        !bestGradeResults[bestGradeResultId] ||\r\n        gradeComparator[bestGradeResults[bestGradeResultId].grade] < gradeComparator[result.grade]\r\n      ) {\r\n        if (bestGradeResults[bestGradeResultId]) {\r\n          bestGradeResults[bestGradeResultId].isBestGradeOnChart = false;\r\n        }\r\n        result.isBestGradeOnChart = true;\r\n        bestGradeResults[bestGradeResultId] = result;\r\n      }\r\n\r\n      // Splitting all results into best results and previous results\r\n      if (!topResults[topResultId]) {\r\n        const newScoreIndex = _.sortedIndexBy((r) => -r.score, result, chartTop.results);\r\n        // Sorted from higher score to lower score\r\n        chartTop.results.splice(newScoreIndex, 0, result);\r\n        topResults[topResultId] = result;\r\n\r\n        // Additional info that can be derived from best results:\r\n        if (!result.isRank) {\r\n          if (result.accuracy) {\r\n            const maxScoreCandidate = getMaxRawScore(result);\r\n            if (chartTop.maxScore < maxScoreCandidate) {\r\n              chartTop.maxScore = maxScoreCandidate;\r\n            }\r\n          } else if (chartTop.maxScore && chartTop.maxScore < result.score) {\r\n            chartTop.maxScore = result.score;\r\n          }\r\n        }\r\n        if (!result.isUnknownPlayer && !result.isIntermediateResult) {\r\n          if (!profiles[result.playerId]) {\r\n            initializeProfile(result, profiles, players);\r\n          }\r\n          getProfileInfoFromResult(result, chartTop, profiles);\r\n        }\r\n      } else {\r\n        result.isIntermediateResult = true;\r\n        // Sorted from latest to oldest\r\n        chartTop.previousResults.push(result);\r\n      }\r\n    }, chartsData[sharedChartId].results);\r\n  }\r\n\r\n  // c0 = performance.now();\r\n  allResults.forEach((res) => {\r\n    if (!res.isUnknownPlayer) {\r\n      const chartTop = top[res.sharedChartId];\r\n\r\n      for (let i = 0; i < chartTop.results.length; i++) {\r\n        const enemyResult = chartTop.results[i];\r\n        if (res.dateObject < enemyResult.dateObject) {\r\n          break;\r\n        }\r\n        if (\r\n          !enemyResult.isUnknownPlayer &&\r\n          enemyResult.isRank === res.isRank &&\r\n          enemyResult.playerId !== res.playerId &&\r\n          res.score &&\r\n          enemyResult.score\r\n        ) {\r\n          battles.push([res, enemyResult, chartTop]);\r\n        }\r\n      }\r\n    }\r\n  });\r\n  // c1 = performance.now();\r\n\r\n  // a1 = performance.now();\r\n  // console.log('Perf data:', a1 - a0, bSum, c1 - c0);\r\n  return { profiles, sharedCharts: top, battles };\r\n};\r\n\r\nconst resultsUrl = process.env.REACT_APP_SOCKET ? 'results/best/trusted' : 'results/best';\r\n\r\nconst CHARTS_LOADING = `CHARTS_LOADING`;\r\nconst CHARTS_LOADING_FINISH = `CHARTS_LOADING_FINISH`;\r\nconst SET_CHARTS = `SET_CHARTS`;\r\nconst RESET_CHARTS = `RESET_CHARTS`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: null,\r\n  lastUpdatedOn: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CHARTS_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case CHARTS_LOADING_FINISH:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case SET_CHARTS:\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n        lastUpdatedOn: action.lastUpdatedOn,\r\n      };\r\n    case RESET_CHARTS:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const setChartsData = (data, lastUpdatedOn) => ({\r\n  type: SET_CHARTS,\r\n  data,\r\n  lastUpdatedOn,\r\n});\r\nexport const startLoadingCharts = () => ({\r\n  type: CHARTS_LOADING,\r\n});\r\nexport const endLoadingCharts = () => ({\r\n  type: CHARTS_LOADING_FINISH,\r\n});\r\n\r\nexport const setAndCacheData = (data, lastUpdatedOn) => (dispatch, getState) => {\r\n  localForage.setItem(RESULTS_CACHE, { data, lastUpdatedOn });\r\n  dispatch(setChartsData(data, lastUpdatedOn));\r\n};\r\n\r\nexport const resetChartsData = () => ({\r\n  type: RESET_CHARTS,\r\n});\r\n\r\nexport const loadCachedData = () => async (dispatch, getState) => {\r\n  const cache = await localForage.getItem(RESULTS_CACHE);\r\n  if (cache) {\r\n    console.log('Found cached data from', cache.lastUpdatedOn);\r\n    dispatch(setChartsData(cache.data, cache.lastUpdatedOn));\r\n  }\r\n};\r\n\r\nexport const fetchChartsData = () => async (dispatch, getState) => {\r\n  dispatch(startLoadingCharts());\r\n\r\n  if (!getState().charts.data) {\r\n    // Check if we have any cached data\r\n    performance.mark('cache_start');\r\n    await dispatch(loadCachedData());\r\n    performance.measure('time spent on getting cached data', 'cache_start');\r\n  }\r\n\r\n  const { data: cachedData, lastUpdatedOn } = getState().charts;\r\n  const queryParams = lastUpdatedOn ? '?' + queryString.stringify({ since: lastUpdatedOn }) : '';\r\n  const url = `${HOST}/${resultsUrl}${queryParams}`;\r\n  performance.measure('time from page open to requesting /results/best');\r\n  performance.mark('request_start');\r\n  const { charts: fetchedData, lastUpdatedAt: newLastUpdated } = await dispatch(fetchJson({ url }));\r\n  performance.measure('time spent on requesting /results/best', 'request_start');\r\n  const newData = {\r\n    ...(cachedData || {}),\r\n    ...fetchedData,\r\n  };\r\n\r\n  await dispatch(setAndCacheData(newData, newLastUpdated));\r\n\r\n  const players = getState().players.data;\r\n  performance.mark('process_start');\r\n  const { profiles, sharedCharts, battles } = processChartsData(newData, players);\r\n  performance.measure('time spent building charts with results', 'process_start');\r\n\r\n  performance.mark('display_start');\r\n  dispatch({\r\n    type: RESULTS_SUCCESS,\r\n    data: _.values(sharedCharts),\r\n    players: _.flow(\r\n      _.toPairs,\r\n      _.map(([id, player]) => ({ ...player, id: _.toInteger(id) }))\r\n    )(players),\r\n    profiles,\r\n    sharedCharts,\r\n  });\r\n  dispatch(endLoadingCharts());\r\n  performance.measure('time spent rendering charts', 'display_start');\r\n  performance.measure('time from page open to displaying first data');\r\n\r\n  // Parallelized calculation of ELO and profile data\r\n  const { tracklist } = getState();\r\n  const input = { sharedCharts, profiles, tracklist, battles, debug: DEBUG };\r\n\r\n  performance.mark('elo_calc_start');\r\n  let output;\r\n  if (window.Worker) {\r\n    const worker = new WorkerProfilesProcessing();\r\n    output = await worker.getProcessedProfiles(input);\r\n    worker.terminate();\r\n  } else {\r\n    output = profilesProcessing.getProcessedProfiles(input);\r\n  }\r\n  performance.measure('time spent calculating elo/pp and graphs for profiles', 'elo_calc_start');\r\n\r\n  DEBUG && console.log(output.logText);\r\n  DEBUG &&\r\n    console.log(\r\n      'Processed profiles:',\r\n      Object.values(output.profiles)\r\n        .filter((q) => q.pp)\r\n        .sort((a, b) => b.pp.pp - a.pp.pp)\r\n    );\r\n  performance.mark('display2_start');\r\n  dispatch({\r\n    type: RESULTS_PROFILES_UPDATE,\r\n    ...output,\r\n  });\r\n  dispatch(calculateRankingChanges(output.profiles));\r\n  performance.measure('time spent rendering update with elo/pp', 'display2_start');\r\n  performance.measure('time from page open to displaying everything');\r\n\r\n  console.log(\r\n    performance\r\n      .getEntriesByType('measure')\r\n      .map((x) => `${x.name}: ${x.duration} ms`)\r\n      .join('\\n')\r\n  );\r\n  performance.clearMarks();\r\n  performance.clearMeasures();\r\n};\r\n","import _ from 'lodash/fp';\r\nimport { createSelector } from 'reselect';\r\nimport matchSorter from 'match-sorter';\r\n\r\nimport { SORT, CHART_MIN_MAX, DURATION_DEFAULT, RANK_FILTER } from 'constants/leaderboard';\r\nimport { defaultFilter } from 'reducers/results';\r\n\r\nexport const playersSelector = createSelector(\r\n  (state) => state.results.players,\r\n  (state) => state.user.data.player.id,\r\n  (players, playerId) =>\r\n    _.flow(\r\n      _.toPairs,\r\n      _.map(([, { nickname, arcade_name, id, region }]) => ({\r\n        label: `${nickname} (${arcade_name})`,\r\n        value: nickname,\r\n        isCurrentPlayer: playerId === id,\r\n      })),\r\n      _.sortBy((it) => (it.isCurrentPlayer ? '!' : _.toLower(it.label)))\r\n    )(players)\r\n);\r\n\r\nconst filterCharts = (filter, rows) => {\r\n  const range = _.getOr(CHART_MIN_MAX, 'range', filter);\r\n  const type = _.getOr(null, 'type', filter);\r\n  const duration = _.getOr(DURATION_DEFAULT, 'duration', filter);\r\n\r\n  return _.filter((row) => {\r\n    if (duration !== DURATION_DEFAULT && !duration.includes(row.duration)) {\r\n      return false;\r\n    }\r\n    return (\r\n      row.chartLevel >= range[0] &&\r\n      row.chartLevel <= range[1] &&\r\n      (!type || row.chartType.startsWith(type))\r\n    );\r\n  }, rows);\r\n};\r\n\r\nconst getFilteredData = (\r\n  data,\r\n  sharedCharts,\r\n  filter = defaultFilter,\r\n  resultInfo = {},\r\n  preferences\r\n) => {\r\n  const start = performance.now();\r\n  const playersHiddenStatus = preferences.playersHiddenStatus;\r\n  const showHidden = filter.showHiddenFromPreferences;\r\n  const names = _.map('value', filter.players);\r\n  const namesOr = _.map('value', filter.playersOr);\r\n  const namesNot = _.map('value', filter.playersNot);\r\n  const sortingType = _.get('value', filter.sortingType);\r\n  const rankFilter = _.get('value', filter.rank) || RANK_FILTER.SHOW_ALL;\r\n  const protagonist = [\r\n    SORT.PROTAGONIST,\r\n    SORT.RANK_ASC,\r\n    SORT.RANK_DESC,\r\n    SORT.PP_ASC,\r\n    SORT.PP_DESC,\r\n    SORT.NEW_SCORES_PLAYER,\r\n  ].includes(sortingType)\r\n    ? _.get('value', filter.protagonist)\r\n    : null;\r\n  const excludeAntagonists = _.map('value', filter.excludeAntagonists);\r\n\r\n  const defaultSorting = [\r\n    _.orderBy(\r\n      [\r\n        (song) =>\r\n          _.max(\r\n            _.map(\r\n              (res) =>\r\n                showHidden || !playersHiddenStatus[res.playerId] ? res.dateObject.getTime() : 0,\r\n              song.results\r\n            )\r\n          ),\r\n      ],\r\n      ['desc']\r\n    ),\r\n  ];\r\n  const newScoresProtagonistSorting = !protagonist\r\n    ? defaultSorting\r\n    : [\r\n        _.orderBy(\r\n          [\r\n            (song) =>\r\n              _.max(\r\n                _.map(\r\n                  (res) => (res.nickname === protagonist ? res.dateObject.getTime() : 0),\r\n                  song.results\r\n                )\r\n              ),\r\n          ],\r\n          ['desc']\r\n        ),\r\n      ];\r\n  const protagonistSorting = [\r\n    _.filter((row) => _.map('nickname', row.results).includes(protagonist)),\r\n    _.map((row) => {\r\n      const protIndex = _.findIndex({ nickname: protagonist }, row.results);\r\n      const protScore = row.results[protIndex].score;\r\n      const enemies = _.flow([\r\n        _.take(protIndex),\r\n        _.uniqBy('nickname'),\r\n        _.remove((res) => excludeAntagonists.includes(res.nickname) || res.score === protScore),\r\n      ])(row.results);\r\n      const distance = Math.sqrt(\r\n        _.reduce((dist, enemy) => dist + (enemy.score / protScore - 0.99) ** 2, 0, enemies)\r\n      );\r\n      return {\r\n        ...row,\r\n        distanceFromProtagonist: distance,\r\n      };\r\n    }),\r\n    _.orderBy(['distanceFromProtagonist'], ['desc']),\r\n  ];\r\n  const getPpSorting = (field, direction = 'desc') => [\r\n    _.filter((row) => _.map('nickname', row.results).includes(protagonist)),\r\n    _.orderBy(\r\n      [\r\n        (row) => {\r\n          const result = _.find({ nickname: protagonist }, row.results);\r\n          const info = resultInfo[result.id] || {};\r\n          return _.getOr(direction === 'desc' ? -Infinity : Infinity, field, info);\r\n        },\r\n      ],\r\n      [direction]\r\n    ),\r\n  ];\r\n  const getEloSorting = (direction) => [\r\n    _.filter((row) => _.map('nickname', row.results).includes(protagonist)),\r\n    _.orderBy(\r\n      [\r\n        (row) => {\r\n          const score = _.find({ nickname: protagonist }, row.results);\r\n          const info = resultInfo[score.id];\r\n          return _.getOr(direction === 'asc' ? Infinity : -Infinity, 'ratingDiff', info);\r\n        },\r\n      ],\r\n      [direction]\r\n    ),\r\n  ];\r\n  const getDiffSorting = (direction = 'desc') => [\r\n    _.orderBy(\r\n      [\r\n        (row) => {\r\n          const chartInfo = sharedCharts[row.sharedChartId];\r\n          return _.getOr(_.toNumber(row.chartLevel), 'interpolatedDifficulty', chartInfo);\r\n        },\r\n      ],\r\n      [direction]\r\n    ),\r\n  ];\r\n  const sortingFunctions =\r\n    {\r\n      [SORT.DEFAULT]: defaultSorting,\r\n      [SORT.NEW_SCORES_PLAYER]: newScoresProtagonistSorting,\r\n      [SORT.PROTAGONIST]: protagonistSorting,\r\n      [SORT.RANK_ASC]: getEloSorting('asc'),\r\n      [SORT.RANK_DESC]: getEloSorting('desc'),\r\n      [SORT.PP_ASC]: getPpSorting('pp.ppRatio', 'asc'),\r\n      [SORT.PP_DESC]: getPpSorting('pp.pp'),\r\n      [SORT.EASIEST_SONGS]: getDiffSorting('asc'),\r\n      [SORT.HARDEST_SONGS]: getDiffSorting('desc'),\r\n    }[sortingType] || defaultSorting;\r\n\r\n  const result = _.flow(\r\n    _.compact([\r\n      _.map((row) => {\r\n        let latestScoreDate = null;\r\n        const occuredIds = [];\r\n        const results = row.results.filter((res, index) => {\r\n          const isVisibleWithRankFilter =\r\n            !rankFilter || rankFilter === RANK_FILTER.SHOW_ALL\r\n              ? true\r\n              : rankFilter === RANK_FILTER.SHOW_ONLY_RANK\r\n              ? res.isRank\r\n              : rankFilter === RANK_FILTER.SHOW_ONLY_NORANK\r\n              ? !res.isRank\r\n              : rankFilter === RANK_FILTER.SHOW_BEST\r\n              ? !occuredIds.includes(res.playerId)\r\n              : true;\r\n          rankFilter === RANK_FILTER.SHOW_BEST && occuredIds.push(res.playerId);\r\n\r\n          const isVisible = (!res.isUnknownPlayer || index === 0) && isVisibleWithRankFilter;\r\n          if (isVisible && (!latestScoreDate || latestScoreDate < res.date)) {\r\n            latestScoreDate = res.date;\r\n          }\r\n          return isVisible;\r\n        }, row.results);\r\n        return {\r\n          ...row,\r\n          latestScoreDate,\r\n          results,\r\n        };\r\n      }),\r\n      filter.chartRange && ((items) => filterCharts(filter.chartRange, items)),\r\n      (names.length || namesOr.length || namesNot.length) &&\r\n        _.filter((row) => {\r\n          const rowNames = _.map('nickname', row.results);\r\n          return (\r\n            (!names.length || _.every((name) => rowNames.includes(name), names)) &&\r\n            (!namesOr.length || _.some((name) => rowNames.includes(name), namesOr)) &&\r\n            (!namesNot.length || !_.some((name) => rowNames.includes(name), namesNot))\r\n          );\r\n        }),\r\n      _.filter((row) => _.size(row.results)),\r\n      ...sortingFunctions,\r\n      filter.song && ((items) => matchSorter(items, filter.song.trim(), { keys: ['song'] })),\r\n    ])\r\n  )(data);\r\n  console.log('Sorting took', performance.now() - start, 'ms');\r\n  return result;\r\n};\r\n\r\nexport const filteredDataSelector = createSelector(\r\n  (state) => state.results.data,\r\n  (state) => state.results.sharedCharts,\r\n  (state) => state.results.filter,\r\n  (state) => state.results.resultInfo,\r\n  (state) => state.preferences.data,\r\n  getFilteredData\r\n);\r\n\r\nexport const sharedChartDataSelector = createSelector(\r\n  (state) => state.results.data,\r\n  (state, props) => props.match.params.sharedChartId,\r\n  (data, sharedChartId) => {\r\n    // eslint-disable-next-line eqeqeq\r\n    const chart = data.filter((chart) => chart.sharedChartId == sharedChartId);\r\n    // console.log(chart);\r\n    return chart;\r\n  }\r\n);\r\n","import React, { Component } from 'react';\r\nimport toBe from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash/fp';\r\nimport Select from 'react-select';\r\nimport classNames from 'classnames';\r\nimport localForage from 'localforage';\r\nimport { FaRedoAlt, FaSearch, FaArrowLeft } from 'react-icons/fa';\r\n\r\n// styles\r\nimport './leaderboard.scss';\r\n\r\n// components\r\nimport ToggleButton from 'components/Shared/ToggleButton/ToggleButton';\r\nimport Loader from 'components/Shared/Loader';\r\nimport Input from 'components/Shared/Input/Input';\r\nimport Toggle from 'components/Shared/Toggle/Toggle';\r\nimport CollapsibleBar from 'components/Shared/CollapsibleBar';\r\nimport ChartFilter from './ChartFilter';\r\nimport PresetsControl from './PresetsControl';\r\nimport Chart from './Chart';\r\n\r\n// constants\r\nimport { SORT, RANK_FILTER } from 'constants/leaderboard';\r\n\r\n// reducers\r\nimport { fetchChartsData } from 'reducers/charts';\r\nimport { setFilter, resetFilter, defaultFilter } from 'reducers/results';\r\nimport { selectPreset, openPreset } from 'reducers/presets';\r\n\r\n// utils\r\nimport { colorsArray } from 'utils/colors';\r\nimport { playersSelector, filteredDataSelector, sharedChartDataSelector } from 'reducers/selectors';\r\nimport { Language } from 'utils/context/translation';\r\n\r\n// code\r\nconst getSortingOptions = _.memoize((lang) => [\r\n  {\r\n    label: lang.NEW_TO_OLD_SCORES,\r\n    value: SORT.DEFAULT,\r\n  },\r\n  {\r\n    label: lang.NEW_TO_OLD_SCORES_OF_A_PLAYER,\r\n    value: SORT.NEW_SCORES_PLAYER,\r\n  },\r\n  // {\r\n  //   label: lang.SCORE_DIFFERENCE,\r\n  //   value: SORT.PROTAGONIST,\r\n  // },\r\n  {\r\n    label: lang.WORST_TO_BEST_BY_ELO,\r\n    value: SORT.RANK_ASC,\r\n  },\r\n  {\r\n    label: lang.BEST_TO_WORST_BY_ELO,\r\n    value: SORT.RANK_DESC,\r\n  },\r\n  {\r\n    label: lang.WORST_TO_BEST_BY_PP,\r\n    value: SORT.PP_ASC,\r\n  },\r\n  {\r\n    label: lang.BEST_TO_WORST_BY_PP,\r\n    value: SORT.PP_DESC,\r\n  },\r\n  {\r\n    label: lang.EASY_TO_HARD_CHARTS,\r\n    value: SORT.EASIEST_SONGS,\r\n  },\r\n  {\r\n    label: lang.HARD_TO_EASY_CHARTS,\r\n    value: SORT.HARDEST_SONGS,\r\n  },\r\n]);\r\n\r\nconst getRankOptions = _.memoize((lang) => [\r\n  {\r\n    label: lang.SHOW_ALL_SCORES,\r\n    value: RANK_FILTER.SHOW_ALL,\r\n  },\r\n  {\r\n    label: lang.BEST_SCORE,\r\n    value: RANK_FILTER.SHOW_BEST,\r\n  },\r\n  {\r\n    label: lang.RANK_ONLY,\r\n    value: RANK_FILTER.SHOW_ONLY_RANK,\r\n  },\r\n  {\r\n    label: lang.ONLY_NO_RANK,\r\n    value: RANK_FILTER.SHOW_ONLY_NORANK,\r\n  },\r\n]);\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  const isChartView = !!props.match.params.sharedChartId;\r\n\r\n  return {\r\n    isChartView,\r\n    players: playersSelector(state),\r\n    filteredData: isChartView ? sharedChartDataSelector(state, props) : filteredDataSelector(state),\r\n    filter: isChartView ? defaultFilter : state.results.filter,\r\n    error: state.charts.error || state.tracklist.error,\r\n    isLoading: state.charts.isLoading || state.tracklist.isLoading,\r\n    presets: state.presets.presets,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  fetchChartsData,\r\n  setFilter,\r\n  resetFilter,\r\n  selectPreset,\r\n  openPreset,\r\n};\r\n\r\nclass Leaderboard extends Component {\r\n  static propTypes = {\r\n    match: toBe.object,\r\n    error: toBe.object,\r\n    isLoading: toBe.bool.isRequired,\r\n  };\r\n\r\n  state = { showItemsCount: 20 };\r\n\r\n  setFilter = _.curry((name, value) => {\r\n    const filter = { ...this.props.filter, [name]: value };\r\n    this.props.setFilter(filter);\r\n    localForage.setItem('filter', filter);\r\n  });\r\n\r\n  resetFilter = () => {\r\n    this.props.resetFilter();\r\n    localForage.setItem('filter', defaultFilter);\r\n  };\r\n\r\n  onRefresh = () => {\r\n    const { isLoading } = this.props;\r\n    !isLoading && this.props.fetchChartsData();\r\n  };\r\n\r\n  onTypeSongName = _.debounce(300, (value) => {\r\n    this.setFilter('song', value);\r\n  });\r\n\r\n  renderSimpleSearch() {\r\n    const { isLoading, filter } = this.props;\r\n    return (\r\n      <Language.Consumer>\r\n        {(lang) => (\r\n          <div className=\"simple-search\">\r\n            <div className=\"song-name _margin-right _margin-bottom\">\r\n              <Input\r\n                value={filter.song || ''}\r\n                placeholder={lang.SONG_NAME_PLACEHOLDER}\r\n                className=\"form-control\"\r\n                onChange={this.onTypeSongName}\r\n              />\r\n            </div>\r\n            <div className=\"chart-range _margin-right _margin-bottom\">\r\n              <ChartFilter\r\n                filterValue={filter.chartRange}\r\n                onChange={this.setFilter('chartRange')}\r\n              />\r\n            </div>\r\n            <div className=\"_flex-fill\" />\r\n            <div className=\"_flex-row _margin-bottom\">\r\n              <PresetsControl />\r\n              <button\r\n                className=\"btn btn-sm btn-dark btn-icon _margin-right\"\r\n                onClick={this.resetFilter}\r\n              >\r\n                <FaRedoAlt /> {lang.RESET_FILTERS}\r\n              </button>\r\n              <button\r\n                disabled={isLoading}\r\n                className=\"btn btn-sm btn-dark btn-icon\"\r\n                onClick={this.onRefresh}\r\n              >\r\n                <FaSearch /> {lang.REFRESH}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Language.Consumer>\r\n    );\r\n  }\r\n\r\n  renderFilters() {\r\n    const { players, filter } = this.props;\r\n    return (\r\n      <Language.Consumer>\r\n        {(lang) => (\r\n          <div className=\"filters\">\r\n            <div className=\"people-filters\">\r\n              <label className=\"label\">{lang.SHOW_CHARTS_PLAYED_BY}</label>\r\n              <div className=\"players-block\">\r\n                <div className=\"_margin-right\">\r\n                  <label className=\"label\">{lang.EACH_OF_THESE}</label>\r\n                  <Select\r\n                    closeMenuOnSelect={false}\r\n                    className=\"select players\"\r\n                    classNamePrefix=\"select\"\r\n                    placeholder={lang.PLAYERS_PLACEHOLDER}\r\n                    isMulti\r\n                    options={players}\r\n                    value={_.getOr(null, 'players', filter)}\r\n                    onChange={this.setFilter('players')}\r\n                  />\r\n                </div>\r\n                <div className=\"_margin-right\">\r\n                  <label className=\"label\">{lang.AND_ANY_OF_THESE}</label>\r\n                  <Select\r\n                    closeMenuOnSelect={false}\r\n                    className=\"select players\"\r\n                    classNamePrefix=\"select\"\r\n                    placeholder={lang.PLAYERS_PLACEHOLDER}\r\n                    isMulti\r\n                    options={players}\r\n                    value={_.getOr(null, 'playersOr', filter)}\r\n                    onChange={this.setFilter('playersOr')}\r\n                  />\r\n                </div>\r\n                <div className=\"_margin-right\">\r\n                  <label className=\"label\">{lang.AND_NONE_OF_THESE}</label>\r\n                  <Select\r\n                    closeMenuOnSelect={false}\r\n                    className=\"select players\"\r\n                    classNamePrefix=\"select\"\r\n                    placeholder={lang.PLAYERS_PLACEHOLDER}\r\n                    isMulti\r\n                    options={players}\r\n                    value={_.getOr(null, 'playersNot', filter)}\r\n                    onChange={this.setFilter('playersNot')}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"people-filters\">\r\n              <div className=\"players-block\">\r\n                <div className=\"_margin-right\">\r\n                  <label className=\"label\">{lang.SHOW_RANK}</label>\r\n                  <Select\r\n                    closeMenuOnSelect={false}\r\n                    className=\"select\"\r\n                    classNamePrefix=\"select\"\r\n                    placeholder=\"...\"\r\n                    options={getRankOptions(lang)}\r\n                    value={_.getOr(null, 'rank', filter) || RANK_FILTER.SHOW_ALL}\r\n                    onChange={this.setFilter('rank')}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <Toggle\r\n                checked={_.getOr(false, 'showHiddenFromPreferences', filter)}\r\n                onChange={this.setFilter('showHiddenFromPreferences')}\r\n              >\r\n                {lang.SHOW_HIDDEN_PLAYERS}\r\n              </Toggle>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Language.Consumer>\r\n    );\r\n  }\r\n\r\n  renderSortings() {\r\n    const { players, filter } = this.props;\r\n    return (\r\n      <Language.Consumer>\r\n        {(lang) => (\r\n          <div className=\"sortings\">\r\n            <div>\r\n              <label className=\"label\">{lang.SORTING_LABEL}</label>\r\n              <Select\r\n                placeholder={lang.SORTING_PLACEHOLDER}\r\n                className=\"select\"\r\n                classNamePrefix=\"select\"\r\n                isClearable={false}\r\n                options={getSortingOptions(lang)}\r\n                value={_.getOr(getSortingOptions(lang)[0], 'sortingType', filter)}\r\n                onChange={this.setFilter('sortingType')}\r\n              />\r\n            </div>\r\n            {[\r\n              SORT.PROTAGONIST,\r\n              SORT.RANK_ASC,\r\n              SORT.RANK_DESC,\r\n              SORT.PP_ASC,\r\n              SORT.PP_DESC,\r\n              SORT.NEW_SCORES_PLAYER,\r\n            ].includes(_.get('sortingType.value', filter)) && (\r\n              <div>\r\n                <label className=\"label\">{lang.PLAYER_LABEL}</label>\r\n                <Select\r\n                  className={classNames('select players', {\r\n                    'red-border': !_.get('protagonist', filter),\r\n                  })}\r\n                  classNamePrefix=\"select\"\r\n                  placeholder={lang.PLAYERS_PLACEHOLDER}\r\n                  options={players}\r\n                  value={_.getOr(null, 'protagonist', filter)}\r\n                  onChange={this.setFilter('protagonist')}\r\n                />\r\n              </div>\r\n            )}\r\n            {[SORT.PROTAGONIST].includes(_.get('sortingType.value', filter)) && (\r\n              <div>\r\n                <label className=\"label\">{lang.EXCLUDE_FROM_COMPARISON}</label>\r\n                <Select\r\n                  closeMenuOnSelect={false}\r\n                  className=\"select players\"\r\n                  classNamePrefix=\"select\"\r\n                  placeholder={lang.PLAYERS_PLACEHOLDER}\r\n                  options={players}\r\n                  isMulti\r\n                  value={_.getOr([], 'excludeAntagonists', filter)}\r\n                  onChange={this.setFilter('excludeAntagonists')}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Language.Consumer>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, isChartView, filteredData, error, filter, presets, history } = this.props;\r\n\r\n    const { showItemsCount } = this.state;\r\n    const canShowMore = filteredData.length > showItemsCount;\r\n    const visibleData = _.slice(0, showItemsCount, filteredData);\r\n\r\n    const sortingType = _.get('sortingType.value', filter);\r\n    const showProtagonistEloChange = [SORT.RANK_ASC, SORT.RANK_DESC].includes(sortingType);\r\n    const showProtagonistPpChange = [SORT.PP_ASC, SORT.PP_DESC].includes(sortingType);\r\n    const highlightProtagonist = [\r\n      SORT.PROTAGONIST,\r\n      SORT.RANK_ASC,\r\n      SORT.RANK_DESC,\r\n      SORT.PP_ASC,\r\n      SORT.PP_DESC,\r\n      SORT.NEW_SCORES_PLAYER,\r\n    ].includes(sortingType);\r\n    const protagonistName = _.get('protagonist.value', filter);\r\n    const uniqueSelectedNames = _.slice(\r\n      0,\r\n      colorsArray.length,\r\n      _.uniq(\r\n        _.compact([\r\n          highlightProtagonist && protagonistName,\r\n          ..._.map('value', filter.players),\r\n          ..._.map('value', filter.playersOr),\r\n        ])\r\n      )\r\n    );\r\n\r\n    return (\r\n      <Language.Consumer>\r\n        {(lang) => (\r\n          <div className=\"leaderboard-page\">\r\n            <div className=\"content\">\r\n              {isChartView && (\r\n                <div className=\"simple-search\">\r\n                  {/* <NavLink exact to={routes.leaderboard.path}> */}\r\n                  <button className=\"btn btn-sm btn-dark btn-icon\" onClick={() => history.goBack()}>\r\n                    <FaArrowLeft /> {lang.BACK_BUTTON}\r\n                  </button>\r\n                  {/* </NavLink> */}\r\n                </div>\r\n              )}\r\n              {!isChartView && (\r\n                <>\r\n                  <div className=\"search-block\">\r\n                    {this.renderSimpleSearch()}\r\n                    <CollapsibleBar title={lang.FILTERS}>{this.renderFilters()}</CollapsibleBar>\r\n                    <CollapsibleBar title={lang.SORTING}>{this.renderSortings()}</CollapsibleBar>\r\n                  </div>\r\n                  {!!presets.length && (\r\n                    <div className=\"presets-buttons\">\r\n                      <span>{lang.PRESETS}:</span>\r\n                      {presets.map((preset) => (\r\n                        <ToggleButton\r\n                          key={preset.name}\r\n                          text={preset.name}\r\n                          className=\"btn btn-sm btn-dark _margin-right\"\r\n                          active={_.get('filter', preset) === filter}\r\n                          onToggle={() => {\r\n                            this.props.selectPreset(preset);\r\n                            this.props.openPreset();\r\n                          }}\r\n                        ></ToggleButton>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                </>\r\n              )}\r\n              <div className=\"top-list\">\r\n                {isLoading && <Loader />}\r\n                {_.isEmpty(filteredData) && !isLoading && (error ? error.message : lang.NO_RESULTS)}\r\n                {!isLoading &&\r\n                  visibleData.map((chart, chartIndex) => {\r\n                    return (\r\n                      <Chart\r\n                        showHiddenPlayers={isChartView || filter.showHiddenFromPreferences}\r\n                        key={chart.sharedChartId}\r\n                        chart={chart}\r\n                        chartIndex={chartIndex}\r\n                        showProtagonistEloChange={showProtagonistEloChange}\r\n                        showProtagonistPpChange={showProtagonistPpChange}\r\n                        uniqueSelectedNames={uniqueSelectedNames}\r\n                        protagonistName={protagonistName}\r\n                      />\r\n                    );\r\n                  })}\r\n                {!isLoading && canShowMore && (\r\n                  <button\r\n                    className=\"btn btn-sm btn-primary\"\r\n                    onClick={() =>\r\n                      this.setState((state) => ({ showItemsCount: state.showItemsCount + 10 }))\r\n                    }\r\n                  >\r\n                    {lang.SHOW_MORE}\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Language.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Leaderboard);\r\n","import React from 'react';\r\nimport _ from 'lodash/fp';\r\n// import numeral from 'numeral';\r\nimport classNames from 'classnames';\r\nimport { GiQueenCrown } from 'react-icons/gi';\r\nimport { FaAngleDoubleUp, FaAngleDoubleDown } from 'react-icons/fa';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { routes } from 'constants/routes';\r\n\r\nimport Grade from 'components/Shared/Grade';\r\nimport Loader from 'components/Shared/Loader';\r\nimport Flag from 'components/Shared/Flag';\r\nimport Toggle from 'components/Shared/Toggle/Toggle';\r\n// import CheckBox from 'components/Shared/CheckBox';\r\n\r\nimport { getRankImg } from 'utils/exp';\r\n\r\nexport default function RankingList({ ranking, isLoading, preferences, updatePreferences }) {\r\n  return (\r\n    <div className=\"ranking-list\">\r\n      {_.isEmpty(ranking) && !isLoading && 'ничего не найдено'}\r\n      {isLoading && <Loader />}\r\n      {!isLoading && (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"place\"></th>\r\n              <th className=\"change\"></th>\r\n              <th className=\"exp-rank\">rank</th>\r\n              <th className=\"name\">name</th>\r\n              <th className=\"name name-piu\">piu name</th>\r\n              <th className=\"rating\">elo</th>\r\n              <th className=\"rating-change-cell\"></th>\r\n              <th className=\"rating\">pp</th>\r\n              {/* <th className=\"total-score\">total score</th> */}\r\n              <th className=\"grades sss\">\r\n                <Grade grade=\"SSS\" />\r\n              </th>\r\n              <th className=\"grades ss\">\r\n                <Grade grade=\"SS\" />\r\n              </th>\r\n              <th className=\"grades s\">\r\n                <Grade grade=\"S\" />\r\n              </th>\r\n              <th className=\"grades a\">\r\n                <Grade grade=\"A+\" />\r\n              </th>\r\n              <th className=\"grades b\">\r\n                <Grade grade=\"B\" />\r\n              </th>\r\n              <th className=\"grades c\">\r\n                <Grade grade=\"C\" />\r\n              </th>\r\n              <th className=\"grades d\">\r\n                <Grade grade=\"D\" />\r\n              </th>\r\n              <th className=\"grades f\">\r\n                <Grade grade=\"F\" />\r\n              </th>\r\n              <th className=\"playcount\">scores</th>\r\n              {/* <th className=\"calories\">kcal</th> */}\r\n              <th className=\"accuracy\">accuracy</th>\r\n              <th className=\"hide-col\"> </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {ranking.map((player, playerIndex) => {\r\n              const isHidden = preferences.playersHiddenStatus[player.id];\r\n              if (isHidden && !preferences.showHiddenPlayersInRanking) {\r\n                return null;\r\n              }\r\n              return (\r\n                <tr\r\n                  className={classNames('player', { 'hidden-player': isHidden })}\r\n                  key={player.name}\r\n                >\r\n                  <td className=\"place\">\r\n                    {playerIndex === 0 ? <GiQueenCrown /> : `#${playerIndex + 1}`}\r\n                  </td>\r\n                  <td className=\"change\">\r\n                    {player.change > 0 && (\r\n                      <div className=\"change-holder up\">\r\n                        <span>{player.change}</span>\r\n                        <FaAngleDoubleUp />\r\n                      </div>\r\n                    )}\r\n                    {player.change < 0 && (\r\n                      <div className=\"change-holder down\">\r\n                        <span>{-player.change}</span>\r\n                        <FaAngleDoubleDown />\r\n                      </div>\r\n                    )}\r\n                    {!!player.change && _.isString(player.change) && (\r\n                      <div className=\"change-holder text\">\r\n                        <span>{player.change}</span>\r\n                      </div>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"exp-rank\">{getRankImg(player.expRank)}</td>\r\n                  <td className=\"name\">\r\n                    <div className=\"name-container\">\r\n                      <Flag region={player.region} />\r\n                      <NavLink exact to={routes.profile.getPath({ id: player.id })}>\r\n                        {player.name}\r\n                      </NavLink>\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"name name-piu\">\r\n                    <NavLink exact to={routes.profile.getPath({ id: player.id })}>\r\n                      {player.nameArcade}\r\n                    </NavLink>\r\n                  </td>\r\n                  <td className=\"rating\">{player.rating}</td>\r\n                  <td className=\"rating-change-cell\">\r\n                    {!!player.prevRating && player.prevRating !== player.rating && (\r\n                      <span\r\n                        className={classNames('rating-change', {\r\n                          down: player.prevRating > player.rating,\r\n                          up: player.prevRating < player.rating,\r\n                        })}\r\n                      >\r\n                        {player.prevRating < player.rating ? '+' : ''}\r\n                        {player.rating - player.prevRating}\r\n                      </span>\r\n                    )}\r\n                  </td>\r\n                  <td className=\"rating secondary\">{Math.round(player.pp.pp)}</td>\r\n                  <td className=\"grades sss\">{player.grades.SSS}</td>\r\n                  <td className=\"grades ss\">{player.grades.SS}</td>\r\n                  <td className=\"grades s\">{player.grades.S}</td>\r\n                  <td className=\"grades a\">{player.grades.A}</td>\r\n                  <td className=\"grades b\">{player.grades.B}</td>\r\n                  <td className=\"grades c\">{player.grades.C}</td>\r\n                  <td className=\"grades d\">{player.grades.D}</td>\r\n                  <td className=\"grades f\">{player.grades.F}</td>\r\n                  <td className=\"playcount\">{player.count}</td>\r\n                  <td className=\"accuracy\">\r\n                    {player.accuracy ? `${player.accuracy.toFixed(2)}%` : ''}\r\n                  </td>\r\n                  <td className=\"hide-col\">\r\n                    <Toggle\r\n                      onChange={() => {\r\n                        updatePreferences(\r\n                          _.set(['playersHiddenStatus', player.id], !isHidden, preferences)\r\n                        );\r\n                      }}\r\n                      checked={!isHidden}\r\n                    />\r\n                    {/* <CheckBox\r\n                      onChange={() => {\r\n                        updatePreferences(\r\n                          _.set(['playersHiddenStatus', player.id], !isHidden, preferences)\r\n                        );\r\n                      }}\r\n                      isChecked={isHidden}\r\n                    /> */}\r\n                  </td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function RankingFaq() {\r\n  return (\r\n    <div className=\"faq\">\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">Q: Как считается рейтинг?</div>\r\n        <div className=\"answer\">\r\n          A: Используется <a href=\"https://en.wikipedia.org/wiki/Elo_rating_system\">рейтинг Эло</a>,\r\n          широко используемый в шахматах и других играх, слегка модицированный под условия игры на\r\n          пампе. Средний рейтинг - 1000. Коэффициент К зависит от уровня чарта (более сложные чарты\r\n          сильнее влияют на рейтинг). Количество очков влияет на заработанный рейтинг (маленький\r\n          отрыв от противника не даст так много очков как большой отрыв).\r\n        </div>\r\n      </div>\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">Q: Что такое рр и чем оно отличается от эло?</div>\r\n        <div className=\"answer\">\r\n          A: РР (performance points) - система очков, взятая из osu!. Эло - система рейтинга, взятая\r\n          из шахмат. Основные отличия:\r\n          <br />\r\n          С эло твои очки зависят от других игроков на этом чарте, с рр твои очки зависят только от\r\n          того, как ты сыграешь чарт.\r\n          <br />\r\n          С эло можно потерять очки или заставить другого игрока их потерять, с рр можно только\r\n          набирать больше очков.\r\n          <br />\r\n          С эло намного проще кого-то обогнать, с рр люди редко меняются местами в рейтинге.\r\n          <br />\r\n          Эло показывает кто кого обыгрывает в последнее время, а рр показывает, кто на каком\r\n          примерно уровне по скиллу.\r\n          <br />\r\n          Сейчас рейтинг сортируется по Эло. РР выступает в качестве дополнительной инфы для\r\n          интереса, плюс используется как стартовое значение Эло.\r\n        </div>\r\n      </div>\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">\r\n          Q: Система Эло используется для игр 1 на 1, как она используется на пампе, где на одном\r\n          чарте играет много игроков?\r\n        </div>\r\n        <div className=\"answer\">\r\n          A: Рекорды на одном чарте делятся на несколько игр 1 на 1. Если есть 3 игрока: A, B, C; то\r\n          считается, что было 3 отдельные игры: A vs B, A vs C, B vs C.\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">Q: Как считается сумма рр?</div>\r\n        <div className=\"answer\">\r\n          A: Сначала все скоры игрока сортируются по рр. Затем в общую сумму рр добавляется 100% от\r\n          лучшего скора, 95% от второго скора, 90% от третьего, 86% от 4-го и так далее. (Формула\r\n          коэффициента - 0.95^N). Таким образом, на общую сумму рр больше всего влияют самые лучшие\r\n          результаты человека за всё время, и чтобы поднять свой уровень рр, нужно получать новые\r\n          топовые результаты (и поднимать свой скилл).\r\n        </div>\r\n      </div>\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">Q: Учитываются ли рекорды на ранке в рейтинге?</div>\r\n        <div className=\"answer\">\r\n          A: Да. Как минимум потому что у нас есть много рекордов, взятых с машин бестов, и мы не\r\n          знаем наверняка, на ранке они или нет. Если у игрока в топе есть два скора - на ранке и\r\n          без ранка, используется тот, где больше очков.\r\n        </div>\r\n      </div>\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">Q: Почему меня нет в рейтинге?</div>\r\n        <div className=\"answer\">\r\n          A: В таблицу попадают только те, у кого есть хотя бы 20 игр 1 на 1. Первые 20 игр\r\n          используются для определения изначального рейтинга.\r\n        </div>\r\n      </div>\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">\r\n          Q: Почему суммарное количество оценок S-A-B не совпадает с общим количеством скоров?\r\n        </div>\r\n        <div className=\"answer\">A: Не для каждого результата известна оценка.</div>\r\n      </div>\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">\r\n          Q: Если у меня есть несколько рекордов на А, несколько на А+, как считается суммарное\r\n          количество грейдов в таблице?\r\n        </div>\r\n        <div className=\"answer\">\r\n          A: В каждой колонке учитываются обе буквы - и треснутые, и с удержанным лайфом. То есть и\r\n          А, и А+ идут в колонку А. Точно так же для B, C, D.\r\n        </div>\r\n      </div>\r\n      <div className=\"question-answer\">\r\n        <div className=\"question\">Q: Убери аккураси из таблицы!</div>\r\n        <div className=\"answer\">A: Грем, это секция для вопросов.</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import _ from 'lodash/fp';\r\n\r\nimport { fetchJson, postJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nconst LOADING = `PREFERENCES/LOADING`;\r\nconst SUCCESS = `PREFERENCES/SUCCESS`;\r\nconst ERROR = `PREFERENCES/ERROR`;\r\n// const UPDATE_LOADING = `PREFERENCES/UPDATE/LOADING`;\r\n// const UPDATE_SUCCESS = `PREFERENCES/UPDATE/SUCCESS`;\r\n// const UPDATE_ERROR = `PREFERENCES/UPDATE/ERROR`;\r\nconst CHANGE = `PREFERENCES/CHANGE`;\r\n\r\nconst defaultPreferences = {\r\n  playersHiddenStatus: {},\r\n};\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: defaultPreferences,\r\n  error: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: null,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n        data: defaultPreferences,\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: _.merge(defaultPreferences, action.data),\r\n      };\r\n    case CHANGE:\r\n      return {\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchPreferences = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/profile/preferences` }));\r\n      dispatch({ type: SUCCESS, data: data.preferences });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchUserPreferences = (id) => {\r\n  return async (dispatch) => {\r\n    const data = await dispatch(fetchJson({ url: `${HOST}/player/${id}/preferences` }));\r\n    return data;\r\n  };\r\n};\r\n\r\nexport const updatePreferences = (preferences) => {\r\n  return async (dispatch) => {\r\n    // dispatch({ type: LOADING });\r\n    dispatch({ type: CHANGE, data: preferences });\r\n    try {\r\n      await dispatch(\r\n        postJson({\r\n          url: `${HOST}/profile/preferences`,\r\n          body: { preferences },\r\n        })\r\n      );\r\n      // dispatch({ type: SUCCESS, data: data.preferences });\r\n      // return data.preferences;\r\n    } catch (error) {\r\n      // dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import React, { Component } from 'react';\r\nimport toBe from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { FaSearch, FaQuestionCircle } from 'react-icons/fa';\r\nimport { Link, Route, withRouter } from 'react-router-dom';\r\nimport { createSelector } from 'reselect';\r\nimport _ from 'lodash/fp';\r\n\r\n// styles\r\nimport './ranking.scss';\r\n\r\n// components\r\nimport RankingList from './RankingList';\r\nimport RankingFaq from './RankingFaq';\r\n\r\n// constants\r\nimport { routes } from 'constants/routes';\r\n\r\n// reducers\r\nimport { fetchChartsData } from 'reducers/charts';\r\nimport { updatePreferences } from 'reducers/preferences';\r\n\r\n// utils\r\n\r\n// code\r\nconst rankingSelector = createSelector(\r\n  (state) => state.results.profiles,\r\n  // _.flow(_.values, _.orderBy(['pp.pp'], ['desc']))\r\n  _.flow(_.values, _.orderBy(['ratingRaw'], ['desc']))\r\n);\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    preferences: state.preferences.data,\r\n    ranking: rankingSelector(state),\r\n    error: state.charts.error || state.tracklist.error,\r\n    isLoading:\r\n      state.charts.isLoading || state.results.isLoadingRanking || state.tracklist.isLoading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  fetchChartsData,\r\n  updatePreferences,\r\n};\r\n\r\nclass Ranking extends Component {\r\n  static propTypes = {\r\n    ranking: toBe.array,\r\n    error: toBe.object,\r\n    preferences: toBe.object,\r\n    isLoading: toBe.bool.isRequired,\r\n    updatePreferences: toBe.func.isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    ranking: [],\r\n  };\r\n\r\n  onChangeHidingPlayers = () => {\r\n    const { preferences, updatePreferences } = this.props;\r\n\r\n    updatePreferences(\r\n      _.set(['showHiddenPlayersInRanking'], !preferences.showHiddenPlayersInRanking, preferences)\r\n    );\r\n  };\r\n\r\n  onRefresh = () => {\r\n    const { isLoading } = this.props;\r\n    !isLoading && this.props.fetchChartsData();\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, ranking, error, preferences, updatePreferences } = this.props;\r\n    return (\r\n      <div className=\"ranking-page\">\r\n        <div className=\"content\">\r\n          {error && error.message}\r\n          <div className=\"top-controls\">\r\n            <div className=\"_flex-fill\" />\r\n            <Route\r\n              exact\r\n              path={routes.ranking.path}\r\n              render={() => (\r\n                <>\r\n                  <button\r\n                    className=\"btn btn-sm btn-dark btn-icon _margin-right\"\r\n                    onClick={this.onChangeHidingPlayers}\r\n                  >\r\n                    {preferences.showHiddenPlayersInRanking\r\n                      ? 'скрыть невыбранных'\r\n                      : 'показать всех'}\r\n                  </button>\r\n                  <Link to={routes.ranking.faq.path}>\r\n                    <button className=\"btn btn-sm btn-dark btn-icon _margin-right\">\r\n                      <FaQuestionCircle /> faq\r\n                    </button>\r\n                  </Link>\r\n                  <button\r\n                    disabled={isLoading}\r\n                    className=\"btn btn-sm btn-dark btn-icon\"\r\n                    onClick={this.onRefresh}\r\n                  >\r\n                    <FaSearch /> обновить\r\n                  </button>\r\n                </>\r\n              )}\r\n            />\r\n            <Route\r\n              exact\r\n              path={routes.ranking.faq.path}\r\n              render={() => (\r\n                <Link to={routes.ranking.path}>\r\n                  <button className=\"btn btn-sm btn-dark btn-icon\">назад</button>\r\n                </Link>\r\n              )}\r\n            />\r\n          </div>\r\n          <Route\r\n            exact\r\n            path={routes.ranking.path}\r\n            render={() => (\r\n              <RankingList\r\n                ranking={ranking}\r\n                isLoading={isLoading}\r\n                preferences={preferences}\r\n                updatePreferences={updatePreferences}\r\n              />\r\n            )}\r\n          />\r\n          <Route exact path={routes.ranking.faq.path} component={RankingFaq} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Ranking));\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport _ from 'lodash/fp';\r\nimport { FaPlay } from 'react-icons/fa';\r\nimport { MdExpandMore } from 'react-icons/md';\r\n\r\nimport { fetchJson } from 'utils/fetch';\r\nimport { getTimeAgo } from 'utils/leaderboards';\r\nimport { parseDate } from 'utils/date';\r\n\r\nimport Loader from 'components/Shared/Loader';\r\n\r\nimport { routes } from 'constants/routes';\r\nimport { HOST } from 'constants/backend';\r\n\r\nimport './most-played.scss';\r\nimport { useLanguage } from 'utils/context/translation';\r\n\r\nexport default connect((state) => ({ charts: state.results.sharedCharts }), { fetchJson })(\r\n  ({ playerId, charts, fetchJson }) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [limit, setLimit] = useState(10);\r\n    const [data, setData] = useState([]);\r\n\r\n    const lang = useLanguage();\r\n\r\n    useEffect(() => {\r\n      setLoading(true);\r\n      fetchJson({\r\n        url: `${HOST}/player/${playerId}/mostPlayed?limit=${limit}`,\r\n      })\r\n        .then((result) => {\r\n          setLoading(false);\r\n          if (result.success) {\r\n            setData(result.data);\r\n          }\r\n        })\r\n        .catch(() => {\r\n          setLoading(false);\r\n        });\r\n    }, [playerId, limit, fetchJson]);\r\n\r\n    return (\r\n      <div className=\"most-played\">\r\n        {isLoading && <Loader />}\r\n        {data.map((item) => {\r\n          const chart = charts[item.shared_chart];\r\n          return (\r\n            <div className=\"chart\" key={item.shared_chart}>\r\n              <div\r\n                className={classNames('chart-name', {\r\n                  single: chart.chartType === 'S',\r\n                  singlep: chart.chartType === 'SP',\r\n                  doublep: chart.chartType === 'DP',\r\n                  double: chart.chartType === 'D',\r\n                  coop: chart.chartType === 'COOP',\r\n                })}\r\n              >\r\n                <span className=\"chart-letter\">{chart.chartType}</span>\r\n                <span className=\"chart-number\">{chart.chartLevel}</span>\r\n              </div>\r\n              <div className=\"song-name\">\r\n                <NavLink\r\n                  exact\r\n                  to={routes.leaderboard.sharedChart.getPath({\r\n                    sharedChartId: chart.sharedChartId,\r\n                  })}\r\n                >\r\n                  {chart.song}\r\n                </NavLink>\r\n              </div>\r\n              <div className=\"date\">\r\n                {item.latestDate ? getTimeAgo(parseDate(item.latestDate)) : null}\r\n              </div>\r\n              <div className=\"playcount\">\r\n                <FaPlay />\r\n                <span>{item.count}</span>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        {limit === _.size(data) && (\r\n          <button\r\n            className=\"show-more btn btn-sm btn-dark btn-icon\"\r\n            onClick={() => setLimit(limit + 10)}\r\n          >\r\n            <MdExpandMore /> {lang.SHOW_MORE}\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\n\r\nimport { ranks, getRankImg } from 'utils/exp';\r\n\r\nexport default function ExpFaq() {\r\n  return (\r\n    <div className=\"faq-exp\">\r\n      <div className=\"faq-header\">\r\n        <strong>Опыт</strong> игрока основывается на количестве сыгранных песен и чартов.\r\n        <br />\r\n        Чем выше уровень чарта и чем лучше оценка на чарте, тем больше опыта он даёт.\r\n        <br />\r\n        Повторные попытки на тех же чартах не дают больше опыта. Чтобы поднимать свой уровень, играй\r\n        новые треки и чарты.\r\n      </div>\r\n      <div className=\"faq-header\">Список уровней и необходимый опыт для их получения:</div>\r\n      <div className=\"ranks-list\">\r\n        {ranks.map(rank => (\r\n          <div key={rank.threshold} className=\"rank\">\r\n            <div className=\"exp-rank\">{getRankImg(rank)}</div>\r\n            <div className=\"threshold\">{rank.threshold}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","const SET_FILTER = `PROFILES/SET_FILTER`;\r\nconst RESET_FILTER = `PROFILES/RESET_FILTER`;\r\n\r\nexport const defaultFilter = {};\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  filter: defaultFilter,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_FILTER:\r\n      return {\r\n        ...state,\r\n        filter: action.filter,\r\n      };\r\n    case RESET_FILTER:\r\n      return {\r\n        ...state,\r\n        filter: defaultFilter,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const setProfilesFilter = filter => ({\r\n  type: SET_FILTER,\r\n  filter,\r\n});\r\n\r\nexport const resetProfilesFilter = () => ({\r\n  type: RESET_FILTER,\r\n});\r\n","import _ from 'lodash/fp';\r\nimport { createSelector } from 'reselect';\r\nimport moment from 'moment';\r\n\r\nconst cutRange = (array, range) => {\r\n  const startIndex = _.findIndex((item) => item.date > range[0], array);\r\n  const endIndex = _.findLastIndex((item) => item.date < range[1], array);\r\n  let firstElement =\r\n    startIndex > 0 ? array[startIndex - 1] : startIndex === 0 ? array[startIndex] : _.last(array);\r\n  let lastElement = endIndex > -1 ? array[endIndex] : _.first(array);\r\n  firstElement = { ...firstElement, date: range[0] };\r\n  lastElement = { ...lastElement, date: range[1] };\r\n  const middleElements =\r\n    startIndex > -1 && endIndex > -1 ? array.slice(startIndex, endIndex + 1) : [];\r\n\r\n  return [firstElement, ...middleElements, lastElement];\r\n};\r\n\r\nconst defaultGradesDistribution = {\r\n  SSS: 0,\r\n  SS: 0,\r\n  S: 0,\r\n  'A+': 0,\r\n  A: 0,\r\n  B: 0,\r\n  C: 0,\r\n  D: 0,\r\n  F: 0,\r\n};\r\nconst defaultGradesWithLevelsDistribution = _.flow(\r\n  _.flatMap((type) => {\r\n    return _.flow(\r\n      _.toPairs,\r\n      _.map(([grade, value]) => [`${type}-${grade}`, value])\r\n    )(defaultGradesDistribution);\r\n  }),\r\n  _.fromPairs\r\n)(['S', 'D']);\r\n\r\nexport const profileSelectorCreator = (idParamName) =>\r\n  createSelector(\r\n    (state, props) => props.match.params[idParamName],\r\n    (state) => state.charts.isLoading || state.results.isLoadingRanking,\r\n    (state) => state.results.profiles,\r\n    (state) => state.profiles.filter,\r\n    (state) => state.tracklist.data,\r\n    (idText, isLoading, profiles, filter, tracklist) => {\r\n      const id = _.toInteger(idText);\r\n      const profile = profiles[id];\r\n      if (_.isEmpty(profile) || isLoading) {\r\n        return null;\r\n      }\r\n      const levelsDistribution = _.flow(\r\n        _.get('resultsByLevel'),\r\n        _.toPairs,\r\n        _.map(([x, y]) => ({\r\n          x: _.toInteger(x),\r\n          S:\r\n            (_.size(\r\n              _.filter((res) => res.chart.chartType === 'S' || res.chart.chartType === 'SP', y)\r\n            ) /\r\n              tracklist.singlesLevels[x]) *\r\n            100,\r\n          D:\r\n            (-_.size(\r\n              _.filter((res) => res.chart.chartType === 'D' || res.chart.chartType === 'DP', y)\r\n            ) /\r\n              tracklist.doublesLevels[x]) *\r\n            100,\r\n        }))\r\n      )(profile);\r\n      const gradesData = _.flow(\r\n        _.get('resultsByLevel'),\r\n        _.toPairs,\r\n        _.map(\r\n          _.update('[1].result.grade', (grade) =>\r\n            grade && grade.includes('+') && grade !== 'A+' ? grade.replace('+', '') : grade\r\n          )\r\n        )\r\n      )(profile);\r\n      const gradesDistribution = _.flow(\r\n        _.map(([x, y]) => ({\r\n          x: _.toInteger(x),\r\n          ...defaultGradesDistribution,\r\n          ..._.omit('?', _.mapValues(_.size, _.groupBy('result.grade', y))),\r\n        })),\r\n        _.map((item) => {\r\n          const grades = _.pick(Object.keys(defaultGradesDistribution), item);\r\n          const sum = _.sum(_.values(grades));\r\n          return {\r\n            ...item,\r\n            gradesValues: grades,\r\n            ...(sum === 0 ? grades : _.mapValues((value) => (100 * value) / sum, grades)),\r\n          };\r\n        })\r\n      )(gradesData);\r\n      const gradesAndLevelsDistribution = _.flow(\r\n        _.map(([x, y]) => {\r\n          const groupedResults = _.groupBy('result.grade', y);\r\n          const counts = _.omit(\r\n            '?',\r\n            _.mapValues(\r\n              _.countBy((res) => {\r\n                return res.chart.chartType === 'S' || res.chart.chartType === 'SP'\r\n                  ? 'S'\r\n                  : res.chart.chartType === 'D' || res.chart.chartType === 'DP'\r\n                  ? 'D'\r\n                  : 'Other';\r\n              }),\r\n              groupedResults\r\n            )\r\n          );\r\n          const reduced = _.reduce(\r\n            (acc, [grade, levelsData]) => {\r\n              const accData = _.flow(\r\n                _.toPairs,\r\n                _.map(([type, count]) => [\r\n                  `${type}-${grade}`,\r\n                  type === 'S'\r\n                    ? (count / tracklist.singlesLevels[x]) * 100\r\n                    : (-count / tracklist.doublesLevels[x]) * 100,\r\n                ]),\r\n                _.fromPairs\r\n              )(levelsData);\r\n              return { ...acc, ...accData };\r\n            },\r\n            {},\r\n            _.toPairs(counts)\r\n          );\r\n\r\n          return {\r\n            x: _.toInteger(x),\r\n            ...defaultGradesWithLevelsDistribution,\r\n            ...reduced,\r\n          };\r\n        })\r\n      )(gradesData);\r\n\r\n      const lastTickRating = _.last(profile.ratingHistory).date;\r\n      const lastTickRanking = _.last(profile.rankingHistory).date;\r\n      const lastTick = lastTickRating > lastTickRanking ? lastTickRating : lastTickRanking; // End graph at either point\r\n      const firstTick = _.first(profile.ratingHistory).date; // Start graph from the first battle of this player\r\n      const lastDay = moment(lastTick).endOf('day');\r\n      const firstDay = moment(firstTick).startOf('day');\r\n      const minMaxRange = [firstDay / 1000 / 60 / 60 / 24, lastDay / 1000 / 60 / 60 / 24];\r\n\r\n      const filterRange = filter.dayRange || [\r\n        Math.max(minMaxRange[0], minMaxRange[1] - 30),\r\n        minMaxRange[1],\r\n      ];\r\n      const dayRangeMs = [\r\n        +moment(filterRange[0] * 1000 * 60 * 60 * 24).startOf('day'),\r\n        +moment(filterRange[1] * 1000 * 60 * 60 * 24).endOf('day'),\r\n      ];\r\n      const placesChanges = cutRange(profile.rankingHistory, dayRangeMs);\r\n      const ratingChanges = cutRange(profile.ratingHistory, dayRangeMs);\r\n\r\n      const rank = 1 + _.findIndex({ id }, _.orderBy(['ratingRaw'], ['desc'], _.values(profiles)));\r\n\r\n      return {\r\n        ...profile,\r\n        rank,\r\n        minMaxRange,\r\n        filterRange,\r\n        levelsDistribution,\r\n        gradesDistribution,\r\n        gradesAndLevelsDistribution,\r\n        placesChanges,\r\n        ratingChanges,\r\n      };\r\n    }\r\n  );\r\n","import React, { Component } from 'react';\r\nimport toBe from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { FaSearch, FaQuestionCircle, FaTimes, FaCaretLeft, FaCaretRight } from 'react-icons/fa';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport ReactModal from 'react-modal';\r\nimport Tooltip from 'react-responsive-ui/modules/Tooltip';\r\nimport Select from 'react-select';\r\nimport moment from 'moment';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip as RechartsTooltip,\r\n  ReferenceLine,\r\n  CartesianGrid,\r\n  Line,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Label,\r\n  Scatter,\r\n  ScatterChart,\r\n} from 'recharts';\r\nimport _ from 'lodash/fp';\r\nimport { createSelector } from 'reselect';\r\n\r\n// styles\r\nimport './profile.scss';\r\n\r\n// constants\r\nimport { routes } from 'constants/routes';\r\nimport { DEBUG } from 'constants/env';\r\n\r\n// components\r\nimport Range from 'components/Shared/Range';\r\nimport Grade from 'components/Shared/Grade';\r\nimport Loader from 'components/Shared/Loader';\r\nimport Toggle from 'components/Shared/Toggle/Toggle';\r\nimport MostPlayed from './MostPlayed';\r\nimport ExpFaq from './ExpFaq';\r\n\r\n// reducers\r\nimport { fetchChartsData } from 'reducers/charts';\r\nimport { setProfilesFilter, resetProfilesFilter } from 'reducers/profiles';\r\n\r\n// utils\r\nimport { profileSelectorCreator } from 'utils/profiles';\r\nimport { parseDate } from 'utils/date';\r\nimport { getTimeAgo } from 'utils/leaderboards';\r\nimport { achievements } from 'utils/achievements';\r\nimport { getRankImg } from 'utils/exp';\r\n\r\n// code\r\nconst MIN_GRAPH_HEIGHT = undefined;\r\n\r\nexport const profileSelector = profileSelectorCreator('id');\r\n\r\nexport const otherPlayersSelector = createSelector(\r\n  (state) => state.results.players,\r\n  (state, props) => _.toNumber(props.match.params.id),\r\n  (players, id) =>\r\n    _.flow(\r\n      _.toPairs,\r\n      _.map(([ind, { nickname, arcade_name, id }]) => ({\r\n        label: `${nickname} (${arcade_name})`,\r\n        value: nickname,\r\n        id: _.toNumber(id),\r\n      })),\r\n      _.remove((it) => it.id === id),\r\n      _.sortBy((it) => _.toLower(it.label))\r\n    )(players)\r\n);\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  return {\r\n    profile: profileSelector(state, props),\r\n    otherPlayers: otherPlayersSelector(state, props),\r\n    tracklist: state.tracklist.data,\r\n    filter: state.profiles.filter,\r\n    error: state.charts.error || state.tracklist.error,\r\n    sharedCharts: state.results.sharedCharts,\r\n    isLoading:\r\n      state.charts.isLoading || state.results.isLoadingRanking || state.tracklist.isLoading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  fetchChartsData,\r\n  setProfilesFilter,\r\n  resetProfilesFilter,\r\n};\r\n\r\nclass Profile extends Component {\r\n  static propTypes = {\r\n    profile: toBe.object,\r\n    error: toBe.object,\r\n    isLoading: toBe.bool.isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    profile: {},\r\n  };\r\n\r\n  state = {\r\n    isLevelGraphCombined: true,\r\n    showFaq: false,\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.props.resetProfilesFilter();\r\n  }\r\n\r\n  onRefresh = () => {\r\n    const { isLoading } = this.props;\r\n    !isLoading && this.props.fetchChartsData();\r\n  };\r\n\r\n  onChangeDayRange = (range) => {\r\n    const { filter } = this.props;\r\n    this.props.setProfilesFilter({\r\n      ...filter,\r\n      dayRange: range,\r\n    });\r\n  };\r\n\r\n  onShowFaq = () => {\r\n    this.setState({ showFaq: true });\r\n  };\r\n\r\n  onHideFaq = () => {\r\n    this.setState({ showFaq: false });\r\n  };\r\n\r\n  renderRankingHistory() {\r\n    const { profile } = this.props;\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <LineChart data={profile.ratingChanges} margin={{ top: 5, bottom: 5, right: 5, left: 0 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"date\"\r\n            type=\"number\"\r\n            domain={['dataMin', 'dataMax']}\r\n            tickFormatter={(value) => parseDate(value).toLocaleDateString()}\r\n          />\r\n          <YAxis\r\n            allowDecimals={false}\r\n            domain={['dataMin - 100', 'dataMax + 100']}\r\n            tickFormatter={Math.round}\r\n            width={40}\r\n          />\r\n          <ReferenceLine y={1000} stroke=\"white\" />\r\n          <RechartsTooltip\r\n            isAnimationActive={false}\r\n            content={({ active, payload, label }) => {\r\n              if (!payload || !payload[0]) {\r\n                return null;\r\n              }\r\n              return (\r\n                <div className=\"history-tooltip\">\r\n                  <div>{parseDate(payload[0].payload.date).toLocaleDateString()}</div>\r\n                  {payload && payload[0] && <div>Rating: {Math.round(payload[0].value)}</div>}\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            isAnimationActive={false}\r\n            dataKey=\"rating\"\r\n            stroke=\"#88d3ff\"\r\n            strokeWidth={3}\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  circleShape = (args) => (\r\n    <circle key={args.key} cx={args.cx} cy={args.cy} r={4} fill={args.fill}></circle>\r\n  );\r\n  renderAccuracyPoints(interpolated = false) {\r\n    const { profile, sharedCharts } = this.props;\r\n    const pointsByType = _.groupBy(([, , chartId]) => {\r\n      const type = sharedCharts[chartId].chartType;\r\n      return type === 'D' || type === 'DP';\r\n    }, profile.accuracyPointsRaw);\r\n    if (!interpolated) {\r\n      return (\r\n        <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n          <ScatterChart margin={{ top: 5, bottom: 5, right: 5, left: 0 }}>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis\r\n              dataKey=\"[0]\"\r\n              type=\"number\"\r\n              domain={[1, 28]}\r\n              tickFormatter={(value) => Math.round(value)}\r\n              ticks={[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]}\r\n            />\r\n            <YAxis\r\n              dataKey=\"[1]\"\r\n              type=\"number\"\r\n              domain={[0, 100]}\r\n              width={40}\r\n              tickFormatter={(value) => Math.round(value) + '%'}\r\n            />\r\n            <Scatter data={pointsByType.true} shape={this.circleShape} fill=\"#169c16\" />\r\n            <Scatter data={pointsByType.false} shape={this.circleShape} fill=\"#af2928\" />\r\n            <RechartsTooltip\r\n              isAnimationActive={false}\r\n              content={({ active, payload, label }) => {\r\n                if (!payload || !payload[0] || !payload[1]) {\r\n                  return null;\r\n                }\r\n                const chart = payload[0].payload[2] && sharedCharts[payload[0].payload[2]];\r\n                return (\r\n                  <div className=\"history-tooltip\">\r\n                    <div>Level: {payload[0].value}</div>\r\n                    <div>Accuracy: {payload[1].value}%</div>\r\n                    {chart && (\r\n                      <div>\r\n                        {chart.song} {chart.chartLabel} ({chart.interpolatedDifficulty.toFixed(1)})\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n          </ScatterChart>\r\n        </ResponsiveContainer>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <LineChart margin={{ top: 5, bottom: 5, right: 5, left: 0 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"[0]\"\r\n            type=\"number\"\r\n            domain={[1, 28]}\r\n            tickFormatter={(value) => Math.round(value)}\r\n          />\r\n          <YAxis domain={[0, 100]} width={40} />\r\n          <RechartsTooltip\r\n            isAnimationActive={false}\r\n            content={({ active, payload, label }) => {\r\n              if (!payload || !payload[0]) {\r\n                return null;\r\n              }\r\n              return (\r\n                <div className=\"history-tooltip\">\r\n                  <div>{payload[0].payload[0]}</div>\r\n                  {payload && payload[0] && <div>Acc: #{payload[0].value}</div>}\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <Line\r\n            data={profile.accuracyPointsInterpolated}\r\n            isAnimationActive={false}\r\n            dataKey=\"[1]\"\r\n            stroke=\"#88d3ff\"\r\n            strokeWidth={3}\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  renderPlaceHistory() {\r\n    const { profile } = this.props;\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <LineChart data={profile.placesChanges} margin={{ top: 5, bottom: 5, right: 5, left: 0 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"date\"\r\n            type=\"number\"\r\n            domain={['dataMin', 'dataMax']}\r\n            tickFormatter={(value) => parseDate(value).toLocaleDateString()}\r\n          />\r\n          <YAxis\r\n            allowDecimals={false}\r\n            domain={[1, (dataMax) => (dataMax < 3 ? dataMax + 2 : dataMax + 1)]}\r\n            interval={0}\r\n            reversed\r\n            width={40}\r\n          />\r\n          <RechartsTooltip\r\n            isAnimationActive={false}\r\n            content={({ active, payload, label }) => {\r\n              if (!payload || !payload[0]) {\r\n                return null;\r\n              }\r\n              return (\r\n                <div className=\"history-tooltip\">\r\n                  <div>{parseDate(payload[0].payload.date).toLocaleDateString()}</div>\r\n                  {payload && payload[0] && <div>Place: #{payload[0].value}</div>}\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <Line\r\n            isAnimationActive={false}\r\n            type=\"stepAfter\"\r\n            dataKey=\"place\"\r\n            stroke=\"#88d3ff\"\r\n            strokeWidth={3}\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  renderGrades() {\r\n    const { profile } = this.props;\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <BarChart\r\n          data={profile.gradesDistribution}\r\n          margin={{ top: 5, bottom: 5, right: 5, left: 0 }}\r\n        >\r\n          <RechartsTooltip\r\n            isAnimationActive={false}\r\n            content={({ active, payload, label }) => {\r\n              if (!payload || !payload[0]) {\r\n                return null;\r\n              }\r\n              return (\r\n                <div className=\"history-tooltip\">\r\n                  <div>Level: {payload[0].payload.x}</div>\r\n                  {_.filter((item) => item.value > 0, payload).map((item) => (\r\n                    <div key={item.name} style={{ fontWeight: 'bold', color: item.color }}>\r\n                      {item.name}: {payload[0].payload.gradesValues[item.name]}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <XAxis dataKey=\"x\" />\r\n          <YAxis\r\n            domain={[0, 100]}\r\n            ticks={[0, 50, 100]}\r\n            tickFormatter={(x) => `${Math.round(x)}%`}\r\n            width={40}\r\n          />\r\n          <Legend />\r\n          <Bar dataKey=\"SSS\" fill=\"#ffd700\" stackId=\"stack\" />\r\n          <Bar dataKey=\"SS\" fill=\"#dab800\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S\" fill=\"#b19500\" stackId=\"stack\" />\r\n          <Bar dataKey=\"A+\" fill=\"#396eef\" stackId=\"stack\" />\r\n          <Bar dataKey=\"A\" fill=\"#828fb7\" stackId=\"stack\" />\r\n          <Bar dataKey=\"B\" fill=\"#7a6490\" stackId=\"stack\" />\r\n          <Bar dataKey=\"C\" fill=\"#6d5684\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D\" fill=\"#5d4e6d\" stackId=\"stack\" />\r\n          <Bar dataKey=\"F\" fill=\"#774949\" stackId=\"stack\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  renderGradesWithLevels() {\r\n    const { profile, tracklist } = this.props;\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={0.74}>\r\n        <BarChart\r\n          data={profile.gradesAndLevelsDistribution}\r\n          margin={{ top: 5, bottom: 5, right: 5, left: 0 }}\r\n          stackOffset=\"sign\"\r\n        >\r\n          <RechartsTooltip\r\n            isAnimationActive={false}\r\n            content={({ active, payload, label }) => {\r\n              if (!payload || !payload[0]) {\r\n                return null;\r\n              }\r\n              const doubleItems = _.filter(\r\n                (item) => item.value !== 0 && item.dataKey.startsWith('D'),\r\n                payload\r\n              );\r\n              const singleItems = _.filter(\r\n                (item) => item.value !== 0 && item.dataKey.startsWith('S'),\r\n                payload\r\n              );\r\n              return (\r\n                <div className=\"history-tooltip\">\r\n                  <div>Level: {payload[0].payload.x}</div>\r\n                  {!!singleItems.length && (\r\n                    <>\r\n                      <div>Single:</div>\r\n                      {singleItems.map((item) => (\r\n                        <div key={item.name} style={{ fontWeight: 'bold', color: item.color }}>\r\n                          {item.name.slice(2)}: {Math.round(Math.abs(item.value))}% (\r\n                          {Math.round((tracklist.singlesLevels[item.payload.x] * item.value) / 100)}\r\n                          /{tracklist.singlesLevels[item.payload.x]})\r\n                        </div>\r\n                      ))}\r\n                    </>\r\n                  )}\r\n                  {!!doubleItems.length && (\r\n                    <>\r\n                      <div>Double:</div>\r\n                      {doubleItems.map((item) => (\r\n                        <div key={item.name} style={{ fontWeight: 'bold', color: item.color }}>\r\n                          {item.name.slice(2)}: {Math.round(Math.abs(item.value))}% (\r\n                          {Math.round(\r\n                            (tracklist.doublesLevels[item.payload.x] * -item.value) / 100\r\n                          )}\r\n                          /{tracklist.doublesLevels[item.payload.x]})\r\n                        </div>\r\n                      ))}\r\n                    </>\r\n                  )}\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <XAxis dataKey=\"x\" />\r\n          <YAxis\r\n            tickFormatter={(x) => `${Math.round(Math.abs(x))}%`}\r\n            width={40}\r\n            domain={[(dataMin) => Math.min(dataMin, -10), (dataMax) => Math.max(10, dataMax)]}\r\n          />\r\n          <Bar dataKey=\"S-SSS\" fill=\"#ffd700\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-SS\" fill=\"#dab800\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-S\" fill=\"#b19500\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-A+\" fill=\"#396eef\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-A\" fill=\"#828fb7\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-B\" fill=\"#7a6490\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-C\" fill=\"#6d5684\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-D\" fill=\"#5d4e6d\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S-F\" fill=\"#774949\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-SSS\" fill=\"#ffd700\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-SS\" fill=\"#dab800\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-S\" fill=\"#b19500\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-A+\" fill=\"#396eef\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-A\" fill=\"#828fb7\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-B\" fill=\"#7a6490\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-C\" fill=\"#6d5684\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-D\" fill=\"#5d4e6d\" stackId=\"stack\" />\r\n          <Bar dataKey=\"D-F\" fill=\"#774949\" stackId=\"stack\" />\r\n          <Label value=\"Double\" offset={0} position=\"insideBottomLeft\" />\r\n          <Label value=\"Single\" offset={0} position=\"insideTopLeft\" />\r\n          <ReferenceLine y={0} stroke=\"#bbb\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  renderLevels() {\r\n    const { profile, tracklist } = this.props;\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <BarChart\r\n          data={profile.levelsDistribution}\r\n          stackOffset=\"sign\"\r\n          margin={{ top: 5, bottom: 5, right: 5, left: 0 }}\r\n        >\r\n          <RechartsTooltip\r\n            isAnimationActive={false}\r\n            content={({ active, payload, label }) => {\r\n              if (!payload || !payload[0]) {\r\n                return null;\r\n              }\r\n              const totalD = tracklist.doublesLevels[payload[0].payload.x];\r\n              const totalS = tracklist.singlesLevels[payload[0].payload.x];\r\n              return (\r\n                <div className=\"history-tooltip\">\r\n                  <div>Level: {payload[0].payload.x}</div>\r\n                  {totalS > 0 && (\r\n                    <div style={{ fontWeight: 'bold', color: payload[1].color }}>\r\n                      Single: {Math.abs(payload[1].value).toFixed(1)}% (\r\n                      {Math.round((payload[1].value * totalS) / 100)}/{totalS})\r\n                    </div>\r\n                  )}\r\n                  {totalD > 0 && (\r\n                    <div style={{ fontWeight: 'bold', color: payload[0].color }}>\r\n                      Double: {Math.abs(payload[0].value).toFixed(1)}% (\r\n                      {Math.round((Math.abs(payload[0].value) * totalD) / 100)}/{totalD})\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <XAxis dataKey=\"x\" />\r\n          <YAxis\r\n            tickFormatter={(x) => Math.round(Math.abs(x)) + '%'}\r\n            width={40}\r\n            domain={[(dataMin) => Math.min(dataMin, -10), (dataMax) => Math.max(10, dataMax)]}\r\n          />\r\n          <RechartsTooltip />\r\n          <ReferenceLine y={0} stroke=\"#555\" />\r\n          <Legend />\r\n          <Bar dataKey=\"D\" fill=\"#169c16\" stackId=\"stack\" />\r\n          <Bar dataKey=\"S\" fill=\"#af2928\" stackId=\"stack\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  renderGradeBlock(type, grade) {\r\n    const { profile } = this.props;\r\n    const obj = profile.progress[type];\r\n    const typeLetter = type === 'double' ? 'D' : 'S';\r\n    const progr = Math.floor((obj[`${grade}-bonus-level-coef`] || 0) * 100);\r\n    const minNumber = obj[`${grade}-bonus-level-min-number`];\r\n    const currentNumber = obj[`${grade}-bonus-level-achieved-number`];\r\n    const levelString = obj[`${grade}-bonus-level`]\r\n      ? `${typeLetter}${obj[`${grade}-bonus-level`]}`\r\n      : '?';\r\n    return (\r\n      <div className=\"grade-block\">\r\n        <div className=\"grade-letter\">\r\n          <Grade grade={grade} />\r\n        </div>\r\n        <div className=\"grade-level\">{levelString}</div>\r\n        <div className=\"grade-progress\">\r\n          {progr}% ({progr === 100 ? minNumber : currentNumber}/{minNumber})\r\n        </div>\r\n        <div\r\n          className={classNames('progress-background', {\r\n            complete: progr === 100,\r\n            zero: progr === 0,\r\n          })}\r\n          style={{\r\n            height: `${progr}%`,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderAchievement(achName, achievement) {\r\n    const Icon = achievements[achName].icon;\r\n    const description = achievements[achName].description;\r\n    return (\r\n      <Tooltip\r\n        key={achName}\r\n        content={<div>{description}</div>}\r\n        tooltipClassName=\"pumpking-tooltip achievement-tooltip\"\r\n      >\r\n        <div className=\"ach-block\">\r\n          {Icon && (\r\n            <div className=\"ach-icon\">\r\n              <Icon />\r\n            </div>\r\n          )}\r\n          <div className=\"ach-name\">{achName}</div>\r\n          <div\r\n            className={classNames('progress-background', {\r\n              complete: achievement.progress === 100,\r\n              zero: achievement.progress === 0,\r\n            })}\r\n            style={{\r\n              height: `${Math.round(achievement.progress)}%`,\r\n            }}\r\n          />\r\n        </div>\r\n      </Tooltip>\r\n    );\r\n  }\r\n\r\n  renderResultsByLevelHeader() {\r\n    const { isLevelGraphCombined } = this.state;\r\n    return (\r\n      <div className=\"toggle-holder\">\r\n        <Toggle\r\n          className=\"combine-toggle\"\r\n          checked={isLevelGraphCombined}\r\n          onChange={() =>\r\n            this.setState((state) => ({\r\n              isLevelGraphCombined: !state.isLevelGraphCombined,\r\n            }))\r\n          }\r\n        >\r\n          объединить графики\r\n        </Toggle>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderResultsByLevelFooter() {\r\n    const { profile } = this.props;\r\n    return (\r\n      <div className=\"toggle-holder\">\r\n        <Link to={routes.profile.resultsByLevel.getPath({ id: profile.id })}>\r\n          <button className=\"btn btn-sm btn-dark btn-icon _margin-right\">подробнее</button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderProfile() {\r\n    const { profile, otherPlayers, filter } = this.props;\r\n    const { isLevelGraphCombined } = this.state;\r\n    const expProgress = profile.expRankNext\r\n      ? (profile.exp - profile.expRank.threshold) /\r\n        (profile.expRankNext.threshold - profile.expRank.threshold)\r\n      : 100;\r\n    return (\r\n      <div className=\"profile\">\r\n        <div className=\"profile-header\">\r\n          <div className=\"profile-name text-with-header\">\r\n            <div className=\"text-header\">игрок</div>\r\n            <div>{profile.name}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">ранк</div>\r\n            <div>#{profile.rank}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">эло</div>\r\n            <div>{profile.rating}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">последняя игра</div>\r\n            <div>{profile.lastResultDate ? getTimeAgo(profile.lastResultDate) : 'никогда'}</div>\r\n          </div>\r\n          <div className=\"_flex-fill\"></div>\r\n          <div className=\"text-with-header -select\">\r\n            <div className=\"text-header\">сравнить с</div>\r\n            <div>\r\n              <Select\r\n                closeMenuOnSelect\r\n                className=\"select players\"\r\n                classNamePrefix=\"select\"\r\n                placeholder=\"игроки...\"\r\n                options={otherPlayers}\r\n                onChange={(value) => {\r\n                  this.props.history.push(\r\n                    routes.profile.compare.getPath({ id: profile.id, compareToId: value.id })\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-section\">\r\n          <div className=\"profile-sm-section-header _flex-row _align-center\">\r\n            <span>опыт</span>\r\n            <div className=\"_flex-fill\" />\r\n            <div onClick={this.onShowFaq} className=\"_clickable\">\r\n              <FaQuestionCircle onClick={this.onShowFaq} />\r\n            </div>\r\n            <ReactModal\r\n              ariaHideApp={false}\r\n              className=\"Modal faq-modal\"\r\n              overlayClassName=\"Overlay\"\r\n              isOpen={this.state.showFaq}\r\n              onRequestClose={this.onHideFaq}\r\n            >\r\n              <div className=\"close-btn\" onClick={this.onHideFaq}>\r\n                <FaTimes />\r\n              </div>{' '}\r\n              <ExpFaq />\r\n            </ReactModal>\r\n          </div>\r\n          <div className=\"exp-range\">\r\n            <div className=\"rank exp-rank\">\r\n              {getRankImg(profile.expRank)}\r\n              {profile.expRank && <div>{profile.expRank.threshold}</div>}\r\n            </div>\r\n            <div className=\"exp-line-with-label\">\r\n              <div className=\"exp-label\">\r\n                {profile.expRankNext ? (\r\n                  <>\r\n                    <span className=\"taken-num\">\r\n                      {Math.round(profile.exp - profile.expRank.threshold)}\r\n                    </span>\r\n                    {` / ${profile.expRankNext.threshold - profile.expRank.threshold}`}\r\n                  </>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"exp-line\">\r\n                <div className=\"taken\" style={{ width: Math.floor(100 * expProgress) + '%' }}></div>\r\n                <div\r\n                  className=\"rest\"\r\n                  style={{ width: 100 - Math.ceil(100 * expProgress) + '%' }}\r\n                ></div>\r\n              </div>\r\n              <div className=\"exp-label\">\r\n                total: <span className=\"taken-num\">{Math.round(profile.exp)}</span>\r\n              </div>\r\n            </div>\r\n            {profile.expRankNext && (\r\n              <div className=\"rank exp-rank\">\r\n                {getRankImg(profile.expRankNext)}\r\n                {profile.expRankNext && <div>{profile.expRankNext.threshold}</div>}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-section-horizontal-container\">\r\n          <div className=\"profile-section\">\r\n            <div className=\"profile-section-content\">\r\n              {!isLevelGraphCombined ? (\r\n                <>\r\n                  <div className=\"profile-section-2\">\r\n                    <div className=\"profile-sm-section-header flex\">\r\n                      <span>уровни</span>\r\n                      {this.renderResultsByLevelHeader()}\r\n                    </div>\r\n                    <div className=\"chart-container\">{this.renderLevels()}</div>\r\n                  </div>\r\n                  <div className=\"profile-section-2\">\r\n                    <div className=\"profile-sm-section-header\">\r\n                      <span>оценки</span>\r\n                    </div>\r\n                    <div className=\"chart-container\">{this.renderGrades()}</div>\r\n                  </div>\r\n                  {this.renderResultsByLevelFooter()}\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <div className=\"profile-section-2\">\r\n                    <div className=\"profile-sm-section-header flex\">\r\n                      <span>оценки</span>\r\n                      {this.renderResultsByLevelHeader()}\r\n                    </div>\r\n                    <div className=\"chart-container single-double-labels\">\r\n                      {this.renderGradesWithLevels()}\r\n                    </div>\r\n                  </div>\r\n                  {this.renderResultsByLevelFooter()}\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <div className=\"profile-section\">\r\n            <div className=\"profile-section-content\">\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header\">\r\n                  <span>эло</span>\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderRankingHistory()}</div>\r\n                {/* <div className=\"chart-container\">{this.renderAccuracyPoints()}</div> */}\r\n              </div>\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header\">\r\n                  <span>место в топе</span>\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderPlaceHistory()}</div>\r\n                {/* <div className=\"chart-container\">{this.renderAccuracyPoints(true)}</div> */}\r\n              </div>\r\n            </div>\r\n            {(() => {\r\n              const currentRange = filter.dayRange || profile.filterRange;\r\n              const dateL = moment(currentRange[0] * 1000 * 60 * 60 * 24).format('L');\r\n              const dateR = moment(currentRange[1] * 1000 * 60 * 60 * 24).format('L');\r\n              const l1 = Math.max(currentRange[0] - 1, profile.minMaxRange[0]);\r\n              const l2 = Math.min(currentRange[0] + 1, currentRange[1]);\r\n              const r1 = Math.max(currentRange[1] - 1, currentRange[0]);\r\n              const r2 = Math.min(currentRange[1] + 1, profile.minMaxRange[1]);\r\n              return (\r\n                <div className=\"range-container\">\r\n                  <Range\r\n                    range={currentRange}\r\n                    min={profile.minMaxRange[0]}\r\n                    max={profile.minMaxRange[1]}\r\n                    onChange={this.onChangeDayRange}\r\n                  />\r\n                  <div className=\"range-controls _flex-row\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([l1, currentRange[1]])}\r\n                    >\r\n                      <FaCaretLeft />\r\n                    </button>\r\n                    <span className=\"date-text\">{dateL}</span>\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([l2, currentRange[1]])}\r\n                    >\r\n                      <FaCaretRight />\r\n                    </button>\r\n                    <div className=\"_flex-fill\"></div>\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([currentRange[0], r1])}\r\n                    >\r\n                      <FaCaretLeft />\r\n                    </button>\r\n                    <span className=\"date-text\">{dateR}</span>\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([currentRange[0], r2])}\r\n                    >\r\n                      <FaCaretRight />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })()}\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-section-horizontal-container\">\r\n          <div className=\"profile-section\">\r\n            <div className=\"profile-section-content\">\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header\">\r\n                  <span>точность по уровням</span>\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderAccuracyPoints()}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"profile-section\"></div>\r\n        </div>\r\n        <div className=\"profile-section progress-section\">\r\n          <div className=\"profile-sm-section-header\">\r\n            <span>достижения по уровням</span>\r\n          </div>\r\n          <div className=\"progress-blocks-single-double\">\r\n            <div className=\"progress-block\">\r\n              <div className=\"achievements-grades single\">\r\n                {this.renderGradeBlock('single', 'A')}\r\n                {this.renderGradeBlock('single', 'A+')}\r\n                {this.renderGradeBlock('single', 'S')}\r\n                {this.renderGradeBlock('single', 'SS')}\r\n              </div>\r\n            </div>\r\n            <div className=\"progress-block\">\r\n              <div className=\"achievements-grades double\">\r\n                {this.renderGradeBlock('double', 'A')}\r\n                {this.renderGradeBlock('double', 'A+')}\r\n                {this.renderGradeBlock('double', 'S')}\r\n                {this.renderGradeBlock('double', 'SS')}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"bonus-faq\">\r\n            * для получения ачивки нужно сыграть около 10% всех чартов данного левела на нужный\r\n            грейд\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-section\">\r\n          <div className=\"profile-sm-section-header\">\r\n            <span>достижения</span>\r\n          </div>\r\n          <div className=\"achievements\">\r\n            {_.keys(profile.achievements).map((achName) =>\r\n              this.renderAchievement(achName, profile.achievements[achName])\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-section\">\r\n          <div className=\"profile-sm-section-header\">\r\n            <span>часто играемые чарты</span>\r\n          </div>\r\n          <MostPlayed playerId={profile.id} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, profile, error } = this.props;\r\n    DEBUG && console.log('profile:', profile);\r\n    return (\r\n      <div className=\"profile-page\">\r\n        <div className=\"content\">\r\n          {error && error.message}\r\n          <div className=\"top-controls\">\r\n            <div className=\"_flex-fill\" />\r\n            <button\r\n              disabled={isLoading}\r\n              className=\"btn btn-sm btn-dark btn-icon\"\r\n              onClick={this.onRefresh}\r\n            >\r\n              <FaSearch /> обновить\r\n            </button>\r\n          </div>\r\n          {isLoading && <Loader />}\r\n          {!isLoading && _.isEmpty(profile) && <div className=\"profile\">Profile not found</div>}\r\n          {!isLoading && !_.isEmpty(profile) && this.renderProfile()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Profile));\r\n","import React, { useEffect, useState } from 'react';\r\nimport { createSelector } from 'reselect';\r\nimport _ from 'lodash/fp';\r\nimport numeral from 'numeral';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { FaCaretDown, FaCaretUp } from 'react-icons/fa';\r\nimport Select from 'react-select';\r\n\r\nimport './results-by-level.scss';\r\n\r\nimport { routes } from 'constants/routes';\r\n\r\nimport { profileSelector } from './Profile';\r\n\r\nimport Loader from 'components/Shared/Loader';\r\nimport Grade from 'components/Shared/Grade';\r\nimport ChartLabel from 'components/Leaderboard/ChartLabel';\r\n\r\nimport { gradeComparator } from 'utils/leaderboards';\r\nimport { useLanguage } from 'utils/context/translation';\r\n\r\nconst selectOptionsSelector = createSelector(\r\n  (state) => state.tracklist.data,\r\n  (data) => {\r\n    return _.flow(\r\n      _.get('chartLevels'),\r\n      _.keys,\r\n      _.filter((key) => 0 < key),\r\n      _.map((key) => ({ label: key, value: key }))\r\n    )(data);\r\n  }\r\n);\r\n\r\nconst resultsByLevelSelector = createSelector(\r\n  (state) => state.results.sharedCharts,\r\n  profileSelector,\r\n  (state, props) => props.match.params.level,\r\n  (state, props) => props.sortOrder,\r\n  (sharedCharts, profile, level, sortOrder) => {\r\n    if (!profile || !level) {\r\n      return null;\r\n    }\r\n\r\n    const levelString = _.toString(level);\r\n    const unplayed = _.flow(\r\n      _.values,\r\n      _.filter(\r\n        (chart) =>\r\n          chart.chartLevel === levelString &&\r\n          !chart.results.some((res) => res.playerId === profile.id)\r\n      ),\r\n      _.map((chart) => ({ chart })),\r\n      _.groupBy('chart.chartType')\r\n    )(sharedCharts);\r\n\r\n    const grouped = _.flow(\r\n      _.groupBy('chart.chartType'),\r\n      // Add keys from unplayed\r\n      (g) => ({ ...Object.keys(unplayed).reduce((acc, key) => ({ ...acc, [key]: [] }), {}), ...g }),\r\n      _.mapValues(\r\n        _.flow(\r\n          _.groupBy('result.grade'),\r\n          _.toPairs,\r\n          _.orderBy(([grade]) => gradeComparator[grade], sortOrder)\r\n        )\r\n      ),\r\n      _.toPairs,\r\n      _.orderBy(([type]) => (type === 'S' ? 0 : type === 'D' ? 1 : 2), 'asc'),\r\n      _.map(([type, group]) =>\r\n        sortOrder === 'asc'\r\n          ? [type, [['X', unplayed[type] || []], ...group]]\r\n          : [type, [...group, ['X', unplayed[type] || []]]]\r\n      )\r\n    )(profile.resultsByLevel[level]);\r\n\r\n    return { byType: grouped };\r\n  }\r\n);\r\n\r\nconst ResultsByLevel = (props) => {\r\n  const { match, history } = props;\r\n\r\n  const lang = useLanguage();\r\n  const [sortOrder, setSortOrder] = useState('asc');\r\n  const selectOptions = useSelector(selectOptionsSelector);\r\n  const profile = useSelector((state) => profileSelector(state, props));\r\n  const data = useSelector((state) => resultsByLevelSelector(state, { ...props, sortOrder }));\r\n  const isLoading = useSelector(\r\n    (state) => state.charts.isLoading || state.results.isLoadingRanking || state.tracklist.isLoading\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (profile && !match.params.level) {\r\n      const redirectToLevel = _.flow(\r\n        _.get('resultsByLevel'),\r\n        _.toPairs,\r\n        _.maxBy('[1].length'),\r\n        _.first\r\n      )(profile);\r\n      history.push(\r\n        routes.profile.resultsByLevel.level.getPath({ ...match.params, level: redirectToLevel })\r\n      );\r\n    }\r\n  }, [match.params, profile, history]);\r\n\r\n  if (isLoading) {\r\n    return <Loader />;\r\n  }\r\n\r\n  if (!data) {\r\n    return null;\r\n  }\r\n\r\n  const chartTypeText = {\r\n    D: lang.DOUBLES,\r\n    S: lang.SINGLES,\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile-results-by-level\">\r\n      <header>\r\n        <Link to={routes.profile.getPath({ id: profile.id })}>\r\n          <button className=\"btn btn-sm btn-dark btn-icon _margin-right\">{lang.BACK_BUTTON}</button>\r\n        </Link>\r\n        <div className=\"_flex-fill\" />\r\n        <button\r\n          className=\"btn btn-sm btn-dark btn-icon _margin-right\"\r\n          onClick={() => setSortOrder((order) => (order === 'asc' ? 'desc' : 'asc'))}\r\n        >\r\n          {sortOrder === 'desc' ? <FaCaretDown /> : <FaCaretUp />} {lang.SORTING}\r\n        </button>\r\n        <Select\r\n          className={'select levels'}\r\n          classNamePrefix=\"select\"\r\n          placeholder={lang.LEVEL_PLACEHOLDER}\r\n          options={selectOptions}\r\n          value={selectOptions.find((option) => option.value === match.params.level)}\r\n          onChange={(option) => {\r\n            history.push(\r\n              routes.profile.resultsByLevel.level.getPath({ id: profile.id, level: option.value })\r\n            );\r\n          }}\r\n        />\r\n      </header>\r\n      <div className=\"chart-types\">\r\n        {data.byType.map(([chartType, byGrade]) => {\r\n          return (\r\n            <div key={chartType} className=\"chart-type\">\r\n              <header>{chartTypeText[chartType] || chartType}</header>\r\n              <div className=\"grades-groups\">\r\n                {byGrade.map(([grade, charts]) => {\r\n                  if (_.isEmpty(charts)) {\r\n                    return null;\r\n                  }\r\n\r\n                  return (\r\n                    <div key={grade} className=\"grades-group\">\r\n                      <header>\r\n                        {grade === 'X' ? (\r\n                          lang.UNPLAYED\r\n                        ) : grade === '?' ? (\r\n                          '?'\r\n                        ) : (\r\n                          <Grade grade={grade} />\r\n                        )}\r\n                      </header>\r\n                      <div className=\"charts-for-grade\">\r\n                        {charts.map(({ chart, result }) => {\r\n                          return (\r\n                            <div key={chart.sharedChartId} className=\"chart-block\">\r\n                              <ChartLabel type={chart.chartType} level={chart.chartLevel} />\r\n                              <NavLink\r\n                                exact\r\n                                to={routes.leaderboard.sharedChart.getPath({\r\n                                  sharedChartId: chart.sharedChartId,\r\n                                })}\r\n                              >\r\n                                {chart.song}\r\n                              </NavLink>\r\n                              {result && (\r\n                                <>\r\n                                  <div className=\"_flex-fill\" />\r\n                                  <Grade grade={grade} />\r\n                                  <span className=\"score-span\">\r\n                                    {result.scoreIncrease > result.score * 0.8 && '*'}\r\n                                    {numeral(result.score).format('0,0')}\r\n                                  </span>\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultsByLevel;\r\n","import React, { Component } from 'react';\r\nimport toBe from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { FaSearch, FaCaretLeft, FaCaretRight } from 'react-icons/fa';\r\nimport { withRouter } from 'react-router-dom';\r\nimport moment from 'moment';\r\nimport Select from 'react-select';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  LineChart,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip as RechartsTooltip,\r\n  ReferenceLine,\r\n  CartesianGrid,\r\n  Line,\r\n  ResponsiveContainer,\r\n  ScatterChart,\r\n  Scatter,\r\n} from 'recharts';\r\nimport _ from 'lodash/fp';\r\nimport memoize from 'lru-memoize';\r\n\r\n// styles\r\nimport './profile-compare.scss';\r\n\r\n// constants\r\nimport { DEBUG } from 'constants/env';\r\nimport { routes } from 'constants/routes';\r\n\r\n// components\r\nimport ToggleButton from 'components/Shared/ToggleButton/ToggleButton';\r\nimport Toggle from 'components/Shared/Toggle/Toggle';\r\nimport Loader from 'components/Shared/Loader';\r\nimport Range from 'components/Shared/Range';\r\n\r\n// reducers\r\nimport { fetchChartsData } from 'reducers/charts';\r\nimport { setProfilesFilter, resetProfilesFilter } from 'reducers/profiles';\r\n\r\n// utils\r\nimport { profileSelectorCreator } from 'utils/profiles';\r\nimport { parseDate } from 'utils/date';\r\nimport { getTimeAgo } from 'utils/leaderboards';\r\nimport { otherPlayersSelector } from 'components/Profile/Profile';\r\n\r\n// code\r\nconst BARS_MODES = {\r\n  SINGLE_TWO: 'SINGLE_TWO',\r\n  SINGLE_FIVE: 'SINGLE_FIVE',\r\n  DOUBLE_TWO: 'DOUBLE_TWO',\r\n  DOUBLE_FIVE: 'DOUBLE_FIVE',\r\n  BOTH_TWO: 'BOTH_TWO',\r\n  BOTH_FIVE: 'BOTH_FIVE',\r\n};\r\nconst getCompareBars = (mode) => {\r\n  switch (mode) {\r\n    case BARS_MODES.SINGLE_TWO:\r\n      return [\r\n        <Bar\r\n          key=\"11\"\r\n          dataKey=\"single.twoBars.p1win\"\r\n          fill=\"#4696f0\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar\r\n          key=\"22\"\r\n          dataKey=\"single.twoBars.p2win\"\r\n          fill=\"#eda338\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n      ];\r\n    case BARS_MODES.SINGLE_FIVE:\r\n      return [\r\n        <Bar key=\"1\" dataKey=\"single.p1win\" fill=\"#4696f0\" stackId=\"stack\" isAnimationActive />,\r\n        <Bar\r\n          key=\"2\"\r\n          dataKey=\"single.p2notPlayed\"\r\n          fill=\"#899db3\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar\r\n          key=\"3\"\r\n          dataKey=\"single.notPlayed\"\r\n          fill=\"#70707060\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar\r\n          key=\"4\"\r\n          dataKey=\"single.p1notPlayed\"\r\n          fill=\"#bfa988\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar key=\"5\" dataKey=\"single.p2win\" fill=\"#eda338\" stackId=\"stack\" isAnimationActive />,\r\n      ];\r\n    case BARS_MODES.DOUBLE_TWO:\r\n      return [\r\n        <Bar\r\n          key=\"11\"\r\n          dataKey=\"double.twoBars.p1win\"\r\n          fill=\"#4696f0\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar\r\n          key=\"22\"\r\n          dataKey=\"double.twoBars.p2win\"\r\n          fill=\"#eda338\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n      ];\r\n    case BARS_MODES.DOUBLE_FIVE:\r\n      return [\r\n        <Bar key=\"1\" dataKey=\"double.p1win\" fill=\"#4696f0\" stackId=\"stack\" isAnimationActive />,\r\n        <Bar\r\n          key=\"2\"\r\n          dataKey=\"double.p2notPlayed\"\r\n          fill=\"#899db3\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar\r\n          key=\"3\"\r\n          dataKey=\"double.notPlayed\"\r\n          fill=\"#70707060\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar\r\n          key=\"4\"\r\n          dataKey=\"double.p1notPlayed\"\r\n          fill=\"#bfa988\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar key=\"5\" dataKey=\"double.p2win\" fill=\"#eda338\" stackId=\"stack\" isAnimationActive />,\r\n      ];\r\n    case BARS_MODES.BOTH_TWO:\r\n      return [\r\n        <Bar\r\n          key=\"11\"\r\n          dataKey=\"all.twoBars.p1win\"\r\n          fill=\"#4696f0\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n        <Bar\r\n          key=\"22\"\r\n          dataKey=\"all.twoBars.p2win\"\r\n          fill=\"#eda338\"\r\n          stackId=\"stack\"\r\n          isAnimationActive\r\n        />,\r\n      ];\r\n    case BARS_MODES.BOTH_FIVE:\r\n      return [\r\n        <Bar key=\"1\" dataKey=\"all.p1win\" fill=\"#4696f0\" stackId=\"stack\" isAnimationActive />,\r\n        <Bar key=\"2\" dataKey=\"all.p2notPlayed\" fill=\"#899db3\" stackId=\"stack\" isAnimationActive />,\r\n        <Bar key=\"3\" dataKey=\"all.notPlayed\" fill=\"#70707060\" stackId=\"stack\" isAnimationActive />,\r\n        <Bar key=\"4\" dataKey=\"all.p1notPlayed\" fill=\"#bfa988\" stackId=\"stack\" isAnimationActive />,\r\n        <Bar key=\"5\" dataKey=\"all.p2win\" fill=\"#eda338\" stackId=\"stack\" isAnimationActive />,\r\n      ];\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst MIN_GRAPH_HEIGHT = undefined;\r\n\r\nconst profile1Selector = profileSelectorCreator('id');\r\nconst profile2Selector = profileSelectorCreator('compareToId');\r\n\r\nconst getCombinedData = memoize()((p1, p2, tracklist) => {\r\n  if (!p1 || !p2) {\r\n    return {};\r\n  }\r\n  let rc1 = p1.ratingChanges[0].rating;\r\n  let rc2 = p2.ratingChanges[0].rating;\r\n  const allRC = _.flow(\r\n    _.sortBy('date'),\r\n    _.map((item) => {\r\n      if (item.rating) {\r\n        rc1 = item.rating;\r\n      }\r\n      if (item.rating2) {\r\n        rc2 = item.rating2;\r\n      }\r\n      return {\r\n        rating1: rc1,\r\n        rating2: rc2,\r\n        date: item.date,\r\n      };\r\n    }),\r\n    _.sortedUniqBy('date')\r\n  )([\r\n    ...p1.ratingChanges,\r\n    ...p2.ratingChanges.map((it) => ({ date: it.date, rating2: it.rating })),\r\n  ]);\r\n\r\n  rc1 = p1.placesChanges[0].place;\r\n  rc2 = p2.placesChanges[0].place;\r\n  const allPC = _.flow(\r\n    _.sortBy('date'),\r\n    _.map((item) => {\r\n      if (item.place) {\r\n        rc1 = item.place;\r\n      }\r\n      if (item.place2) {\r\n        rc2 = item.place2;\r\n      }\r\n      return {\r\n        place1: rc1,\r\n        place2: rc2,\r\n        date: item.date,\r\n      };\r\n    })\r\n  )([...p1.placesChanges, ...p2.placesChanges.map((it) => ({ date: it.date, place2: it.place }))]);\r\n\r\n  const perLevelComparison = _.fromPairs(Array.from({ length: 28 }).map((x, i) => [i + 1, {}]));\r\n  _.keys(perLevelComparison).forEach((level) => {\r\n    const charts = _.flow(\r\n      _.map('chart'),\r\n      _.uniqBy('sharedChartId')\r\n    )([...p1.resultsByLevel[level], ...p2.resultsByLevel[level]]);\r\n    const data = {\r\n      x: level,\r\n      all: {\r\n        p1win: 0,\r\n        p1notPlayed: 0,\r\n        p2win: 0,\r\n        p2notPlayed: 0,\r\n        notPlayed: 0,\r\n        // notPlayedHalf: 0,\r\n        twoBars: {},\r\n      },\r\n      double: {\r\n        p1win: 0,\r\n        p1notPlayed: 0,\r\n        p2win: 0,\r\n        p2notPlayed: 0,\r\n        notPlayed: 0,\r\n        twoBars: {},\r\n      },\r\n      single: {\r\n        p1win: 0,\r\n        p1notPlayed: 0,\r\n        p2win: 0,\r\n        p2notPlayed: 0,\r\n        notPlayed: 0,\r\n        twoBars: {},\r\n      },\r\n    };\r\n    charts.forEach((chart) => {\r\n      const p1index = chart.results.findIndex((r) => r.playerId === p1.id);\r\n      const p2index = chart.results.findIndex((r) => r.playerId === p2.id);\r\n      const perType = chart.chartType.startsWith('D') ? data.double : data.single;\r\n      if (p1index < 0 && p2index < 0) {\r\n        console.log('wtf?');\r\n      } else if (p1index < 0) {\r\n        data.all.p1notPlayed++;\r\n        perType.p1notPlayed++;\r\n      } else if (p2index < 0) {\r\n        data.all.p2notPlayed++;\r\n        perType.p2notPlayed++;\r\n      } else if (p1index < p2index) {\r\n        data.all.p1win++;\r\n        perType.p1win++;\r\n      } else if (p2index < p1index) {\r\n        data.all.p2win++;\r\n        perType.p2win++;\r\n      }\r\n    });\r\n\r\n    const normalizeTwo = (dataObj) => {\r\n      const totalPlayed = dataObj.p1win + dataObj.p2win || 1; // in case of divide by 0\r\n      dataObj.twoBars.p1win = dataObj.p1win / totalPlayed;\r\n      dataObj.twoBars.p2win = dataObj.p2win / totalPlayed;\r\n    };\r\n    normalizeTwo(data.all);\r\n    normalizeTwo(data.single);\r\n    normalizeTwo(data.double);\r\n\r\n    const normalizeFive = (dataObj, total) => {\r\n      dataObj.p1win = dataObj.p1win / total;\r\n      dataObj.p1notPlayed = dataObj.p1notPlayed / total;\r\n      dataObj.p2win = dataObj.p2win / total;\r\n      dataObj.p2notPlayed = dataObj.p2notPlayed / total;\r\n      dataObj.notPlayed =\r\n        1 - dataObj.p1win - dataObj.p1notPlayed - dataObj.p2win - dataObj.p2notPlayed;\r\n      // dataObj.notPlayedHalf = dataObj.notPlayed / 2;\r\n    };\r\n    normalizeFive(data.all, tracklist.chartLevels[level]);\r\n    normalizeFive(data.double, tracklist.doublesLevels[level]);\r\n    normalizeFive(data.single, tracklist.singlesLevels[level]);\r\n\r\n    perLevelComparison[level] = data;\r\n  });\r\n\r\n  return {\r\n    ratingChanges: allRC,\r\n    placesChanges: allPC,\r\n    perLevelComparison: _.values(perLevelComparison),\r\n  };\r\n});\r\n\r\nconst mapStateToProps = (state, props) => {\r\n  const profile1 = profile1Selector(state, props);\r\n  const profile2 = profile2Selector(state, props);\r\n  return {\r\n    profile: profile1,\r\n    profile2,\r\n    otherPlayers: otherPlayersSelector(state, props),\r\n    combinedData: getCombinedData(profile1, profile2, state.tracklist.data),\r\n    tracklist: state.tracklist.data,\r\n    filter: state.profiles.filter,\r\n    error: state.charts.error || state.tracklist.error,\r\n    isLoading:\r\n      state.charts.isLoading || state.results.isLoadingRanking || state.tracklist.isLoading,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  fetchChartsData,\r\n  setProfilesFilter,\r\n  resetProfilesFilter,\r\n};\r\n\r\nclass ProfileCompare extends Component {\r\n  static propTypes = {\r\n    profile: toBe.object,\r\n    error: toBe.object,\r\n    isLoading: toBe.bool.isRequired,\r\n  };\r\n\r\n  static defaultProps = {\r\n    profile: {},\r\n    profile2: {},\r\n    combinedData: {},\r\n  };\r\n\r\n  state = {\r\n    isLevelGraphCombined: true,\r\n    compareBarsMode: BARS_MODES.BOTH_TWO,\r\n  };\r\n\r\n  onRefresh = () => {\r\n    const { isLoading } = this.props;\r\n    !isLoading && this.props.fetchChartsData();\r\n  };\r\n\r\n  onChangeDayRange = (range) => {\r\n    const { filter } = this.props;\r\n    this.props.setProfilesFilter({\r\n      ...filter,\r\n      dayRange: range,\r\n    });\r\n  };\r\n\r\n  rhMargin = { top: 5, bottom: 5, right: 5, left: 0 };\r\n  rhXDomain = ['dataMin', 'dataMax'];\r\n  rhYDomain = ['dataMin - 100', 'dataMax + 100'];\r\n  rhXTickFormatter = (value) => parseDate(value).toLocaleDateString();\r\n  rhTooltip = ({ active, payload, label }) => {\r\n    const { profile, profile2 } = this.props;\r\n    const p1Name = profile.name;\r\n    const p2Name = profile2.name;\r\n    if (!payload || !payload[0]) {\r\n      return null;\r\n    }\r\n    return (\r\n      <div className=\"history-tooltip\">\r\n        <div>{parseDate(payload[0].payload.date).toLocaleDateString()}</div>\r\n        {payload[1] && (\r\n          <div style={{ fontWeight: 'bold', color: payload[1].color }}>\r\n            {p1Name}: {Math.round(payload[1].value)}\r\n          </div>\r\n        )}\r\n        {payload[0] && (\r\n          <div style={{ fontWeight: 'bold', color: payload[0].color }}>\r\n            {p2Name}: {Math.round(payload[0].value)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderRankingHistory() {\r\n    const { combinedData } = this.props;\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <LineChart data={combinedData.ratingChanges} margin={this.rhMargin}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"date\"\r\n            type=\"number\"\r\n            domain={this.rhXDomain}\r\n            tickFormatter={this.rhXTickFormatter}\r\n          />\r\n          <YAxis\r\n            allowDecimals={false}\r\n            domain={this.rhYDomain}\r\n            tickFormatter={Math.round}\r\n            width={40}\r\n          />\r\n          <ReferenceLine y={1000} stroke=\"white\" />\r\n          <RechartsTooltip isAnimationActive={false} content={this.rhTooltip} />\r\n          <Line\r\n            type=\"monotone\"\r\n            isAnimationActive={false}\r\n            dataKey=\"rating2\"\r\n            stroke=\"#ffd388\"\r\n            strokeWidth={3}\r\n            dot={false}\r\n          />\r\n          <Line\r\n            type=\"monotone\"\r\n            isAnimationActive={false}\r\n            dataKey=\"rating1\"\r\n            stroke=\"#88d3ff\"\r\n            strokeWidth={3}\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  circleShape = (args) => (\r\n    <circle key={args.key} cx={args.cx} cy={args.cy} r={4} fill={args.fill}></circle>\r\n  );\r\n  renderAccuracyPoints(useProfile2 = false) {\r\n    const { profile, profile2 } = this.props;\r\n\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <ScatterChart margin={{ top: 5, bottom: 5, right: 5, left: 0 }}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"[0]\"\r\n            type=\"number\"\r\n            domain={[1, 28]}\r\n            tickFormatter={(value) => Math.round(value)}\r\n            ticks={[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]}\r\n          />\r\n          <YAxis\r\n            dataKey=\"[1]\"\r\n            type=\"number\"\r\n            domain={[0, 100]}\r\n            width={40}\r\n            tickFormatter={(value) => Math.round(value) + '%'}\r\n          />\r\n          <Scatter\r\n            shape={this.circleShape}\r\n            data={(useProfile2 ? profile2 : profile).accuracyPointsRaw}\r\n            fill={useProfile2 ? '#ffd388' : '#88d3ff'}\r\n          />\r\n        </ScatterChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  renderPlaceHistory() {\r\n    const { combinedData, profile, profile2 } = this.props;\r\n    const p1Name = profile.name;\r\n    const p2Name = profile2.name;\r\n\r\n    return (\r\n      <ResponsiveContainer minHeight={MIN_GRAPH_HEIGHT} aspect={1.6}>\r\n        <LineChart\r\n          data={combinedData.placesChanges}\r\n          margin={{ top: 5, bottom: 5, right: 5, left: 0 }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            dataKey=\"date\"\r\n            type=\"number\"\r\n            domain={['dataMin', 'dataMax']}\r\n            tickFormatter={(value) => parseDate(value).toLocaleDateString()}\r\n          />\r\n          <YAxis\r\n            allowDecimals={false}\r\n            domain={[1, (dataMax) => (dataMax < 3 ? dataMax + 2 : dataMax + 1)]}\r\n            interval={0}\r\n            reversed\r\n            width={40}\r\n          />\r\n          <RechartsTooltip\r\n            isAnimationActive={false}\r\n            content={({ active, payload, label }) => {\r\n              if (!payload || !payload[0]) {\r\n                return null;\r\n              }\r\n              return (\r\n                <div className=\"history-tooltip\">\r\n                  <div>{parseDate(payload[0].payload.date).toLocaleDateString()}</div>\r\n                  {payload[1] && (\r\n                    <div style={{ fontWeight: 'bold', color: payload[1].color }}>\r\n                      {p1Name}: #{payload[1].value}\r\n                    </div>\r\n                  )}\r\n                  {payload[0] && (\r\n                    <div style={{ fontWeight: 'bold', color: payload[0].color }}>\r\n                      {p2Name}: #{payload[0].value}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              );\r\n            }}\r\n          />\r\n          <Line\r\n            isAnimationActive={false}\r\n            type=\"stepAfter\"\r\n            dataKey=\"place2\"\r\n            stroke=\"#ffd388\"\r\n            strokeWidth={3}\r\n            dot={false}\r\n          />\r\n          <Line\r\n            isAnimationActive={false}\r\n            type=\"stepAfter\"\r\n            dataKey=\"place1\"\r\n            stroke=\"#88d3ff\"\r\n            strokeWidth={3}\r\n            dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  plcMargin = { top: 5, bottom: 5, right: 5, left: 0 };\r\n  plcTooltip = ({ active, payload, label }) => {\r\n    const { profile, profile2 } = this.props;\r\n    const { compareBarsMode } = this.state;\r\n    const isTwo = [BARS_MODES.SINGLE_TWO, BARS_MODES.DOUBLE_TWO, BARS_MODES.BOTH_TWO].includes(\r\n      compareBarsMode\r\n    );\r\n    const p1Name = profile.name;\r\n    const p2Name = profile2.name;\r\n\r\n    if (!payload || !payload[0]) {\r\n      return null;\r\n    }\r\n    const renderLegendItem = (item, label) => (\r\n      <div key={item.name} style={{ fontWeight: 'bold', color: item.color }}>\r\n        {label}: {Math.round(_.get(item.dataKey, item.payload) * 100)}%\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"history-tooltip\">\r\n        <div>Level: {payload[0].payload.x}</div>\r\n        {renderLegendItem(payload[0], `${p1Name} wins`)}\r\n        {!isTwo && renderLegendItem(payload[1], `${p2Name} has no score`)}\r\n        {!isTwo && renderLegendItem(payload[2], `Both have no score`)}\r\n        {!isTwo && renderLegendItem(payload[3], `${p1Name} has no score`)}\r\n        {renderLegendItem(isTwo ? payload[1] : payload[4], `${p2Name} wins`)}\r\n      </div>\r\n    );\r\n  };\r\n  plcXDomain = [0, 1];\r\n  plcXTicks = [0, 0.5, 1];\r\n  plcXFormatter = (x) => `${Math.round(x * 100)}%`;\r\n\r\n  renderPerLevelComparison() {\r\n    const { combinedData } = this.props;\r\n    const { compareBarsMode } = this.state;\r\n\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" aspect={0.7}>\r\n        <BarChart\r\n          layout=\"vertical\"\r\n          data={[...combinedData.perLevelComparison]}\r\n          margin={this.plcMargin}\r\n        >\r\n          <RechartsTooltip isAnimationActive={false} content={this.plcTooltip} />\r\n          <YAxis reversed dataKey=\"x\" type=\"category\" width={23} />\r\n          <XAxis\r\n            type=\"number\"\r\n            domain={this.plcXDomain}\r\n            ticks={this.plcXTicks}\r\n            tickFormatter={this.plcXFormatter}\r\n          />\r\n          <ReferenceLine x={0.5} stroke=\"#666\" />\r\n          {getCompareBars(compareBarsMode)}\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  renderProfile() {\r\n    const { profile, profile2, filter, otherPlayers } = this.props;\r\n    const { compareBarsMode } = this.state;\r\n    return (\r\n      <div className=\"profile\">\r\n        <div className=\"profile-header\">\r\n          <div className=\"profile-name text-with-header blue\">\r\n            <div className=\"text-header\">игрок</div>\r\n            <div>{profile.name}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">ранк</div>\r\n            <div>#{profile.rank}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">эло</div>\r\n            <div>{profile.rating}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">последняя игра</div>\r\n            <div>{profile.lastResultDate ? getTimeAgo(profile.lastResultDate) : 'никогда'}</div>\r\n          </div>\r\n          <div className=\"_flex-fill\"></div>\r\n          <div className=\"text-with-header -select\">\r\n            <div className=\"text-header\">сравнить с</div>\r\n            <div>\r\n              <Select\r\n                closeMenuOnSelect\r\n                className=\"select players\"\r\n                classNamePrefix=\"select\"\r\n                placeholder=\"игроки...\"\r\n                options={otherPlayers}\r\n                onChange={(value) => {\r\n                  this.props.history.push(\r\n                    routes.profile.compare.getPath({ id: profile.id, compareToId: value.id })\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-header right-align\">\r\n          <div className=\"profile-name text-with-header orange\">\r\n            <div className=\"text-header\">игрок</div>\r\n            <div>{profile2.name}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">ранк</div>\r\n            <div>#{profile2.rank}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">эло</div>\r\n            <div>{profile2.rating}</div>\r\n          </div>\r\n          <div className=\"text-with-header\">\r\n            <div className=\"text-header\">последняя игра</div>\r\n            <div>{profile2.lastResultDate ? getTimeAgo(profile2.lastResultDate) : 'никогда'}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-section-horizontal-container\">\r\n          <div className=\"profile-section\">\r\n            <div className=\"profile-section-content\">\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header flex\">\r\n                  <span>победы по уровням</span>\r\n                </div>\r\n                <div className=\"profile-sm-section-header flex\">\r\n                  {(() => {\r\n                    const isTwo = [\r\n                      BARS_MODES.SINGLE_TWO,\r\n                      BARS_MODES.DOUBLE_TWO,\r\n                      BARS_MODES.BOTH_TWO,\r\n                    ].includes(compareBarsMode);\r\n                    return (\r\n                      <div className=\"toggle-holder\">\r\n                        <Toggle\r\n                          className=\"combine-toggle\"\r\n                          checked={!isTwo}\r\n                          onChange={() =>\r\n                            this.setState((state) => ({\r\n                              compareBarsMode: {\r\n                                [BARS_MODES.SINGLE_TWO]: BARS_MODES.SINGLE_FIVE,\r\n                                [BARS_MODES.DOUBLE_TWO]: BARS_MODES.DOUBLE_FIVE,\r\n                                [BARS_MODES.BOTH_TWO]: BARS_MODES.BOTH_FIVE,\r\n                                [BARS_MODES.SINGLE_FIVE]: BARS_MODES.SINGLE_TWO,\r\n                                [BARS_MODES.DOUBLE_FIVE]: BARS_MODES.DOUBLE_TWO,\r\n                                [BARS_MODES.BOTH_FIVE]: BARS_MODES.BOTH_TWO,\r\n                              }[state.compareBarsMode],\r\n                            }))\r\n                          }\r\n                        >\r\n                          подробно\r\n                        </Toggle>\r\n                        <div className=\"tabs-holder\">\r\n                          <ToggleButton\r\n                            text=\"все\"\r\n                            active={[BARS_MODES.BOTH_TWO, BARS_MODES.BOTH_FIVE].includes(\r\n                              compareBarsMode\r\n                            )}\r\n                            onToggle={() => {\r\n                              this.setState((state) => ({\r\n                                compareBarsMode: isTwo ? BARS_MODES.BOTH_TWO : BARS_MODES.BOTH_FIVE,\r\n                              }));\r\n                            }}\r\n                          />\r\n                          <ToggleButton\r\n                            text=\"синглы\"\r\n                            active={[BARS_MODES.SINGLE_TWO, BARS_MODES.SINGLE_FIVE].includes(\r\n                              compareBarsMode\r\n                            )}\r\n                            onToggle={(active) => {\r\n                              this.setState((state) => ({\r\n                                compareBarsMode: isTwo\r\n                                  ? BARS_MODES.SINGLE_TWO\r\n                                  : BARS_MODES.SINGLE_FIVE,\r\n                              }));\r\n                            }}\r\n                          />\r\n                          <ToggleButton\r\n                            text=\"даблы\"\r\n                            active={[BARS_MODES.DOUBLE_TWO, BARS_MODES.DOUBLE_FIVE].includes(\r\n                              compareBarsMode\r\n                            )}\r\n                            onToggle={(active) => {\r\n                              this.setState((state) => ({\r\n                                compareBarsMode: isTwo\r\n                                  ? BARS_MODES.DOUBLE_TWO\r\n                                  : BARS_MODES.DOUBLE_FIVE,\r\n                              }));\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })()}\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderPerLevelComparison()}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"profile-section\">\r\n            <div className=\"profile-section-content\">\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header\">\r\n                  <span>эло</span>\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderRankingHistory()}</div>\r\n              </div>\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header\">\r\n                  <span>место в топе</span>\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderPlaceHistory()}</div>\r\n              </div>\r\n            </div>\r\n            {(() => {\r\n              const currentRange = filter.dayRange || profile.filterRange;\r\n              const dateL = moment(currentRange[0] * 1000 * 60 * 60 * 24).format('L');\r\n              const dateR = moment(currentRange[1] * 1000 * 60 * 60 * 24).format('L');\r\n              const l1 = Math.max(currentRange[0] - 1, profile.minMaxRange[0]);\r\n              const l2 = Math.min(currentRange[0] + 1, currentRange[1]);\r\n              const r1 = Math.max(currentRange[1] - 1, currentRange[0]);\r\n              const r2 = Math.min(currentRange[1] + 1, profile.minMaxRange[1]);\r\n              return (\r\n                <div className=\"range-container\">\r\n                  <Range\r\n                    range={currentRange}\r\n                    min={profile.minMaxRange[0]}\r\n                    max={profile.minMaxRange[1]}\r\n                    onChange={this.onChangeDayRange}\r\n                  />\r\n                  <div className=\"range-controls _flex-row\">\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([l1, currentRange[1]])}\r\n                    >\r\n                      <FaCaretLeft />\r\n                    </button>\r\n                    <span className=\"date-text\">{dateL}</span>\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([l2, currentRange[1]])}\r\n                    >\r\n                      <FaCaretRight />\r\n                    </button>\r\n                    <div className=\"_flex-fill\"></div>\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([currentRange[0], r1])}\r\n                    >\r\n                      <FaCaretLeft />\r\n                    </button>\r\n                    <span className=\"date-text\">{dateR}</span>\r\n                    <button\r\n                      className=\"btn btn-sm btn-dark\"\r\n                      onClick={() => this.onChangeDayRange([currentRange[0], r2])}\r\n                    >\r\n                      <FaCaretRight />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })()}\r\n          </div>\r\n        </div>\r\n        <div className=\"profile-section-horizontal-container\">\r\n          <div className=\"profile-section\">\r\n            <div className=\"profile-section-content\">\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header\">\r\n                  <span>точность по уровням</span>\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderAccuracyPoints()}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"profile-section\">\r\n            <div className=\"profile-section-content\">\r\n              <div className=\"profile-section-2\">\r\n                <div className=\"profile-sm-section-header\">\r\n                  <span>точность по уровням</span>\r\n                </div>\r\n                <div className=\"chart-container\">{this.renderAccuracyPoints(true)}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, profile, error } = this.props;\r\n    DEBUG && console.log('profile:', profile);\r\n    return (\r\n      <div className=\"profile-compare-page\">\r\n        <div className=\"content\">\r\n          {error && error.message}\r\n          <div className=\"top-controls\">\r\n            <div className=\"_flex-fill\" />\r\n            <button\r\n              disabled={isLoading}\r\n              className=\"btn btn-sm btn-dark btn-icon\"\r\n              onClick={this.onRefresh}\r\n            >\r\n              <FaSearch /> обновить\r\n            </button>\r\n          </div>\r\n          {isLoading && <Loader />}\r\n          {!isLoading && _.isEmpty(profile) && <div className=\"profile\">Profile not found</div>}\r\n          {!isLoading && !_.isEmpty(profile) && this.renderProfile()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ProfileCompare));\r\n","import { fetchJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\nimport { RESET } from './resetAction';\r\n\r\nconst LOADING = `USER/LOADING`;\r\nconst SUCCESS = `USER/SUCCESS`;\r\nconst ERROR = `USER/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        data: null,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n        data: null,\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    case RESET:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchUser = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/profile` }));\r\n      dispatch({ type: SUCCESS, data });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n\r\nexport { resetUser } from './resetAction';\r\n","import cookies from 'browser-cookies';\r\n\r\nimport { postJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nimport { fetchUser, resetUser } from 'reducers/user';\r\n\r\nconst LOADING = `LOGIN/LOADING`;\r\nconst SUCCESS = `LOGIN/SUCCESS`;\r\nconst ERROR = `LOGIN/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        data: null,\r\n        error: null,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n        data: null,\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const login = googleResponse => {\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(\r\n        postJson({\r\n          url: `${HOST}/login/google`,\r\n          body: { token: googleResponse.tokenId },\r\n        })\r\n      );\r\n      cookies.set('session', data.session, { expires: 30 });\r\n      dispatch({ type: SUCCESS, data });\r\n      dispatch(fetchUser());\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING });\r\n    dispatch(resetUser());\r\n    try {\r\n      const data = await dispatch(\r\n        postJson({\r\n          url: `${HOST}/logout`,\r\n        })\r\n      );\r\n      dispatch({ type: SUCCESS, data });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport _ from 'lodash/fp';\r\n\r\nimport './top-bar.scss';\r\n\r\n// routes\r\nimport { routes } from 'constants/routes';\r\n\r\n// reducers\r\nimport * as loginACs from 'reducers/login';\r\n\r\nimport { useLanguage } from 'utils/context/translation';\r\n\r\n// redux\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoadingLogin: state.login.isLoading,\r\n    isLoadingUser: state.user.isLoading,\r\n    user: state.user.data,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  login: loginACs.login,\r\n  logout: loginACs.logout,\r\n};\r\n\r\nfunction TopBar({ isLoadingLogin, isLoadingUser, user, login, logout }) {\r\n  const lang = useLanguage();\r\n  return (\r\n    <header className=\"top-bar\">\r\n      <nav>\r\n        <ul>\r\n          <li>\r\n            <NavLink exact to={routes.leaderboard.path}>\r\n              {lang.LEADERBOARDS}\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink exact to={routes.ranking.path}>\r\n              {lang.RANKING}\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink exact to={routes.tournaments.path}>\r\n              {lang.TOURNAMENTS}\r\n            </NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink exact to={routes.songs.path}>\r\n              {lang.SONGS}\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n      <div className=\"_flex-fill\" />\r\n      <div className=\"login-container\">\r\n        <NavLink\r\n          className=\"player-info\"\r\n          exact\r\n          to={routes.profile.getPath({ id: _.get('player.id', user) })}\r\n        >\r\n          {_.getOr('', 'player.nickname', user)}\r\n        </NavLink>\r\n        <button\r\n          className=\"btn btn-dark btn-icon btn-sm\"\r\n          onClick={logout}\r\n          disabled={isLoadingLogin || isLoadingUser}\r\n        >\r\n          <span> {lang.LOGOUT}</span>\r\n        </button>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TopBar);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { FaGoogle } from 'react-icons/fa';\r\nimport Emoji from 'react-emoji-render';\r\n\r\nimport './login-screen.scss';\r\n\r\n// reducers\r\nimport * as loginACs from 'reducers/login';\r\n\r\n// redux\r\nconst mapStateToProps = state => {\r\n  return {\r\n    isLoading: state.login.isLoading,\r\n    error: state.login.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  login: loginACs.login,\r\n};\r\n\r\nfunction LoginScreen({ isLoading, error, login }) {\r\n  const [isClown, setClown] = useState(false);\r\n  const onGoogleResponse = res => {\r\n    if (res.error) {\r\n      console.log('Google login response error:', res);\r\n    } else {\r\n      login(res);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-screen\">\r\n      <div className=\"site-name\">pumpking</div>\r\n      <div className=\"login-button\">\r\n        <GoogleLogin\r\n          clientId=\"197132042723-cmibep21qf6dald9l2l01rif7l5dtd4s.apps.googleusercontent.com\"\r\n          buttonText=\"Login\"\r\n          onSuccess={onGoogleResponse}\r\n          onFailure={onGoogleResponse}\r\n          cookiePolicy={'single_host_origin'}\r\n          render={({ onClick, disabled }) => (\r\n            <button\r\n              className=\"btn btn-dark btn-icon btn-sm\"\r\n              onClick={onClick}\r\n              disabled={disabled || isLoading}\r\n            >\r\n              <FaGoogle />\r\n              <span> login</span>\r\n            </button>\r\n          )}\r\n        />\r\n      </div>\r\n      {error && <div className=\"error\">{error.message}</div>}\r\n      <div className=\"footer\">\r\n        By logging in, you agree to our{' '}\r\n        {isClown ? (\r\n          <Emoji text=\"🤡\" className=\"clown\" />\r\n        ) : (\r\n          <span onClick={() => setClown(true)} className=\"link-style\">\r\n            Privacy Policy\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(LoginScreen);\r\n","export const TYPES = {\r\n  ACHIEVEMENT: 'ACHIEVEMENT',\r\n  RANK_UP: 'RANK_UP',\r\n};\r\n","import _ from 'lodash/fp';\r\n\r\nconst ADD_POPUP = `POPUPS/ADD`;\r\nconst REMOVE_POPUP = `POPUPS/REMOVE`;\r\n\r\nconst ID_PREFIX = 'popup';\r\n\r\nconst initialState = {\r\n  popups: [],\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_POPUP:\r\n      const id = _.uniqueId(ID_PREFIX);\r\n      return {\r\n        ...state,\r\n        popups: [\r\n          ...state.popups,\r\n          {\r\n            id,\r\n            type: action.popupType,\r\n            ..._.pick(['parameters', 'fadeIn', 'fadeOut', 'timeout', 'persistent'], action),\r\n          },\r\n        ],\r\n      };\r\n    case REMOVE_POPUP:\r\n      return {\r\n        ...state,\r\n        popups: _.remove({ id: action.id }, state.popups),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const addPopup = ({ type, parameters, fadeIn, fadeOut, timeout, persistent }) => {\r\n  return { type: ADD_POPUP, popupType: type, parameters, fadeIn, fadeOut, timeout, persistent };\r\n};\r\n\r\nexport const removePopup = ({ id }) => {\r\n  return { type: REMOVE_POPUP, id };\r\n};\r\n","import React, { useEffect, useCallback, useState, useRef } from 'react';\r\nimport toBe from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport ReactModal from 'react-modal';\r\nimport _ from 'lodash/fp';\r\n\r\nimport './popups.scss';\r\n\r\nimport { TYPES } from 'constants/popups';\r\n\r\nimport { removePopup } from 'reducers/popups';\r\n\r\nimport AchievementPopup from './AchievementPopup';\r\nimport RankUpPopup from './RankUpPopup';\r\n\r\nconst popupByType = {\r\n  [TYPES.ACHIEVEMENT]: AchievementPopup,\r\n  [TYPES.RANK_UP]: RankUpPopup,\r\n};\r\n\r\nconst popupStyles = {\r\n  overlay: {\r\n    backgroundColor: 'rgba(0, 0, 0, 0.1)',\r\n  },\r\n  content: {\r\n    top: null,\r\n    bottom: null,\r\n    left: null,\r\n    right: null,\r\n    position: null,\r\n    borderRadius: null,\r\n    padding: null,\r\n    background: null,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: '100%',\r\n    height: '100%',\r\n    transition: '2.5s opacity ease',\r\n    opacity: 1,\r\n  },\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    popups: state.popups.popups,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  removePopup,\r\n};\r\n\r\nconst Popups = ({ popups, removePopup }) => {\r\n  const [visiblePopup, setVisiblePopup] = useState(null);\r\n  const contentRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (popups.length > 0) {\r\n      const popup = popups[0];\r\n      setVisiblePopup(popup);\r\n      if (!popup.persistent) {\r\n        setTimeout(() => {\r\n          if (popup && popup.fadeOut) {\r\n            contentRef.current.style.opacity = 0;\r\n            setTimeout(() => {\r\n              setVisiblePopup(null);\r\n              removePopup(popup);\r\n            }, 2500);\r\n          } else {\r\n            setVisiblePopup(null);\r\n            removePopup(popup);\r\n          }\r\n        }, popup.timeout || 6000);\r\n      }\r\n    } else {\r\n      setVisiblePopup(null);\r\n    }\r\n  }, [popups, removePopup]);\r\n\r\n  const onAfterOpen = useCallback(() => {\r\n    if (visiblePopup && visiblePopup.fadeIn) {\r\n      contentRef.current.style.opacity = 1;\r\n    }\r\n  }, [visiblePopup]);\r\n\r\n  let style = popupStyles;\r\n  let popupBody = null;\r\n  if (visiblePopup) {\r\n    const PopupComponent = popupByType[visiblePopup.type];\r\n    popupBody = PopupComponent ? (\r\n      <PopupComponent {...visiblePopup.parameters} />\r\n    ) : (\r\n      <div>{JSON.stringify(visiblePopup)}</div>\r\n    );\r\n\r\n    if (visiblePopup.fadeIn) {\r\n      style = _.set('content.opacity', 0, popupStyles);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"popups-holder\">\r\n      <ReactModal\r\n        isOpen={!!visiblePopup}\r\n        contentRef={(ref) => (contentRef.current = ref)}\r\n        onAfterOpen={onAfterOpen}\r\n        style={style}\r\n      >\r\n        {popupBody}\r\n      </ReactModal>\r\n    </div>\r\n  );\r\n};\r\nPopups.propTypes = {\r\n  popups: toBe.array,\r\n  removePopup: toBe.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Popups);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { GiAchievement } from 'react-icons/gi';\r\nimport classNames from 'classnames';\r\n\r\nimport { achievements } from 'utils/achievements';\r\n\r\nconst renderAchievement = (achName, progress) => {\r\n  const Icon = achievements[achName].icon;\r\n  return (\r\n    <div className=\"ach-block\">\r\n      {Icon && (\r\n        <div className=\"ach-icon\">\r\n          <Icon />\r\n        </div>\r\n      )}\r\n      <div className=\"ach-name\">{achName}</div>\r\n      <div\r\n        className={classNames('progress-background', {\r\n          complete: progress === 100,\r\n          zero: progress === 0,\r\n        })}\r\n        style={{\r\n          height: `${Math.round(progress)}%`,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst AchievementPopup = ({ playerName, achievementName, progress }) => {\r\n  const [progressNumber, setProgressNumber] = useState(progress[0]);\r\n\r\n  useEffect(() => {\r\n    setProgressNumber(progress[1]);\r\n  }, []); // eslint-disable-line\r\n\r\n  return (\r\n    <div className=\"achievement-popup popup\">\r\n      <div className=\"player\">\r\n        <GiAchievement />\r\n        <span>{playerName}</span>\r\n        <GiAchievement />\r\n      </div>\r\n      <div className=\"ach-holder\">{renderAchievement(achievementName, progressNumber)}</div>\r\n      <div className=\"description\">{achievements[achievementName].description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AchievementPopup;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { GiAchievement } from 'react-icons/gi';\r\nimport _ from 'lodash/fp';\r\nimport FlipMove from 'react-flip-move';\r\nimport classNames from 'classnames';\r\n\r\nconst renderPlayerLine = (pl, isCurrentPlayer) => {\r\n  return (\r\n    <div className={`closest-player ${isCurrentPlayer ? 'current-player' : ''}`}>\r\n      <div className=\"place\">#{pl.place}</div>\r\n      <div className=\"name\">{pl.name}</div>\r\n      <div className=\"elo\">{pl.rating}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RankUpPopup = ({ playerName, place: [prevPlace, currPlace], list: [prevList, currList] }) => {\r\n  const [place, setPlace] = useState(prevPlace);\r\n  const [list, setList] = useState(prevList);\r\n\r\n  useEffect(() => {\r\n    setList(currList);\r\n    setPlace(currPlace);\r\n  }, []); // eslint-disable-line\r\n\r\n  const listTop = Math.min(0, Math.max(-60 * (_.size(list) - 7), -60 * (place - 4)));\r\n  return (\r\n    <div className=\"rank-up-popup popup\">\r\n      <div className=\"player\">\r\n        <GiAchievement />\r\n        <span>{playerName}</span>\r\n        <GiAchievement />\r\n      </div>\r\n      <div className=\"ranking-holder\">\r\n        <div className=\"moving-list\" style={{ top: listTop }}>\r\n          <FlipMove duration={4500} delay={2000} maintainContainerHeight>\r\n            {list.map((pl, index) => {\r\n              return (\r\n                <div\r\n                  key={pl.id}\r\n                  className={classNames('player-block', { current: index === place - 1 })}\r\n                >\r\n                  {renderPlayerLine(pl, index === place - 1)}\r\n                </div>\r\n              );\r\n            })}\r\n          </FlipMove>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RankUpPopup;\r\n","import { fetchJson } from 'utils/fetch';\r\nimport queryString from 'query-string';\r\nimport _ from 'lodash/fp';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nimport { preprocessData } from 'components/SocketTracker/helpers';\r\n\r\nconst LOADING = `TOP_PER_SONG/LOADING`;\r\nconst SUCCESS = `TOP_PER_SONG/SUCCESS`;\r\nconst ERROR = `TOP_PER_SONG/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: null,\r\n  error: null,\r\n  fetchingParams: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        fetchingParams: action.fetchingParams,\r\n        data: null,\r\n        error: null,\r\n      };\r\n    case ERROR:\r\n      return action.fetchingParams === state.fetchingParams\r\n        ? {\r\n            ...state,\r\n            isLoading: false,\r\n            error: action.error,\r\n            data: null,\r\n            fetchingParams: null,\r\n          }\r\n        : state;\r\n    case SUCCESS:\r\n      return action.fetchingParams === state.fetchingParams\r\n        ? {\r\n            ...state,\r\n            isLoading: false,\r\n            data: action.data,\r\n            fetchingParams: null,\r\n          }\r\n        : state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchTopPerSong = (songName, leftLabel, rightLabel) => {\r\n  const fetchingParams = queryString.stringify({\r\n    song_name: songName,\r\n    charts: _.compact(_.uniq([leftLabel, rightLabel])).join(','),\r\n  });\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING, fetchingParams });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/topPerSong?${fetchingParams}` }));\r\n      const processedData = _.flow(preprocessData, _.get('results'))(data);\r\n      dispatch({ type: SUCCESS, data: processedData, fetchingParams });\r\n      return processedData;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error, fetchingParams });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import React, { useCallback } from 'react';\r\nimport _ from 'lodash/fp';\r\n\r\nimport { TYPES } from 'constants/popups';\r\n\r\nimport ChartLabel from 'components/Leaderboard/ChartLabel';\r\n\r\nimport { useTrackedEx } from './helpers';\r\n\r\nimport { getRankImg } from 'utils/exp';\r\nimport { labelToTypeLevel } from 'utils/leaderboards';\r\n\r\nexport const PlayerCard = ({\r\n  player,\r\n  profile,\r\n  label,\r\n  trackedData,\r\n  isLeft = false,\r\n  preferences,\r\n  topPlayersList,\r\n  addPopup,\r\n}) => {\r\n  const playersHiddenStatus = _.getOr({}, 'playersHiddenStatus', preferences);\r\n\r\n  const renderDeltaText = (n, prevN) => {\r\n    if (!prevN || prevN === n) {\r\n      return null;\r\n    }\r\n    const delta = n - prevN;\r\n    return (\r\n      <span className={`change ${delta >= 0 ? 'pos' : 'neg'}`}>\r\n        {delta < 0 ? delta.toFixed(1) : `+${delta.toFixed(1)}`}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderExpLine = () => {\r\n    if (!profile.expRank || !profile.exp) {\r\n      return null;\r\n    }\r\n\r\n    let takenWidth = profile.expRankNext\r\n      ? (profile.exp - profile.expRank.threshold) /\r\n        (profile.expRankNext.threshold - profile.expRank.threshold)\r\n      : 1;\r\n    const emptyWidth = 1 - takenWidth;\r\n    let diffWidth = 0;\r\n\r\n    if (trackedData.exp[1]) {\r\n      takenWidth = profile.expRankNext\r\n        ? (trackedData.exp[1] - profile.expRank.threshold) /\r\n          (profile.expRankNext.threshold - profile.expRank.threshold)\r\n        : 1;\r\n      diffWidth = 1 - emptyWidth - takenWidth;\r\n    }\r\n    return (\r\n      <div className=\"exp-line\">\r\n        <div className=\"taken\" style={{ width: Math.floor(100 * takenWidth) + '%' }}></div>\r\n        <div className=\"diff\" style={{ width: Math.ceil(100 * diffWidth) + '%' }}></div>\r\n        <div className=\"rest\" style={{ width: Math.ceil(100 * emptyWidth) + '%' }}></div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const rivals = topPlayersList.filter((pl) => !playersHiddenStatus[pl.id]);\r\n  const playerIndex = _.findIndex({ id: profile.id }, rivals);\r\n  const closestPlayers =\r\n    playerIndex < 0\r\n      ? []\r\n      : rivals.slice(Math.max(0, playerIndex - 2), Math.min(playerIndex + 3, rivals.length));\r\n\r\n  useTrackedEx({\r\n    data: topPlayersList,\r\n    resetData: profile.name,\r\n    isDataValid: useCallback(_.get('[0].rating'), []), // top list is only valid when rating is calculated\r\n    onChange: useCallback(\r\n      (prevList, currList) => {\r\n        const prevPlace = _.get('place', _.find({ id: profile.id }, prevList));\r\n        const currPlace = _.get('place', _.find({ id: profile.id }, currList));\r\n        // console.log('List update:', prevList, currList, prevPlace, currPlace);\r\n        if (prevPlace && currPlace && prevPlace > currPlace) {\r\n          // console.log('Place update:', profile.name, prevPlace, currPlace);\r\n          addPopup({\r\n            type: TYPES.RANK_UP,\r\n            fadeIn: true,\r\n            fadeOut: true,\r\n            timeout: 7500,\r\n            parameters: {\r\n              playerName: profile.name,\r\n              place: [prevPlace, currPlace],\r\n              list: [prevList, currList],\r\n            },\r\n          });\r\n        }\r\n      },\r\n      [addPopup, profile.id, profile.name]\r\n    ),\r\n  });\r\n\r\n  const [type, level] = labelToTypeLevel(label);\r\n\r\n  return (\r\n    <div className={`player-container ${isLeft ? 'left' : 'right'}`}>\r\n      {player && (\r\n        <>\r\n          {/* <div className=\"title-header\">player {isLeft ? 1 : 2}:</div> */}\r\n          <div className=\"name-with-label\">\r\n            <div className=\"name\">{profile.name || player}</div>\r\n            <div className=\"chart-label\">\r\n              <ChartLabel type={type} level={level} />\r\n            </div>\r\n          </div>\r\n          {profile.exp && profile.expRank && (\r\n            <div className=\"exp exp-rank\">\r\n              {getRankImg(profile.expRank)}\r\n              {renderExpLine()}\r\n            </div>\r\n          )}\r\n          {trackedData.exp[0] && (\r\n            <div className=\"exp-text\">\r\n              <span className=\"_grey-text\">exp:</span>\r\n              <span>{Math.round(trackedData.exp[0])}</span>\r\n              {renderDeltaText(trackedData.exp[0], trackedData.exp[1])}\r\n            </div>\r\n          )}\r\n          {trackedData.elo[0] && (\r\n            <div className=\"rating\">\r\n              <span className=\"_grey-text\">elo:</span>\r\n              <span>{Math.round(trackedData.elo[0])}</span>\r\n              {renderDeltaText(trackedData.elo[0], trackedData.elo[1])}\r\n            </div>\r\n          )}\r\n          {trackedData.pp[0] && (\r\n            <div className=\"rating\">\r\n              <span className=\"_grey-text\">pp:</span>\r\n              <span>{Math.round(trackedData.pp[0])}</span>\r\n              {renderDeltaText(trackedData.pp[0], trackedData.pp[1])}\r\n            </div>\r\n          )}\r\n          <div className=\"closest-players\">\r\n            {_.map((pl) => {\r\n              return (\r\n                <div className={`closest-player ${profile.id === pl.id ? 'current-player' : ''}`}>\r\n                  <div className=\"place\">#{pl.place}</div>\r\n                  <div className=\"name\">{pl.name}</div>\r\n                  <div className=\"elo\">{pl.rating}</div>\r\n                </div>\r\n              );\r\n            }, closestPlayers)}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport _ from 'lodash/fp';\r\nimport { createSelector } from 'reselect';\r\nimport lev from 'fast-levenshtein';\r\n\r\nimport './socket.scss';\r\n\r\nimport { SOCKET_SERVER_IP } from 'constants/backend';\r\n\r\nimport Popups from 'components/Shared/Popups';\r\nimport Loader from 'components/Shared/Loader';\r\n\r\nimport { appendNewResults } from 'reducers/results';\r\nimport { fetchTopPerSong } from 'reducers/topPerSong';\r\nimport { fetchUserPreferences } from 'reducers/preferences';\r\nimport { addPopup } from 'reducers/popups';\r\n\r\nimport { useTracked, useResetTrackedObject } from './helpers';\r\n\r\nimport { PlayerCard } from './PlayerCard';\r\nimport Chart from 'components/Leaderboard/Chart';\r\nimport { TYPES } from 'constants/popups';\r\n\r\n// code\r\nconst STATE_RESET_TIMEOUT_SEC = 5 * 60 + 10; // 5 minutes 10 seconds\r\n\r\nconst topPlayersListSelector = createSelector(\r\n  (state) => state.results.profiles,\r\n  _.flow(_.values, _.orderBy('ratingRaw', 'desc'), (items) =>\r\n    items.map((it, index) => ({ place: index + 1, ..._.pick(['id', 'name', 'rating'], it) }))\r\n  )\r\n);\r\n\r\n// redux\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLoading: state.topPerSong.isLoading,\r\n    songTopData: state.topPerSong.data,\r\n    error: state.topPerSong.error,\r\n    profiles: state.results.profiles,\r\n    topPlayersList: topPlayersListSelector(state),\r\n    sharedCharts: state.results.sharedCharts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  fetchTopPerSong,\r\n  appendNewResults,\r\n  addPopup,\r\n  fetchUserPreferences,\r\n};\r\n\r\nfunction TrackerApp({\r\n  isLoading,\r\n  fetchTopPerSong,\r\n  fetchUserPreferences,\r\n  appendNewResults,\r\n  songTopData,\r\n  error,\r\n  profiles,\r\n  topPlayersList,\r\n  sharedCharts = {},\r\n  addPopup,\r\n}) {\r\n  // useEffect(() => {\r\n  //   addPopup({\r\n  //     type: TYPES.ACHIEVEMENT,\r\n  //     fadeIn: true,\r\n  //     fadeOut: true,\r\n  //     // persistent: true,\r\n  //     parameters: {\r\n  //       playerName: 'grumd',\r\n  //       achievementName: 'Падовый мисс',\r\n  //       progress: [0, 100],\r\n  //     },\r\n  //   });\r\n  //   addPopup({\r\n  //     type: TYPES.ACHIEVEMENT,\r\n  //     fadeIn: true,\r\n  //     fadeOut: true,\r\n  //     parameters: {\r\n  //       playerName: 'Dino',\r\n  //       achievementName: 'Мастер фингеринга',\r\n  //       progress: [33, 66],\r\n  //     },\r\n  //   });\r\n  // }, [addPopup]);\r\n  // useEffect(() => {\r\n  //   if (_.get('[0].rating', topPlayersList)) {\r\n  //     const prevList = [...topPlayersList];\r\n  //     const p = 30,\r\n  //       c = 26;\r\n  //     const currList = _.pullAt(p - 1, topPlayersList);\r\n  //     currList.splice(c - 1, 0, topPlayersList[p - 1]);\r\n  //     addPopup({\r\n  //       type: TYPES.RANK_UP,\r\n  //       fadeIn: true,\r\n  //       fadeOut: true,\r\n  //       persistent: true,\r\n  //       parameters: {\r\n  //         playerName: 'grumd',\r\n  //         place: [p, c],\r\n  //         list: [prevList, currList],\r\n  //       },\r\n  //     });\r\n  //   }\r\n  // }, [addPopup, topPlayersList]);\r\n\r\n  // Setup\r\n  const [message, setMessage] = useState('');\r\n  const [socketErrorMessage, setSocketErrorMessage] = useState('');\r\n  const [isSocketReady, setSocketReady] = useState(false);\r\n  const [isAlive, setAlive] = useState(null);\r\n  const [leftLabel, setLeftLabel] = useState(null);\r\n  const [rightLabel, setRightLabel] = useState(null);\r\n  const [leftPlayer, setLeftPlayer] = useState(null);\r\n  const [rightPlayer, setRightPlayer] = useState(null);\r\n  const [recognizedSongName, setRecognizedSongName] = useState('');\r\n  const [leftPreferences, setLeftPreferences] = useState(null);\r\n  const [rightPreferences, setRightPreferences] = useState(null);\r\n\r\n  const resultsContainerRef = useRef(null);\r\n  const leftResultRef = useRef(null);\r\n  const rightResultRef = useRef(null);\r\n\r\n  const socketRef = useRef(null);\r\n  const timeoutResetTokenRef = useRef(null);\r\n\r\n  // Get profile objects from player names\r\n  const leftProfile = useMemo(() => {\r\n    if (!leftPlayer || _.isEmpty(profiles)) return {};\r\n    return _.minBy((p) => lev.get(p.nameArcade, leftPlayer), _.values(profiles)) || {};\r\n  }, [leftPlayer, profiles]);\r\n  const rightProfile = useMemo(() => {\r\n    if (!rightPlayer || _.isEmpty(profiles)) return {};\r\n    return _.minBy((p) => lev.get(p.nameArcade, rightPlayer), _.values(profiles)) || {};\r\n  }, [rightPlayer, profiles]);\r\n\r\n  const onChangeAchievements = (playerName) => (prevAchievement, currAchievement) => {\r\n    _.keys(prevAchievement).forEach((achievementName) => {\r\n      if (prevAchievement[achievementName].progress !== currAchievement[achievementName].progress) {\r\n        addPopup({\r\n          type: TYPES.ACHIEVEMENT,\r\n          fadeIn: true,\r\n          fadeOut: true,\r\n          parameters: {\r\n            playerName,\r\n            achievementName,\r\n            progress: [\r\n              prevAchievement[achievementName].progress,\r\n              currAchievement[achievementName].progress,\r\n            ],\r\n          },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  // Track changes in profiles\r\n  const leftTracked = {\r\n    pp: useTracked(_.get('pp.pp', leftProfile), leftProfile.name),\r\n    elo: useTracked(leftProfile.ratingRaw, leftProfile.name),\r\n    exp: useTracked(leftProfile.exp, leftProfile.name),\r\n    expRank: useTracked(leftProfile.expRank, leftProfile.name),\r\n    achievements: useTracked(\r\n      leftProfile.achievements,\r\n      leftProfile.name,\r\n      onChangeAchievements(leftProfile.name)\r\n    ),\r\n  };\r\n  const resetLeftTracked = useResetTrackedObject(leftTracked);\r\n  const rightTracked = {\r\n    pp: useTracked(_.get('pp.pp', rightProfile), rightProfile.name),\r\n    elo: useTracked(rightProfile.ratingRaw, rightProfile.name),\r\n    exp: useTracked(rightProfile.exp, rightProfile.name),\r\n    expRank: useTracked(rightProfile.expRank, rightProfile.name),\r\n    achievements: useTracked(\r\n      rightProfile.achievements,\r\n      rightProfile.name,\r\n      onChangeAchievements(rightProfile.name)\r\n    ),\r\n  };\r\n  const resetRightTracked = useResetTrackedObject(rightTracked);\r\n\r\n  // Fetch preferences when player id changes\r\n  useEffect(() => {\r\n    if (leftProfile.id) {\r\n      fetchUserPreferences(leftProfile.id).then((response) => {\r\n        setLeftPreferences(response.preferences);\r\n      });\r\n    }\r\n  }, [leftProfile.id, fetchUserPreferences]);\r\n  useEffect(() => {\r\n    if (rightProfile.id) {\r\n      fetchUserPreferences(rightProfile.id).then((response) => {\r\n        setRightPreferences(response.preferences);\r\n      });\r\n    }\r\n  }, [rightProfile.id, fetchUserPreferences]);\r\n\r\n  // Reset the page when sockets didn't receive any messages for a long time\r\n  const restartTimeout = useCallback(() => {\r\n    setAlive(true);\r\n    if (timeoutResetTokenRef.current) {\r\n      clearTimeout(timeoutResetTokenRef.current);\r\n    }\r\n    timeoutResetTokenRef.current = setTimeout(() => {\r\n      // TODO: reset page\r\n      setAlive(false);\r\n      setLeftPlayer(null);\r\n      setRightPlayer(null);\r\n      setLeftLabel(null);\r\n      setRightLabel(null);\r\n      setRecognizedSongName('');\r\n      setLeftPreferences(null);\r\n      setRightPreferences(null);\r\n    }, STATE_RESET_TIMEOUT_SEC * 1000);\r\n  }, []);\r\n\r\n  // Start websockets\r\n  useEffect(() => {\r\n    socketRef.current = new WebSocket(SOCKET_SERVER_IP);\r\n    socketRef.current.onerror = () => {\r\n      setMessage(`Cannot connect to websocket server, please reload the page`);\r\n    };\r\n    socketRef.current.onopen = (e) => {\r\n      setSocketReady(true);\r\n    };\r\n  }, []);\r\n\r\n  // Set the onmessage callback\r\n  useEffect(() => {\r\n    socketRef.current.onmessage = (event) => {\r\n      restartTimeout();\r\n      try {\r\n        const data = event && event.data && JSON.parse(event.data);\r\n        console.log(data);\r\n\r\n        if (data.type === 'result_screen') {\r\n          console.log('Resetting tracking because received result screen');\r\n          resetLeftTracked();\r\n          resetRightTracked();\r\n          const songName = data.data.track_name;\r\n          const leftLabel = _.get('left.chart_label', data.data);\r\n          const rightLabel = _.get('right.chart_label', data.data);\r\n          const leftPlayer = _.get('left.result.player_name', data.data);\r\n          const rightPlayer = _.get('right.result.player_name', data.data);\r\n          setLeftPlayer(leftPlayer);\r\n          setRightPlayer(rightPlayer);\r\n          setLeftLabel(leftLabel);\r\n          setRightLabel(rightLabel);\r\n          setRecognizedSongName(songName);\r\n          appendNewResults(data.data.gained); // Fetch results that we don't have here yet (to calculate elo)\r\n          fetchTopPerSong(songName, leftLabel, rightLabel);\r\n        } else if (data.type === 'chart_selected') {\r\n          setSocketErrorMessage(data.data.error || '');\r\n          if (data.data.leftPlayer || data.data.rightPlayer) {\r\n            setLeftPlayer(data.data.leftPlayer);\r\n            setRightPlayer(data.data.rightPlayer);\r\n          }\r\n          if (data.data.leftLabel || data.data.rightLabel) {\r\n            setLeftLabel(data.data.leftLabel);\r\n            setRightLabel(data.data.rightLabel);\r\n            if (data.data.text) {\r\n              // If we have full info, try to fetch if needed\r\n              const newSongName = data.data.text;\r\n              setRecognizedSongName(newSongName);\r\n              console.log('song name', newSongName, recognizedSongName);\r\n              if (recognizedSongName !== newSongName) {\r\n                fetchTopPerSong(newSongName, data.data.leftLabel, data.data.rightLabel);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {\r\n        console.log('on message error', e);\r\n        setMessage(`Error: ${e.message}`);\r\n      }\r\n    };\r\n  }, [\r\n    recognizedSongName,\r\n    fetchTopPerSong,\r\n    restartTimeout,\r\n    appendNewResults,\r\n    resetLeftTracked,\r\n    resetRightTracked,\r\n  ]);\r\n\r\n  // FOR DEBUG\r\n  // useEffect(() => {\r\n  //   if (!_.isEmpty(profiles) && !leftPlayer && !rightPlayer) {\r\n  //     socketRef.current.onmessage({\r\n  //       data:\r\n  //         '{\"type\": \"chart_selected\", \"data\": {\"text\": \"Iolite Sky\", \"leftLabel\": \"D17\", \"rightLabel\": \"S16\", \"leftPlayer\": \"GRUMD\", \"rightPlayer\": \"DINO\"}}',\r\n  //     });\r\n  //   }\r\n  // }, [profiles, leftPlayer, rightPlayer]);\r\n\r\n  // Resize the results blocks to fill the most space on the page\r\n  useEffect(() => {\r\n    // return;\r\n    if (resultsContainerRef.current && leftResultRef.current) {\r\n      if (rightResultRef.current) {\r\n        // Both refs\r\n        const left = leftResultRef.current;\r\n        const right = rightResultRef.current;\r\n        const totalSize = {\r\n          w: resultsContainerRef.current.clientWidth,\r\n          h: resultsContainerRef.current.clientHeight,\r\n        };\r\n        const scaleHH = totalSize.w / (left.offsetWidth + right.offsetWidth);\r\n        const scaleHW = totalSize.h / Math.max(left.offsetHeight, right.offsetHeight);\r\n        const scaleWH = totalSize.w / Math.max(left.offsetWidth, right.offsetWidth);\r\n        const scaleWW = totalSize.h / (left.offsetHeight + right.offsetHeight);\r\n        // console.log(scaleHH, scaleHW, scaleWH, scaleWW);\r\n        if (Math.min(scaleHH, scaleHW) > Math.min(scaleWH, scaleWW)) {\r\n          resultsContainerRef.current.style.flexDirection = 'row';\r\n          resultsContainerRef.current.style.alignItems = 'center';\r\n          if (scaleHH > scaleHW) {\r\n            resultsContainerRef.current.style.transform = `scale(${0.98 * scaleHW})`;\r\n          } else {\r\n            resultsContainerRef.current.style.transform = `scale(${0.98 * scaleHH})`;\r\n          }\r\n        } else {\r\n          resultsContainerRef.current.style.flexDirection = 'column';\r\n          resultsContainerRef.current.style.alignItems = 'center';\r\n          if (scaleWH > scaleWW) {\r\n            resultsContainerRef.current.style.transform = `scale(${0.98 * scaleWW})`;\r\n          } else {\r\n            resultsContainerRef.current.style.transform = `scale(${0.98 * scaleWH})`;\r\n          }\r\n        }\r\n      } else {\r\n        // One ref\r\n        const left = leftResultRef.current;\r\n        const totalSize = {\r\n          w: resultsContainerRef.current.clientWidth,\r\n          h: resultsContainerRef.current.clientHeight,\r\n        };\r\n        const scaleW = totalSize.w / left.offsetWidth;\r\n        const scaleH = totalSize.h / left.offsetHeight;\r\n        if (scaleW < scaleH) {\r\n          resultsContainerRef.current.style.transform = `scale(${0.98 * scaleW})`;\r\n        } else {\r\n          resultsContainerRef.current.style.transform = `scale(${0.98 * scaleH})`;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const leftChart = _.find({ chartLabel: leftLabel }, songTopData);\r\n  const rightChart = _.find({ chartLabel: rightLabel }, songTopData);\r\n  const chartsToShow = _.uniq(_.compact([leftChart, rightChart]));\r\n\r\n  return (\r\n    <div className=\"tracker-container\">\r\n      <Popups />\r\n      <div className=\"sidebar\">\r\n        <PlayerCard\r\n          player={leftPlayer}\r\n          profile={leftProfile}\r\n          label={leftLabel}\r\n          trackedData={leftTracked}\r\n          preferences={leftPreferences}\r\n          topPlayersList={topPlayersList}\r\n          isLeft\r\n          addPopup={addPopup}\r\n        />\r\n        <PlayerCard\r\n          player={rightPlayer}\r\n          profile={rightProfile}\r\n          label={rightLabel}\r\n          trackedData={rightTracked}\r\n          preferences={rightPreferences}\r\n          topPlayersList={topPlayersList}\r\n          addPopup={addPopup}\r\n        />\r\n      </div>\r\n      <div className=\"results\" ref={resultsContainerRef}>\r\n        {(error || message) && (\r\n          <div className=\"error\">\r\n            {message}\r\n            <br />\r\n            {error && error.message}\r\n          </div>\r\n        )}\r\n        {isSocketReady &&\r\n          !leftPlayer &&\r\n          !rightPlayer &&\r\n          !socketErrorMessage &&\r\n          !isLoading &&\r\n          _.isEmpty(chartsToShow) &&\r\n          (isAlive === null ? (\r\n            <div className=\"msg\">Waiting for recognizer...</div>\r\n          ) : isAlive ? (\r\n            <div className=\"msg\">Waiting for chart select...</div>\r\n          ) : (\r\n            <div className=\"offline msg\">Recognizer is offline</div>\r\n          ))}\r\n        {isSocketReady &&\r\n          (leftLabel || rightLabel) &&\r\n          !socketErrorMessage &&\r\n          !isLoading &&\r\n          _.isEmpty(chartsToShow) &&\r\n          'No results for this chart'}\r\n        {isLoading && <Loader />}\r\n        {!isLoading &&\r\n          chartsToShow.map((chart, chartIndex) => {\r\n            const leftPlayersHiddenStatus = _.omitBy(\r\n              (v) => !v,\r\n              _.getOr({}, 'playersHiddenStatus', leftPreferences)\r\n            );\r\n            const rightPlayersHiddenStatus = _.omitBy(\r\n              (v) => !v,\r\n              _.getOr({}, 'playersHiddenStatus', rightPreferences)\r\n            );\r\n\r\n            const isHiddenInBoth = Object.keys(leftPlayersHiddenStatus).reduce(\r\n              (obj, key) => ({\r\n                ...obj,\r\n                [key]: leftPlayersHiddenStatus[key] && rightPlayersHiddenStatus[key],\r\n              }),\r\n              {}\r\n            );\r\n            return (\r\n              <Chart\r\n                ref={chartIndex === 0 ? leftResultRef : rightResultRef}\r\n                playersHiddenStatus={isHiddenInBoth}\r\n                key={chart.sharedChartId}\r\n                chart={chart}\r\n                leftProfile={leftProfile}\r\n                rightProfile={rightProfile}\r\n                isSocketView\r\n              />\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TrackerApp);\r\n","import { fetchJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nconst LOADING = `TOURNAMENT/LOADING`;\r\nconst SUCCESS = `TOURNAMENT/SUCCESS`;\r\nconst ERROR = `TOURNAMENT/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: {},\r\n  error: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: null,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n        data: {},\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchCurrentTournament = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/tournament/info` }));\r\n      dispatch({ type: SUCCESS, data });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classNames from 'classnames';\r\nimport _ from 'lodash/fp';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport numeral from 'numeral';\r\n\r\nimport './tournaments.scss';\r\n\r\nimport { routes } from 'constants/routes';\r\n\r\nimport { fetchCurrentTournament } from 'reducers/tournament';\r\n\r\nimport Loader from 'components/Shared/Loader';\r\nimport ChartLabel from 'components/Leaderboard/ChartLabel';\r\n\r\nimport { labelToTypeLevel } from 'utils/leaderboards';\r\n\r\nexport default function Tournaments() {\r\n  const dispatch = useDispatch();\r\n  const [selectedBracket, setSelectedBracket] = useState(null);\r\n\r\n  const tournData = useSelector((state) => state.tournament.data);\r\n  const profiles = useSelector((state) => state.results.profiles);\r\n  const isLoading = useSelector((state) => state.tournament.isLoading);\r\n  const currentPlayerId = useSelector((state) => _.get('player.id', state.user.data));\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCurrentTournament());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (currentPlayerId && !selectedBracket && _.get('brackets', tournData)) {\r\n      const bracket = _.find((br) => {\r\n        return br.playerIds.includes(currentPlayerId);\r\n      }, tournData.brackets);\r\n      bracket && setSelectedBracket(bracket);\r\n    }\r\n  }, [currentPlayerId, selectedBracket, tournData]);\r\n\r\n  if (isLoading || _.isEmpty(profiles)) {\r\n    return <Loader />;\r\n  }\r\n\r\n  const { tournament, brackets } = tournData;\r\n\r\n  if (!tournament) {\r\n    return null;\r\n  }\r\n\r\n  const date = new Date(tournament.start_date);\r\n  const monthText = date.toLocaleString('default', {\r\n    month: 'long',\r\n  });\r\n  const tournamentTitle = `${date.getFullYear()} ${monthText}`;\r\n\r\n  return (\r\n    <div className=\"tournaments-page\">\r\n      <header>{tournamentTitle}</header>\r\n      <div className=\"description\">\r\n        <div className=\"labeled-item\">\r\n          <div className=\"title\">Start date:</div>\r\n          <div className=\"text\">{new Date(tournament.start_date).toLocaleDateString()}</div>\r\n        </div>\r\n        <div className=\"labeled-item\">\r\n          <div className=\"title\">End date:</div>\r\n          <div className=\"text\">{new Date(tournament.end_date).toLocaleDateString()}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"brackets-title\">Brackets:</div>\r\n      <div className=\"brackets\">\r\n        {brackets.map((bracket) => {\r\n          return (\r\n            <div\r\n              key={bracket.name}\r\n              className={classNames('bracket', {\r\n                active: bracket.name === _.get('name', selectedBracket),\r\n              })}\r\n              onClick={() => setSelectedBracket(bracket)}\r\n            >\r\n              <div className=\"bracket-name\">{bracket.name}</div>\r\n              {bracket.charts.map((chart) => {\r\n                const [type, level] = labelToTypeLevel(chart.label);\r\n                return (\r\n                  <div className=\"chart\" key={chart.sharedChartId}>\r\n                    <ChartLabel type={type} level={level} /> {chart.trackName}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      {selectedBracket && (\r\n        <>\r\n          <div className=\"results-title\">Results:</div>\r\n          <div className=\"results\">\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"player-name\">player</th>\r\n                  <th className=\"total\">total</th>\r\n                  {selectedBracket.charts.map((chart) => {\r\n                    const [type, level] = labelToTypeLevel(chart.label);\r\n                    return (\r\n                      <th colSpan={3} key={chart.sharedChartId}>\r\n                        <div className=\"chart-header\">\r\n                          <ChartLabel type={type} level={level} />{' '}\r\n                          <NavLink\r\n                            exact\r\n                            to={routes.leaderboard.sharedChart.getPath({\r\n                              sharedChartId: chart.sharedChartId,\r\n                            })}\r\n                          >\r\n                            {chart.trackName}\r\n                          </NavLink>\r\n                        </div>\r\n                      </th>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {(() => {\r\n                  const players = _.flow(\r\n                    _.groupBy('player_id'),\r\n                    _.mapValues(\r\n                      _.flow(\r\n                        _.map((result) => ({\r\n                          ...result,\r\n                          columnIndex: _.findIndex(\r\n                            { sharedChartId: result.shared_chart },\r\n                            selectedBracket.charts\r\n                          ),\r\n                        })),\r\n                        _.groupBy('columnIndex')\r\n                      )\r\n                    )\r\n                  )(selectedBracket.scores);\r\n                  const charts = selectedBracket.charts.map((chart, index) => {\r\n                    return {\r\n                      ...chart,\r\n                      maxScore: _.flow(\r\n                        _.values,\r\n                        _.flatMap(index),\r\n                        _.maxBy('score'),\r\n                        _.get('score')\r\n                      )(players),\r\n                    };\r\n                  });\r\n\r\n                  const playerData = _.mapValues(\r\n                    _.flow(\r\n                      _.toPairs,\r\n                      _.map(([index, results]) => {\r\n                        const maxScore = charts[index].maxScore;\r\n                        const bestPlayerScore = _.flow(_.maxBy('score'), _.get('score'))(results);\r\n                        const percent = ((bestPlayerScore / maxScore) * 100).toFixed(1);\r\n                        return [\r\n                          index,\r\n                          {\r\n                            playerName: results[0].player_name,\r\n                            playcount: results.length,\r\n                            score: bestPlayerScore,\r\n                            percent: percent,\r\n                            percentRaw: bestPlayerScore / maxScore,\r\n                          },\r\n                        ];\r\n                      }),\r\n                      (chartResults) => {\r\n                        const totalPercentRaw = _.sumBy('[1].percentRaw', chartResults);\r\n                        return {\r\n                          infoByIndex: _.fromPairs(chartResults),\r\n                          totalPercentRaw,\r\n                          totalPercent: (totalPercentRaw * 100).toFixed(1),\r\n                        };\r\n                      }\r\n                    ),\r\n                    players\r\n                  );\r\n                  const sortedIds = _.flow(\r\n                    _.keys,\r\n                    _.orderBy((id) => playerData[id].totalPercentRaw, ['desc'])\r\n                  )(playerData);\r\n                  const noResultsIds = _.remove(\r\n                    (id) => sortedIds.includes(_.toString(id)) || !profiles[id],\r\n                    selectedBracket.playerIds\r\n                  );\r\n\r\n                  return [...sortedIds, ...noResultsIds].map((playerId) => {\r\n                    const data = playerData[playerId] || {};\r\n                    const playerName = _.get('name', profiles[playerId]) || data.playerName;\r\n                    return (\r\n                      <tr key={playerId}>\r\n                        <td className=\"player-name\">{playerName}</td>\r\n                        <td className=\"total\">{data.totalPercent || 0}</td>\r\n                        {selectedBracket.charts.map((chart, index) => {\r\n                          const info = data.infoByIndex && data.infoByIndex[index];\r\n                          return (\r\n                            <React.Fragment key={index}>\r\n                              <td>{info && `${info.percent}%`}</td>\r\n                              <td>{info && numeral(info.score).format('0,0')}</td>\r\n                              <td>{info && info.playcount}</td>\r\n                            </React.Fragment>\r\n                          );\r\n                        })}\r\n                      </tr>\r\n                    );\r\n                  });\r\n                })()}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { fetchJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nconst LOADING = `TRACKLIST/LOADING`;\r\nconst SUCCESS = `TRACKLIST/SUCCESS`;\r\nconst ERROR = `TRACKLIST/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: [],\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchTracklist = () => {\r\n  return async dispatch => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/tracklist/stats/XX` }));\r\n      dispatch({ type: SUCCESS, data });\r\n      return data;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import { fetchJson } from 'utils/fetch';\r\n\r\nimport { HOST } from 'constants/backend';\r\n\r\nconst LOADING = `PLAYERS/LOADING`;\r\nconst SUCCESS = `PLAYERS/SUCCESS`;\r\nconst ERROR = `PLAYERS/ERROR`;\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        error: null,\r\n      };\r\n    case ERROR:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.error,\r\n        data: {},\r\n      };\r\n    case SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        data: action.data,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const fetchPlayers = () => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: LOADING });\r\n    try {\r\n      const data = await dispatch(fetchJson({ url: `${HOST}/players` }));\r\n      dispatch({ type: SUCCESS, data: data.players });\r\n      return data.players;\r\n    } catch (error) {\r\n      dispatch({ type: ERROR, error });\r\n      return null;\r\n    }\r\n  };\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport localForage from 'localforage';\r\nimport ReactModal from 'react-modal';\r\nimport _ from 'lodash/fp';\r\n\r\nimport 'react-responsive-ui/style.css';\r\nimport './App.scss';\r\n\r\nimport { routes } from 'constants/routes';\r\nimport { CHART_MIN_MAX } from 'constants/leaderboard';\r\n\r\nimport SongsTop from 'components/SongsTop/SongsTop';\r\nimport Leaderboard from 'components/Leaderboard/Leaderboard';\r\nimport Ranking from 'components/Ranking/Ranking';\r\nimport Profile from 'components/Profile/Profile';\r\nimport ResultsByLevel from 'components/Profile/ResultsByLevel';\r\nimport ProfileCompare from 'components/ProfileCompare/ProfileCompare';\r\nimport TopBar from 'components/Shared/TopBar/TopBar';\r\nimport Loader from 'components/Shared/Loader';\r\nimport LoginScreen from 'components/LoginScreen/LoginScreen';\r\nimport SocketTracker from 'components/SocketTracker/SocketTracker';\r\nimport Tournaments from 'components/Tournaments/Tournaments';\r\n\r\nimport { fetchResults, setFilter } from 'reducers/results';\r\nimport { fetchTracklist } from 'reducers/tracklist';\r\nimport { fetchUser } from 'reducers/user';\r\nimport { fetchPreferences } from 'reducers/preferences';\r\nimport { fetchChartsData } from 'reducers/charts';\r\nimport { fetchPlayers } from 'reducers/players';\r\n\r\nReactModal.setAppElement('#root');\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const userData = useSelector((state) => state.user.data);\r\n  const isLoading = useSelector((state) => state.user.isLoading);\r\n\r\n  // const resultsStore = useSelector(state => state.results);\r\n  // console.log(resultsStore)\r\n\r\n  useEffect(() => {\r\n    if (!process.env.REACT_APP_SOCKET) {\r\n      dispatch(fetchUser());\r\n      localForage\r\n        .getItem('filter')\r\n        .then((filter) => {\r\n          if (filter) {\r\n            dispatch(\r\n              setFilter({\r\n                ..._.omit('song', filter),\r\n                chartRange: filter.chartRange && {\r\n                  ...filter.chartRange,\r\n                  range: _.every(\r\n                    (r) => r >= CHART_MIN_MAX[0] && r <= CHART_MIN_MAX[1],\r\n                    filter.chartRange.range\r\n                  )\r\n                    ? filter.chartRange.range\r\n                    : CHART_MIN_MAX,\r\n                },\r\n              })\r\n            );\r\n          }\r\n        })\r\n        .catch((error) => console.error('Cannot get filter from local storage', error));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (!process.env.REACT_APP_SOCKET && userData && userData.player) {\r\n      Promise.all([\r\n        dispatch(fetchPlayers()),\r\n        dispatch(fetchTracklist()),\r\n        dispatch(fetchPreferences()),\r\n      ]).then(() => {\r\n        dispatch(fetchChartsData());\r\n      });\r\n    }\r\n  }, [dispatch, userData]);\r\n\r\n  useEffect(() => {\r\n    if (process.env.REACT_APP_SOCKET) {\r\n      dispatch(fetchTracklist()).then(() => {\r\n        dispatch(fetchResults());\r\n      });\r\n    }\r\n  }, [dispatch]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"container\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (process.env.REACT_APP_SOCKET) {\r\n    return <SocketTracker />;\r\n  }\r\n\r\n  if (!userData || !userData.player) {\r\n    return <LoginScreen />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TopBar />\r\n      <Route exact path=\"/\" render={() => <Redirect to={routes.leaderboard.path} />} />\r\n      <Route exact path={routes.leaderboard.path} component={Leaderboard} />\r\n      <Route exact path={routes.leaderboard.sharedChart.path} component={Leaderboard} />\r\n      <Route path={routes.ranking.path} component={Ranking} />\r\n      <Route path={routes.profile.path}>\r\n        <Switch>\r\n          <Route path={routes.profile.path} exact component={Profile} />\r\n          <Route path={routes.profile.resultsByLevel.path} exact component={ResultsByLevel} />\r\n          <Route path={routes.profile.resultsByLevel.level.path} exact component={ResultsByLevel} />\r\n          <Route path={routes.profile.compare.path} exact component={ProfileCompare} />\r\n        </Switch>\r\n      </Route>\r\n      <Route path={routes.songs.path} component={SongsTop} />\r\n      <Route path={routes.tournaments.path} component={Tournaments} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport mostPlayed from './mostPlayed';\r\nimport mostPlayedMonth from './mostPlayedMonth';\r\nimport leastPlayed from './leastPlayed';\r\n\r\nexport default combineReducers({\r\n  mostPlayed,\r\n  mostPlayedMonth,\r\n  leastPlayed,\r\n});\r\n","import _ from 'lodash/fp';\r\nimport { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport charts from 'reducers/charts';\r\nimport login from 'reducers/login';\r\nimport players from 'reducers/players';\r\nimport popups from 'reducers/popups';\r\nimport preferences from 'reducers/preferences';\r\nimport presets from 'reducers/presets';\r\nimport profiles from 'reducers/profiles';\r\nimport results from 'reducers/results';\r\nimport topPerSong from 'reducers/topPerSong';\r\nimport tournament from 'reducers/tournament';\r\nimport tracklist from 'reducers/tracklist';\r\nimport trackStats from 'reducers/trackStats';\r\nimport user from 'reducers/user';\r\n\r\nconst rootReducer = combineReducers({\r\n  charts,\r\n  login,\r\n  players,\r\n  popups,\r\n  preferences,\r\n  presets,\r\n  profiles,\r\n  results,\r\n  topPerSong,\r\n  tournament,\r\n  tracklist,\r\n  trackStats,\r\n  user,\r\n});\r\n\r\nconst stateSanitizer = (x) => {\r\n  if (_.isArray(x)) {\r\n    return x.length > 20 ? [{ length: x.length }, ...x.slice(0, 20)] : x;\r\n  }\r\n  if (_.isPlainObject(x)) {\r\n    const keys = _.keys(x);\r\n    if (keys.length > 20) {\r\n      return keys.slice(0, 20).reduce((acc, key) => {\r\n        acc[key] = stateSanitizer(x[key]);\r\n        return acc;\r\n      }, {});\r\n    } else {\r\n      return _.mapValues(stateSanitizer, x);\r\n    }\r\n  }\r\n  return x;\r\n};\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && process.env.NODE_ENV === 'development'\r\n    ? compose(\r\n        applyMiddleware(thunk),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__({\r\n          stateSanitizer,\r\n          // ({\r\n          //   ...state,\r\n          //   charts: {\r\n          //     ...state.charts,\r\n          //     data: `big object`,\r\n          //   },\r\n          //   results: {\r\n          //     ...state.results,\r\n          //     data: `big array`,\r\n          //     results: `big array`,\r\n          //     sharedCharts: 'big object',\r\n          //     originalData: 'big object',\r\n          //     resultInfo: 'big object',\r\n          //     profiles: `big object`,\r\n          //   },\r\n          // }),\r\n        })\r\n      )\r\n    : applyMiddleware(thunk)\r\n);\r\n","import 'promise-polyfill';\r\nimport 'whatwg-fetch';\r\nimport 'utils/polyfills';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.scss';\r\n\r\nimport { Language, detectedLanguage } from 'utils/context/translation';\r\n\r\nimport App from 'components/App';\r\n\r\nimport { store } from 'reducers';\r\n\r\nReactDOM.render(\r\n  <Language.Provider value={detectedLanguage}>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <App />\r\n      </HashRouter>\r\n    </Provider>\r\n  </Language.Provider>,\r\n  document.getElementById('root')\r\n);\r\n","\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"getProcessedProfiles\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"59428aa818000367af89.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t"],"sourceRoot":""}